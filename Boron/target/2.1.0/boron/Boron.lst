
d:/Research/Current_Projects/USGS_Sensor_Network/Particle_Code_Repo/LATEST_CODE/Boron/Boron_Code/Boron/Boron/target/2.1.0/boron/Boron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000046f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8710  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e428  000d8714  0001e428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000360  2003e490  2003e490  0002e490  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d877c  000d877c  0002877c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d87a4  000d87a4  000287a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00186cc7  00000000  00000000  000287a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00018f47  00000000  00000000  001af46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00031efb  00000000  00000000  001c83b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c88  00000000  00000000  001fa2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000089c0  00000000  00000000  001fcf39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b71d  00000000  00000000  002058f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003ef71  00000000  00000000  00241016  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113a57  00000000  00000000  0027ff87  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007e6c  00000000  00000000  003939e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ffbd 	bl	d7fb0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ffdf 	bl	d8000 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e428 	.word	0x2003e428
   d404c:	000d8714 	.word	0x000d8714
   d4050:	2003e490 	.word	0x2003e490
   d4054:	2003e490 	.word	0x2003e490
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fac7 	bl	d65f4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d86ec 	.word	0x000d86ec
   d4080:	000d8710 	.word	0x000d8710

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bf40 	b.w	d4f08 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fdd5 	bl	d4c38 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 ba71 	b.w	d6578 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bbfb 	b.w	d5890 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bbf9 	b.w	d5890 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bbff 	b.w	d58a0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN16UltrasonicSensorD1Ev>:
        break;
    }
}

//! Set the only possible output to high impedance mode for safety
UltrasonicSensor::~UltrasonicSensor()
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4b06      	ldr	r3, [pc, #24]	; (d40d0 <_ZN16UltrasonicSensorD1Ev+0x1c>)
   d40b8:	6003      	str	r3, [r0, #0]
   d40ba:	4604      	mov	r4, r0
{
    pinMode(triggerPin_, INPUT);
   d40bc:	2100      	movs	r1, #0
   d40be:	8880      	ldrh	r0, [r0, #4]
   d40c0:	f003 f8d8 	bl	d7274 <pinMode>
UltrasonicSensor::~UltrasonicSensor()
   d40c4:	f104 0010 	add.w	r0, r4, #16
   d40c8:	f001 fe92 	bl	d5df0 <_ZN6StringD1Ev>
}
   d40cc:	4620      	mov	r0, r4
   d40ce:	bd10      	pop	{r4, pc}
   d40d0:	000d81ec 	.word	0x000d81ec

000d40d4 <_ZN16UltrasonicSensorD0Ev>:
UltrasonicSensor::~UltrasonicSensor()
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4604      	mov	r4, r0
}
   d40d8:	f7ff ffec 	bl	d40b4 <_ZN16UltrasonicSensorD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	212c      	movs	r1, #44	; 0x2c
   d40e0:	f003 f991 	bl	d7406 <_ZdlPvj>
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}

000d40e8 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String>:
UltrasonicSensor::UltrasonicSensor(SensorStyle style, const int pinRx, const int pinTx, String name) :
   d40e8:	b570      	push	{r4, r5, r6, lr}
   d40ea:	4604      	mov	r4, r0
    name_(name)
   d40ec:	4819      	ldr	r0, [pc, #100]	; (d4154 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x6c>)
   d40ee:	7361      	strb	r1, [r4, #13]
   d40f0:	2501      	movs	r5, #1
   d40f2:	e9c4 0300 	strd	r0, r3, [r4]
   d40f6:	9904      	ldr	r1, [sp, #16]
   d40f8:	60a2      	str	r2, [r4, #8]
   d40fa:	7325      	strb	r5, [r4, #12]
   d40fc:	f104 0010 	add.w	r0, r4, #16
   d4100:	f001 fee4 	bl	d5ecc <_ZN6StringC1ERKS_>
   d4104:	4b14      	ldr	r3, [pc, #80]	; (d4158 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x70>)
    switch (sensorStyle_)
   d4106:	7b66      	ldrb	r6, [r4, #13]
    name_(name)
   d4108:	6223      	str	r3, [r4, #32]
   d410a:	4b14      	ldr	r3, [pc, #80]	; (d415c <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x74>)
   d410c:	6263      	str	r3, [r4, #36]	; 0x24
    switch (sensorStyle_)
   d410e:	42ae      	cmp	r6, r5
    name_(name)
   d4110:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4114:	62a3      	str	r3, [r4, #40]	; 0x28
    switch (sensorStyle_)
   d4116:	d00c      	beq.n	d4132 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x4a>
   d4118:	2e02      	cmp	r6, #2
   d411a:	d00d      	beq.n	d4138 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x50>
   d411c:	b93e      	cbnz	r6, d412e <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x46>
        pinMode(triggerPin_, OUTPUT);
   d411e:	88a0      	ldrh	r0, [r4, #4]
   d4120:	4629      	mov	r1, r5
   d4122:	f003 f8a7 	bl	d7274 <pinMode>
        pinMode(receivePin_, INPUT);
   d4126:	8920      	ldrh	r0, [r4, #8]
   d4128:	4631      	mov	r1, r6
        pinMode(triggerPin_, OUTPUT);
   d412a:	f003 f8a3 	bl	d7274 <pinMode>
}
   d412e:	4620      	mov	r0, r4
   d4130:	bd70      	pop	{r4, r5, r6, pc}
        pinMode(triggerPin_, OUTPUT);
   d4132:	88a0      	ldrh	r0, [r4, #4]
   d4134:	4631      	mov	r1, r6
   d4136:	e7f8      	b.n	d412a <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x42>
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
            if (INVALID_PIN != triggerPin_)
   d4138:	6860      	ldr	r0, [r4, #4]
            enabled_ = true;
   d413a:	7325      	strb	r5, [r4, #12]
            if (INVALID_PIN != triggerPin_)
   d413c:	1c43      	adds	r3, r0, #1
   d413e:	d0f6      	beq.n	d412e <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x46>
            {
                pinMode(triggerPin_, OUTPUT);
   d4140:	4629      	mov	r1, r5
   d4142:	b280      	uxth	r0, r0
   d4144:	f003 f896 	bl	d7274 <pinMode>
                digitalWrite(triggerPin_, startReading);
   d4148:	88a0      	ldrh	r0, [r4, #4]
   d414a:	4629      	mov	r1, r5
   d414c:	f003 f8a3 	bl	d7296 <digitalWrite>
   d4150:	e7ed      	b.n	d412e <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x46>
   d4152:	bf00      	nop
   d4154:	000d81ec 	.word	0x000d81ec
   d4158:	43fa0000 	.word	0x43fa0000
   d415c:	40533333 	.word	0x40533333

000d4160 <_ZN16UltrasonicSensor12GetReading_VEv>:
    TriggerSensor();
    return pulseIn(receivePin_, HIGH);
}

float UltrasonicSensor::GetReading_V()
{
   d4160:	b510      	push	{r4, lr}
   d4162:	4604      	mov	r4, r0
    return (analogRead(receivePin_) * analogReference_V_) / analogDivs_;
   d4164:	8900      	ldrh	r0, [r0, #8]
   d4166:	f003 f8af 	bl	d72c8 <analogRead>
   d416a:	ee07 0a90 	vmov	s15, r0
   d416e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
   d4172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4176:	ee67 7a80 	vmul.f32	s15, s15, s0
   d417a:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
   d417e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4182:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d4186:	bd10      	pop	{r4, pc}

000d4188 <_ZN16UltrasonicSensor13TriggerSensorEv>:
    return dist_cm;
}

//! Trigger the distance reading from the sensor according to its pin layout
void UltrasonicSensor::TriggerSensor()
{
   d4188:	b538      	push	{r3, r4, r5, lr}
    switch(sensorStyle_)
   d418a:	7b45      	ldrb	r5, [r0, #13]
   d418c:	2d01      	cmp	r5, #1
{
   d418e:	4604      	mov	r4, r0
    switch(sensorStyle_)
   d4190:	d00f      	beq.n	d41b2 <_ZN16UltrasonicSensor13TriggerSensorEv+0x2a>
   d4192:	2d02      	cmp	r5, #2
   d4194:	d022      	beq.n	d41dc <_ZN16UltrasonicSensor13TriggerSensorEv+0x54>
   d4196:	bb3d      	cbnz	r5, d41e8 <_ZN16UltrasonicSensor13TriggerSensorEv+0x60>
        digitalWrite(triggerPin_, LOW);
        pinMode(triggerPin_, INPUT); // Prepare the pin to read data
        break;

    case FourPin:
        digitalWrite(triggerPin_, HIGH); // Just send the pulse
   d4198:	2101      	movs	r1, #1
   d419a:	8880      	ldrh	r0, [r0, #4]
   d419c:	f003 f87b 	bl	d7296 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d41a0:	200a      	movs	r0, #10
   d41a2:	f001 f937 	bl	d5414 <HAL_Delay_Microseconds>
        delayMicroseconds(10);
        digitalWrite(triggerPin_, LOW);
   d41a6:	88a0      	ldrh	r0, [r4, #4]
   d41a8:	4629      	mov	r1, r5
        {
            digitalWrite(triggerPin_, HIGH);
        }
        break;
    }
}
   d41aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            digitalWrite(triggerPin_, HIGH);
   d41ae:	f003 b872 	b.w	d7296 <digitalWrite>
        pinMode(triggerPin_, OUTPUT); // Prepare the pin to send the pulse
   d41b2:	4629      	mov	r1, r5
   d41b4:	8880      	ldrh	r0, [r0, #4]
   d41b6:	f003 f85d 	bl	d7274 <pinMode>
        digitalWrite(triggerPin_, HIGH); // Send the pulse
   d41ba:	4629      	mov	r1, r5
   d41bc:	88a0      	ldrh	r0, [r4, #4]
   d41be:	f003 f86a 	bl	d7296 <digitalWrite>
   d41c2:	200a      	movs	r0, #10
   d41c4:	f001 f926 	bl	d5414 <HAL_Delay_Microseconds>
        digitalWrite(triggerPin_, LOW);
   d41c8:	88a0      	ldrh	r0, [r4, #4]
   d41ca:	2100      	movs	r1, #0
   d41cc:	f003 f863 	bl	d7296 <digitalWrite>
        pinMode(triggerPin_, INPUT); // Prepare the pin to read data
   d41d0:	88a0      	ldrh	r0, [r4, #4]
   d41d2:	2100      	movs	r1, #0
}
   d41d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(triggerPin_, INPUT); // Prepare the pin to read data
   d41d8:	f003 b84c 	b.w	d7274 <pinMode>
        if (INVALID_PIN != triggerPin_)
   d41dc:	6840      	ldr	r0, [r0, #4]
   d41de:	1c43      	adds	r3, r0, #1
   d41e0:	d002      	beq.n	d41e8 <_ZN16UltrasonicSensor13TriggerSensorEv+0x60>
            digitalWrite(triggerPin_, HIGH);
   d41e2:	2101      	movs	r1, #1
   d41e4:	b280      	uxth	r0, r0
   d41e6:	e7e0      	b.n	d41aa <_ZN16UltrasonicSensor13TriggerSensorEv+0x22>
}
   d41e8:	bd38      	pop	{r3, r4, r5, pc}

000d41ea <_ZN16UltrasonicSensor13GetReading_usEv>:
{
   d41ea:	b510      	push	{r4, lr}
   d41ec:	4604      	mov	r4, r0
    TriggerSensor();
   d41ee:	f7ff ffcb 	bl	d4188 <_ZN16UltrasonicSensor13TriggerSensorEv>
    return pulseIn(receivePin_, HIGH);
   d41f2:	8920      	ldrh	r0, [r4, #8]
   d41f4:	2101      	movs	r1, #1
}
   d41f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return pulseIn(receivePin_, HIGH);
   d41fa:	f003 b87c 	b.w	d72f6 <pulseIn>
	...

000d4200 <_ZN16UltrasonicSensor14GetDistance_cmEv>:
{
   d4200:	b510      	push	{r4, lr}
    switch(sensorStyle_)
   d4202:	7b43      	ldrb	r3, [r0, #13]
   d4204:	2b01      	cmp	r3, #1
{
   d4206:	4604      	mov	r4, r0
    switch(sensorStyle_)
   d4208:	d904      	bls.n	d4214 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x14>
   d420a:	2b02      	cmp	r3, #2
   d420c:	d011      	beq.n	d4232 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x32>
   d420e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d423c <_ZN16UltrasonicSensor14GetDistance_cmEv+0x3c>
}
   d4212:	bd10      	pop	{r4, pc}
        dist_cm = (GetReading_us() * SPEED_OF_SOUND_cm_per_us) / 2.0;
   d4214:	f7ff ffe9 	bl	d41ea <_ZN16UltrasonicSensor13GetReading_usEv>
   d4218:	ee07 0a90 	vmov	s15, r0
   d421c:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d4220:	eddf 7a07 	vldr	s15, [pc, #28]	; d4240 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x40>
   d4224:	ee20 0a27 	vmul.f32	s0, s0, s15
   d4228:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        dist_cm = GetReading_V() * analogScale_cmpV_;
   d422c:	ee20 0a27 	vmul.f32	s0, s0, s15
    return dist_cm;
   d4230:	e7ef      	b.n	d4212 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x12>
        dist_cm = GetReading_V() * analogScale_cmpV_;
   d4232:	f7ff ff95 	bl	d4160 <_ZN16UltrasonicSensor12GetReading_VEv>
   d4236:	edd4 7a08 	vldr	s15, [r4, #32]
   d423a:	e7f7      	b.n	d422c <_ZN16UltrasonicSensor14GetDistance_cmEv+0x2c>
   d423c:	00000000 	.word	0x00000000
   d4240:	3d0c7e28 	.word	0x3d0c7e28

000d4244 <_ZN6Sensor9GetSampleEv>:
  ~Sensor() {
    delete[] name_; // Free up name memory
  }

  // Overload with custom sensor sampling code
  virtual float GetSample() { return (enabled_) ? 0 : -1; }
   d4244:	7903      	ldrb	r3, [r0, #4]
   d4246:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4258 <_ZN6Sensor9GetSampleEv+0x14>
   d424a:	2b00      	cmp	r3, #0
   d424c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4250:	bf08      	it	eq
   d4252:	eeb0 0a67 	vmoveq.f32	s0, s15
   d4256:	4770      	bx	lr
   d4258:	00000000 	.word	0x00000000

000d425c <_ZN6Sensor6EnableEv>:
      Serial.println("Didnt trimm1");
      return -1;
    }
  }

  virtual void Enable() { enabled_ = true; }
   d425c:	2301      	movs	r3, #1
   d425e:	7103      	strb	r3, [r0, #4]
   d4260:	4770      	bx	lr

000d4262 <_ZN6Sensor7DisableEv>:

  virtual void Disable() { enabled_ = false; }
   d4262:	2300      	movs	r3, #0
   d4264:	7103      	strb	r3, [r0, #4]
   d4266:	4770      	bx	lr

000d4268 <_ZN10StatsTools10StatsArrayIfED1Ev>:
    StatsArray(unsigned int startingSize) :
        size_(startingSize),
        values_(new T[size_]),
        count_(0) {}

    virtual ~StatsArray(){}
   d4268:	4770      	bx	lr

000d426a <_ZN22AnalogUltrasonicSensor6EnableEv>:
	float GetSample()
	{
		return sensor_->GetDistance_cm();
	}

	void Enable()
   d426a:	b538      	push	{r3, r4, r5, lr}
	{
		sensor_->Enable(true); // For the maxbotix sensor "true" here tells it to start taking samples
   d426c:	6904      	ldr	r4, [r0, #16]
            if (INVALID_PIN != triggerPin_)
   d426e:	6860      	ldr	r0, [r4, #4]
            enabled_ = true;
   d4270:	2501      	movs	r5, #1
            if (INVALID_PIN != triggerPin_)
   d4272:	1c43      	adds	r3, r0, #1
            enabled_ = true;
   d4274:	7325      	strb	r5, [r4, #12]
            if (INVALID_PIN != triggerPin_)
   d4276:	d009      	beq.n	d428c <_ZN22AnalogUltrasonicSensor6EnableEv+0x22>
                pinMode(triggerPin_, OUTPUT);
   d4278:	4629      	mov	r1, r5
   d427a:	b280      	uxth	r0, r0
   d427c:	f002 fffa 	bl	d7274 <pinMode>
                digitalWrite(triggerPin_, startReading);
   d4280:	88a0      	ldrh	r0, [r4, #4]
   d4282:	4629      	mov	r1, r5
	}
   d4284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4288:	f003 b805 	b.w	d7296 <digitalWrite>
   d428c:	bd38      	pop	{r3, r4, r5, pc}

000d428e <_ZN10StatsTools10StatsArrayIfED0Ev>:
   d428e:	b510      	push	{r4, lr}
   d4290:	2110      	movs	r1, #16
   d4292:	4604      	mov	r4, r0
   d4294:	f003 f8b7 	bl	d7406 <_ZdlPvj>
   d4298:	4620      	mov	r0, r4
   d429a:	bd10      	pop	{r4, pc}

000d429c <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d429c:	b538      	push	{r3, r4, r5, lr}
   d429e:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d42a0:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d42a2:	b128      	cbz	r0, d42b0 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d42a4:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d42a6:	210c      	movs	r1, #12
   d42a8:	f003 f8ad 	bl	d7406 <_ZdlPvj>
            wakeupSource = next;
   d42ac:	4628      	mov	r0, r5
        while (wakeupSource) {
   d42ae:	e7f8      	b.n	d42a2 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d42b0:	4620      	mov	r0, r4
   d42b2:	bd38      	pop	{r3, r4, r5, pc}

000d42b4 <_ZN22AnalogUltrasonicSensor9GetSampleEv>:
		return sensor_->GetDistance_cm();
   d42b4:	6900      	ldr	r0, [r0, #16]
   d42b6:	f7ff bfa3 	b.w	d4200 <_ZN16UltrasonicSensor14GetDistance_cmEv>

000d42ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d42ba:	b510      	push	{r4, lr}
   d42bc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42be:	6800      	ldr	r0, [r0, #0]
   d42c0:	b118      	cbz	r0, d42ca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d42c2:	f001 faed 	bl	d58a0 <free>
            wakeupSource_ = nullptr;
   d42c6:	2300      	movs	r3, #0
   d42c8:	6023      	str	r3, [r4, #0]
        }
    }
   d42ca:	bd10      	pop	{r4, pc}

000d42cc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42cc:	b510      	push	{r4, lr}
   d42ce:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d42d0:	f7ff fff3 	bl	d42ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d42d4:	4620      	mov	r0, r4
   d42d6:	bd10      	pop	{r4, pc}

000d42d8 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42d8:	b570      	push	{r4, r5, r6, lr}
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d42da:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d42de:	4604      	mov	r4, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d42e0:	42ae      	cmp	r6, r5
   d42e2:	d008      	beq.n	d42f6 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x1e>
  uint8_t netSync = 0xC;
};

#include "Sensor.h"

struct SensorData {
   d42e4:	f105 0024 	add.w	r0, r5, #36	; 0x24
   d42e8:	f001 fd82 	bl	d5df0 <_ZN6StringD1Ev>
   d42ec:	4628      	mov	r0, r5
   d42ee:	f001 fd7f 	bl	d5df0 <_ZN6StringD1Ev>
   d42f2:	3538      	adds	r5, #56	; 0x38
   d42f4:	e7f4      	b.n	d42e0 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d42f6:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d42f8:	b108      	cbz	r0, d42fe <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x26>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d42fa:	f7ff fed0 	bl	d409e <_ZdlPv>
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   d42fe:	4620      	mov	r0, r4
   d4300:	bd70      	pop	{r4, r5, r6, pc}

000d4302 <_ZNSt6vectorI12SensorConfigSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d4302:	b510      	push	{r4, lr}
   d4304:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d4306:	6800      	ldr	r0, [r0, #0]
	if (__p)
   d4308:	b108      	cbz	r0, d430e <_ZNSt6vectorI12SensorConfigSaIS0_EED1Ev+0xc>
   d430a:	f7ff fec8 	bl	d409e <_ZdlPv>
      }
   d430e:	4620      	mov	r0, r4
   d4310:	bd10      	pop	{r4, pc}

000d4312 <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
   d4312:	b570      	push	{r4, r5, r6, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d4314:	e9d0 5600 	ldrd	r5, r6, [r0]
      ~vector() _GLIBCXX_NOEXCEPT
   d4318:	4604      	mov	r4, r0
   d431a:	42ae      	cmp	r6, r5
   d431c:	d004      	beq.n	d4328 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
    { __pointer->~_Tp(); }
   d431e:	4628      	mov	r0, r5
   d4320:	f001 fd66 	bl	d5df0 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   d4324:	3510      	adds	r5, #16
   d4326:	e7f8      	b.n	d431a <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	_M_deallocate(_M_impl._M_start,
   d4328:	6820      	ldr	r0, [r4, #0]
	if (__p)
   d432a:	b108      	cbz	r0, d4330 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x1e>
   d432c:	f7ff feb7 	bl	d409e <_ZdlPv>
      }
   d4330:	4620      	mov	r0, r4
   d4332:	bd70      	pop	{r4, r5, r6, pc}

000d4334 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4334:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4336:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4338:	4605      	mov	r5, r0
   d433a:	460e      	mov	r6, r1
        if (valid_) {
   d433c:	b1cb      	cbz	r3, d4372 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d433e:	6803      	ldr	r3, [r0, #0]
   d4340:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4342:	b123      	cbz	r3, d434e <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4344:	889a      	ldrh	r2, [r3, #4]
   d4346:	2a04      	cmp	r2, #4
   d4348:	d017      	beq.n	d437a <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d434a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d434c:	e7f9      	b.n	d4342 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d434e:	490c      	ldr	r1, [pc, #48]	; (d4380 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4350:	2010      	movs	r0, #16
   d4352:	f003 f85a 	bl	d740a <_ZnwjRKSt9nothrow_t>
   d4356:	4604      	mov	r4, r0
   d4358:	b168      	cbz	r0, d4376 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d435a:	2210      	movs	r2, #16
   d435c:	2100      	movs	r1, #0
   d435e:	f003 fe4f 	bl	d8000 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4362:	4b08      	ldr	r3, [pc, #32]	; (d4384 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4364:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4366:	2304      	movs	r3, #4
   d4368:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d436a:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d436c:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d436e:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d4372:	4628      	mov	r0, r5
   d4374:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4376:	7528      	strb	r0, [r5, #20]
                return *this;
   d4378:	e7fb      	b.n	d4372 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d437a:	60de      	str	r6, [r3, #12]
                return *this;
   d437c:	e7f9      	b.n	d4372 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d437e:	bf00      	nop
   d4380:	000d8574 	.word	0x000d8574
   d4384:	00030010 	.word	0x00030010

000d4388 <_ZN22AnalogUltrasonicSensorC1E6Stringii>:
	AnalogUltrasonicSensor(String name, const int inputPin, const int enablePin = UltrasonicSensor::INVALID_PIN):
   d4388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d438c:	b08a      	sub	sp, #40	; 0x28
   d438e:	4604      	mov	r4, r0
		Sensor(name, String("cm"))
   d4390:	ad06      	add	r5, sp, #24
   d4392:	a802      	add	r0, sp, #8
	AnalogUltrasonicSensor(String name, const int inputPin, const int enablePin = UltrasonicSensor::INVALID_PIN):
   d4394:	4617      	mov	r7, r2
   d4396:	4698      	mov	r8, r3
		Sensor(name, String("cm"))
   d4398:	f001 fd98 	bl	d5ecc <_ZN6StringC1ERKS_>
   d439c:	4922      	ldr	r1, [pc, #136]	; (d4428 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa0>)
   d439e:	4628      	mov	r0, r5
   d43a0:	f001 fd71 	bl	d5e86 <_ZN6StringC1EPKc>
    name_ = new char[name.length() + 2];        // Make space for the name
   d43a4:	9804      	ldr	r0, [sp, #16]
  Sensor(String name, String units) {
   d43a6:	4b21      	ldr	r3, [pc, #132]	; (d442c <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa4>)
   d43a8:	6023      	str	r3, [r4, #0]
    name_ = new char[name.length() + 2];        // Make space for the name
   d43aa:	3002      	adds	r0, #2
   d43ac:	f7ff fe75 	bl	d409a <_Znaj>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d43b0:	9a04      	ldr	r2, [sp, #16]
   d43b2:	60a0      	str	r0, [r4, #8]
   d43b4:	4601      	mov	r1, r0
   d43b6:	2300      	movs	r3, #0
   d43b8:	3201      	adds	r2, #1
   d43ba:	a802      	add	r0, sp, #8
   d43bc:	f001 fd91 	bl	d5ee2 <_ZNK6String8getBytesEPhjj>
    name_[name.length() + 1] = 0;               // Add in Null Terminator
   d43c0:	9a04      	ldr	r2, [sp, #16]
   d43c2:	68a3      	ldr	r3, [r4, #8]
   d43c4:	4413      	add	r3, r2
   d43c6:	2600      	movs	r6, #0
   d43c8:	705e      	strb	r6, [r3, #1]
    units_ = new char[units.length() + 2];         // Make space for the name
   d43ca:	9808      	ldr	r0, [sp, #32]
   d43cc:	3002      	adds	r0, #2
   d43ce:	f7ff fe64 	bl	d409a <_Znaj>
   d43d2:	9a08      	ldr	r2, [sp, #32]
   d43d4:	60e0      	str	r0, [r4, #12]
   d43d6:	4601      	mov	r1, r0
   d43d8:	4633      	mov	r3, r6
   d43da:	3201      	adds	r2, #1
   d43dc:	4628      	mov	r0, r5
   d43de:	f001 fd80 	bl	d5ee2 <_ZNK6String8getBytesEPhjj>
    units_[units.length() + 1] = 0;                // Add in Null Terminator
   d43e2:	9b08      	ldr	r3, [sp, #32]
   d43e4:	68e2      	ldr	r2, [r4, #12]
   d43e6:	441a      	add	r2, r3
   d43e8:	4628      	mov	r0, r5
   d43ea:	7056      	strb	r6, [r2, #1]
   d43ec:	f001 fd00 	bl	d5df0 <_ZN6StringD1Ev>
   d43f0:	a802      	add	r0, sp, #8
   d43f2:	f001 fcfd 	bl	d5df0 <_ZN6StringD1Ev>
   d43f6:	4b0e      	ldr	r3, [pc, #56]	; (d4430 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa8>)
		sensor_ = new UltrasonicSensor(UltrasonicSensor::Analog, inputPin, enablePin);
   d43f8:	490e      	ldr	r1, [pc, #56]	; (d4434 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xac>)
		Sensor(name, String("cm"))
   d43fa:	6023      	str	r3, [r4, #0]
		sensor_ = new UltrasonicSensor(UltrasonicSensor::Analog, inputPin, enablePin);
   d43fc:	4628      	mov	r0, r5
   d43fe:	f001 fd42 	bl	d5e86 <_ZN6StringC1EPKc>
   d4402:	202c      	movs	r0, #44	; 0x2c
   d4404:	f7ff fe47 	bl	d4096 <_Znwj>
   d4408:	4606      	mov	r6, r0
   d440a:	b128      	cbz	r0, d4418 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0x90>
   d440c:	9500      	str	r5, [sp, #0]
   d440e:	4643      	mov	r3, r8
   d4410:	463a      	mov	r2, r7
   d4412:	2102      	movs	r1, #2
   d4414:	f7ff fe68 	bl	d40e8 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String>
   d4418:	6126      	str	r6, [r4, #16]
   d441a:	4628      	mov	r0, r5
   d441c:	f001 fce8 	bl	d5df0 <_ZN6StringD1Ev>
	}
   d4420:	4620      	mov	r0, r4
   d4422:	b00a      	add	sp, #40	; 0x28
   d4424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4428:	000d81f4 	.word	0x000d81f4
   d442c:	000d8374 	.word	0x000d8374
   d4430:	000d839c 	.word	0x000d839c
   d4434:	000d85dd 	.word	0x000d85dd

000d4438 <_Z11processTempv>:
    //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
  }


}
float processTemp() {
   d4438:	b530      	push	{r4, r5, lr}
   d443a:	ed2d 8b02 	vpush	{d8}
  // TEMP_INPUT_PIN
  const int anVolt = analogRead(TEMP_INPUT_PIN);
   d443e:	2011      	movs	r0, #17
float processTemp() {
   d4440:	b083      	sub	sp, #12
  const int anVolt = analogRead(TEMP_INPUT_PIN);
   d4442:	f002 ff41 	bl	d72c8 <analogRead>
   d4446:	4604      	mov	r4, r0
  double convert = 0.8056640625;
  float mV = anVolt * convert;
   d4448:	f003 f9ee 	bl	d7828 <__aeabi_i2d>
   d444c:	a336      	add	r3, pc, #216	; (adr r3, d4528 <_Z11processTempv+0xf0>)
   d444e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4452:	f003 fa53 	bl	d78fc <__aeabi_dmul>
   d4456:	f003 fd49 	bl	d7eec <__aeabi_d2f>
   d445a:	ee08 0a10 	vmov	s16, r0
  Serial.print("conv = ");
   d445e:	f002 fc7f 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4462:	4935      	ldr	r1, [pc, #212]	; (d4538 <_Z11processTempv+0x100>)
   d4464:	f001 fdca 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(convert);
   d4468:	f002 fc7a 	bl	d6d60 <_Z16_fetch_usbserialv>
   d446c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; d4528 <_Z11processTempv+0xf0>
   d4470:	2102      	movs	r1, #2
   d4472:	f001 fec7 	bl	d6204 <_ZN5Print7printlnEdi>
  Serial.print("anV = ");
   d4476:	f002 fc73 	bl	d6d60 <_Z16_fetch_usbserialv>
   d447a:	4930      	ldr	r1, [pc, #192]	; (d453c <_Z11processTempv+0x104>)
   d447c:	f001 fdbe 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(anVolt);
   d4480:	f002 fc6e 	bl	d6d60 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4484:	2c00      	cmp	r4, #0
   d4486:	4605      	mov	r5, r0
   d4488:	da4c      	bge.n	d4524 <_Z11processTempv+0xec>
            t = print('-');
   d448a:	212d      	movs	r1, #45	; 0x2d
   d448c:	f001 fdba 	bl	d6004 <_ZN5Print5printEc>
            val = -n;
   d4490:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4492:	220a      	movs	r2, #10
   d4494:	4628      	mov	r0, r5
   d4496:	f001 fdce 	bl	d6036 <_ZN5Print11printNumberEmh>
        n += println();
   d449a:	4628      	mov	r0, r5
   d449c:	f001 fdb5 	bl	d600a <_ZN5Print7printlnEv>
  Serial.print("mV = ");
   d44a0:	f002 fc5e 	bl	d6d60 <_Z16_fetch_usbserialv>
   d44a4:	4926      	ldr	r1, [pc, #152]	; (d4540 <_Z11processTempv+0x108>)
   d44a6:	f001 fda9 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(mV);
   d44aa:	f002 fc59 	bl	d6d60 <_Z16_fetch_usbserialv>
   d44ae:	eeb0 0a48 	vmov.f32	s0, s16
   d44b2:	2102      	movs	r1, #2
   d44b4:	f001 feb1 	bl	d621a <_ZN5Print7printlnEfi>
  // degree C
  float tc = ((mV - 500) / 10);
   d44b8:	eddf 7a22 	vldr	s15, [pc, #136]	; d4544 <_Z11processTempv+0x10c>
   d44bc:	ee38 8a67 	vsub.f32	s16, s16, s15
   d44c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d44c4:	eec8 8a27 	vdiv.f32	s17, s16, s15
  Serial.print("temp C = ");
   d44c8:	f002 fc4a 	bl	d6d60 <_Z16_fetch_usbserialv>
   d44cc:	491e      	ldr	r1, [pc, #120]	; (d4548 <_Z11processTempv+0x110>)
   d44ce:	f001 fd95 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(tc);
   d44d2:	f002 fc45 	bl	d6d60 <_Z16_fetch_usbserialv>
   d44d6:	2102      	movs	r1, #2
   d44d8:	eeb0 0a68 	vmov.f32	s0, s17
   d44dc:	f001 fe9d 	bl	d621a <_ZN5Print7printlnEfi>
  // degree F
  float tf = (tc * 1.8) + 32;
   d44e0:	ee18 0a90 	vmov	r0, s17
   d44e4:	f003 f9b2 	bl	d784c <__aeabi_f2d>
   d44e8:	a311      	add	r3, pc, #68	; (adr r3, d4530 <_Z11processTempv+0xf8>)
   d44ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44ee:	f003 fa05 	bl	d78fc <__aeabi_dmul>
   d44f2:	4b16      	ldr	r3, [pc, #88]	; (d454c <_Z11processTempv+0x114>)
   d44f4:	2200      	movs	r2, #0
   d44f6:	f003 f84b 	bl	d7590 <__adddf3>
   d44fa:	f003 fcf7 	bl	d7eec <__aeabi_d2f>
   d44fe:	9001      	str	r0, [sp, #4]
  Serial.print("temp f = ");
   d4500:	f002 fc2e 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4504:	4912      	ldr	r1, [pc, #72]	; (d4550 <_Z11processTempv+0x118>)
   d4506:	f001 fd79 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(tf);
   d450a:	f002 fc29 	bl	d6d60 <_Z16_fetch_usbserialv>
   d450e:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4512:	2102      	movs	r1, #2
   d4514:	f001 fe81 	bl	d621a <_ZN5Print7printlnEfi>
  return tf;
}
   d4518:	ed9d 0a01 	vldr	s0, [sp, #4]
   d451c:	b003      	add	sp, #12
   d451e:	ecbd 8b02 	vpop	{d8}
   d4522:	bd30      	pop	{r4, r5, pc}
            val = n;
   d4524:	4621      	mov	r1, r4
   d4526:	e7b4      	b.n	d4492 <_Z11processTempv+0x5a>
   d4528:	00000000 	.word	0x00000000
   d452c:	3fe9c800 	.word	0x3fe9c800
   d4530:	cccccccd 	.word	0xcccccccd
   d4534:	3ffccccc 	.word	0x3ffccccc
   d4538:	000d81f7 	.word	0x000d81f7
   d453c:	000d81ff 	.word	0x000d81ff
   d4540:	000d8206 	.word	0x000d8206
   d4544:	43fa0000 	.word	0x43fa0000
   d4548:	000d820c 	.word	0x000d820c
   d454c:	40400000 	.word	0x40400000
   d4550:	000d8216 	.word	0x000d8216
   d4554:	00000000 	.word	0x00000000

000d4558 <_Z17ProccessNewAnalogv>:
    return (inchesavg2);
  }
  return 0;
}

float ProccessNewAnalog() {
   d4558:	b510      	push	{r4, lr}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d455a:	2012      	movs	r0, #18
float ProccessNewAnalog() {
   d455c:	ed2d 8b02 	vpush	{d8}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d4560:	f002 feb2 	bl	d72c8 <analogRead>
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
   d4564:	2800      	cmp	r0, #0
   d4566:	bfb8      	it	lt
   d4568:	3003      	addlt	r0, #3
   d456a:	1080      	asrs	r0, r0, #2
  float inches = cm * 0.393701;
   d456c:	ee07 0a90 	vmov	s15, r0
   d4570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Serial.print("Analog In : ");
  Serial.println(inches);
  float cm2 = 0;
   d4574:	eddf 8a2a 	vldr	s17, [pc, #168]	; d4620 <_Z17ProccessNewAnalogv+0xc8>
  float inches = cm * 0.393701;
   d4578:	ee17 0a90 	vmov	r0, s15
   d457c:	f003 f966 	bl	d784c <__aeabi_f2d>
   d4580:	a325      	add	r3, pc, #148	; (adr r3, d4618 <_Z17ProccessNewAnalogv+0xc0>)
   d4582:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4586:	f003 f9b9 	bl	d78fc <__aeabi_dmul>
   d458a:	f003 fcaf 	bl	d7eec <__aeabi_d2f>
   d458e:	ee08 0a10 	vmov	s16, r0
  Serial.print("Analog In : ");
   d4592:	f002 fbe5 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4596:	4923      	ldr	r1, [pc, #140]	; (d4624 <_Z17ProccessNewAnalogv+0xcc>)
   d4598:	f001 fd30 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(inches);
   d459c:	f002 fbe0 	bl	d6d60 <_Z16_fetch_usbserialv>
   d45a0:	2102      	movs	r1, #2
   d45a2:	eeb0 0a48 	vmov.f32	s0, s16
   d45a6:	f001 fe38 	bl	d621a <_ZN5Print7printlnEfi>
   d45aa:	240a      	movs	r4, #10
  // lets do a 10 measurement avg
  for (int i = 0; i < 10; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d45ac:	2012      	movs	r0, #18
   d45ae:	f002 fe8b 	bl	d72c8 <analogRead>
   d45b2:	2800      	cmp	r0, #0
   d45b4:	bfb8      	it	lt
   d45b6:	3003      	addlt	r0, #3
   d45b8:	1080      	asrs	r0, r0, #2
   d45ba:	ee07 0a90 	vmov	s15, r0
   d45be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // wait one second and take another reading
    delay(100);
   d45c2:	2064      	movs	r0, #100	; 0x64
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d45c4:	ee78 8aa7 	vadd.f32	s17, s17, s15
    delay(100);
   d45c8:	f001 fef6 	bl	d63b8 <delay>
  for (int i = 0; i < 10; i++) {
   d45cc:	3c01      	subs	r4, #1
   d45ce:	d1ed      	bne.n	d45ac <_Z17ProccessNewAnalogv+0x54>
  }

  // average our reading
  float cmavg = cm2 / 10;
  float inchesavg = cmavg * 0.393701;
  Serial.print("Analog In avgd: ");
   d45d0:	f002 fbc6 	bl	d6d60 <_Z16_fetch_usbserialv>
   d45d4:	4914      	ldr	r1, [pc, #80]	; (d4628 <_Z17ProccessNewAnalogv+0xd0>)
   d45d6:	f001 fd11 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(inchesavg);
   d45da:	f002 fbc1 	bl	d6d60 <_Z16_fetch_usbserialv>
  float inchesavg = cmavg * 0.393701;
   d45de:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d45e2:	eec8 7aa7 	vdiv.f32	s15, s17, s15
  Serial.println(inchesavg);
   d45e6:	4604      	mov	r4, r0
  float inchesavg = cmavg * 0.393701;
   d45e8:	ee17 0a90 	vmov	r0, s15
   d45ec:	f003 f92e 	bl	d784c <__aeabi_f2d>
   d45f0:	a309      	add	r3, pc, #36	; (adr r3, d4618 <_Z17ProccessNewAnalogv+0xc0>)
   d45f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45f6:	f003 f981 	bl	d78fc <__aeabi_dmul>
   d45fa:	f003 fc77 	bl	d7eec <__aeabi_d2f>
  Serial.println(inchesavg);
   d45fe:	2102      	movs	r1, #2
   d4600:	ee00 0a10 	vmov	s0, r0
   d4604:	4620      	mov	r0, r4
   d4606:	f001 fe08 	bl	d621a <_ZN5Print7printlnEfi>
  return (inches);
}
   d460a:	eeb0 0a48 	vmov.f32	s0, s16
   d460e:	ecbd 8b02 	vpop	{d8}
   d4612:	bd10      	pop	{r4, pc}
   d4614:	f3af 8000 	nop.w
   d4618:	add9c27f 	.word	0xadd9c27f
   d461c:	3fd93265 	.word	0x3fd93265
   d4620:	00000000 	.word	0x00000000
   d4624:	000d8220 	.word	0x000d8220
   d4628:	000d822d 	.word	0x000d822d
   d462c:	00000000 	.word	0x00000000

000d4630 <_Z20ProccessNewAnalogAvgv>:

float ProccessNewAnalogAvg() {
   d4630:	b530      	push	{r4, r5, lr}
   d4632:	ed2d 8b02 	vpush	{d8}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d4636:	2012      	movs	r0, #18
float ProccessNewAnalogAvg() {
   d4638:	b083      	sub	sp, #12
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d463a:	f002 fe45 	bl	d72c8 <analogRead>
   d463e:	4604      	mov	r4, r0
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
  float inches = cm * 0.393701;
  Serial.print("Analog In : ");
   d4640:	f002 fb8e 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4644:	492c      	ldr	r1, [pc, #176]	; (d46f8 <_Z20ProccessNewAnalogAvgv+0xc8>)
  Serial.println(inches);
  float cm2 = 0;
   d4646:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d46fc <_Z20ProccessNewAnalogAvgv+0xcc>
  Serial.print("Analog In : ");
   d464a:	f001 fcd7 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(inches);
   d464e:	f002 fb87 	bl	d6d60 <_Z16_fetch_usbserialv>
  float cm = anVolt / 4;
   d4652:	1e23      	subs	r3, r4, #0
   d4654:	bfb8      	it	lt
   d4656:	3303      	addlt	r3, #3
  Serial.println(inches);
   d4658:	4605      	mov	r5, r0
  float cm = anVolt / 4;
   d465a:	1098      	asrs	r0, r3, #2
  float inches = cm * 0.393701;
   d465c:	ee07 0a90 	vmov	s15, r0
   d4660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Serial.println(inches);
   d4664:	2414      	movs	r4, #20
  float inches = cm * 0.393701;
   d4666:	ee17 0a90 	vmov	r0, s15
   d466a:	f003 f8ef 	bl	d784c <__aeabi_f2d>
   d466e:	a320      	add	r3, pc, #128	; (adr r3, d46f0 <_Z20ProccessNewAnalogAvgv+0xc0>)
   d4670:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4674:	f003 f942 	bl	d78fc <__aeabi_dmul>
   d4678:	f003 fc38 	bl	d7eec <__aeabi_d2f>
  Serial.println(inches);
   d467c:	2102      	movs	r1, #2
   d467e:	ee00 0a10 	vmov	s0, r0
   d4682:	4628      	mov	r0, r5
   d4684:	f001 fdc9 	bl	d621a <_ZN5Print7printlnEfi>
  // lets do a 10 measurement avg
  for (int i = 0; i < samples; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d4688:	2012      	movs	r0, #18
   d468a:	f002 fe1d 	bl	d72c8 <analogRead>
   d468e:	2800      	cmp	r0, #0
   d4690:	bfb8      	it	lt
   d4692:	3003      	addlt	r0, #3
   d4694:	1080      	asrs	r0, r0, #2
   d4696:	ee07 0a90 	vmov	s15, r0
   d469a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // wait one second and take another reading
    delay(100);
   d469e:	2064      	movs	r0, #100	; 0x64
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d46a0:	ee38 8a27 	vadd.f32	s16, s16, s15
    delay(100);
   d46a4:	f001 fe88 	bl	d63b8 <delay>
  for (int i = 0; i < samples; i++) {
   d46a8:	3c01      	subs	r4, #1
   d46aa:	d1ed      	bne.n	d4688 <_Z20ProccessNewAnalogAvgv+0x58>
  }

  // average our reading
  float cmavg = cm2 / samples;
  float inchesavg = cmavg * 0.393701;
   d46ac:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d46b0:	eec8 7a27 	vdiv.f32	s15, s16, s15
   d46b4:	ee17 0a90 	vmov	r0, s15
   d46b8:	f003 f8c8 	bl	d784c <__aeabi_f2d>
   d46bc:	a30c      	add	r3, pc, #48	; (adr r3, d46f0 <_Z20ProccessNewAnalogAvgv+0xc0>)
   d46be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c2:	f003 f91b 	bl	d78fc <__aeabi_dmul>
   d46c6:	f003 fc11 	bl	d7eec <__aeabi_d2f>
   d46ca:	9001      	str	r0, [sp, #4]
  Serial.print("Analog In avgd: ");
   d46cc:	f002 fb48 	bl	d6d60 <_Z16_fetch_usbserialv>
   d46d0:	490b      	ldr	r1, [pc, #44]	; (d4700 <_Z20ProccessNewAnalogAvgv+0xd0>)
   d46d2:	f001 fc93 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println(inchesavg);
   d46d6:	f002 fb43 	bl	d6d60 <_Z16_fetch_usbserialv>
   d46da:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46de:	2102      	movs	r1, #2
   d46e0:	f001 fd9b 	bl	d621a <_ZN5Print7printlnEfi>
  return (inchesavg);
}
   d46e4:	ed9d 0a01 	vldr	s0, [sp, #4]
   d46e8:	b003      	add	sp, #12
   d46ea:	ecbd 8b02 	vpop	{d8}
   d46ee:	bd30      	pop	{r4, r5, pc}
   d46f0:	add9c27f 	.word	0xadd9c27f
   d46f4:	3fd93265 	.word	0x3fd93265
   d46f8:	000d8220 	.word	0x000d8220
   d46fc:	00000000 	.word	0x00000000
   d4700:	000d822d 	.word	0x000d822d
   d4704:	00000000 	.word	0x00000000

000d4708 <_Z13ProcessSerialv>:

float ProcessSerial() {
   d4708:	b570      	push	{r4, r5, r6, lr}
   d470a:	ed2d 8b02 	vpush	{d8}
  static uint32_t msTimeout = 0; // timestamp of recently found R
                                 // persists between calls of function
  float distanceToWaterMM = 0;
  while (Serial1.available()) {
    if ('R' == Serial1.peek()) {
      if (!msTimeout) {
   d470e:	4c38      	ldr	r4, [pc, #224]	; (d47f0 <_Z13ProcessSerialv+0xe8>)
  float distanceToWaterMM = 0;
   d4710:	ed9f 8a38 	vldr	s16, [pc, #224]	; d47f4 <_Z13ProcessSerialv+0xec>
float ProcessSerial() {
   d4714:	b082      	sub	sp, #8
        Serial1.readBytes(buf, 6);            // read the packet
        distanceToWaterMM = atoi(&buf[1]);    // convert string following the R to integer
        msTimeout = 0;                        // prepare for next incoming R
      } else if (millis() - msTimeout > 50) { // current R is outdated
        Serial1.read();                       // flush R and move on
        msTimeout = 0;                        // prepare for next incoming R
   d4716:	2500      	movs	r5, #0
  while (Serial1.available()) {
   d4718:	f002 fbf4 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d471c:	6803      	ldr	r3, [r0, #0]
   d471e:	691b      	ldr	r3, [r3, #16]
   d4720:	4798      	blx	r3
   d4722:	2800      	cmp	r0, #0
   d4724:	d037      	beq.n	d4796 <_Z13ProcessSerialv+0x8e>
    if ('R' == Serial1.peek()) {
   d4726:	f002 fbed 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d472a:	6803      	ldr	r3, [r0, #0]
   d472c:	699b      	ldr	r3, [r3, #24]
   d472e:	4798      	blx	r3
   d4730:	2852      	cmp	r0, #82	; 0x52
   d4732:	d12a      	bne.n	d478a <_Z13ProcessSerialv+0x82>
      if (!msTimeout) {
   d4734:	6823      	ldr	r3, [r4, #0]
   d4736:	b913      	cbnz	r3, d473e <_Z13ProcessSerialv+0x36>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4738:	f000 fe74 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
        msTimeout = millis(); // when new R found - store timestamp
   d473c:	6020      	str	r0, [r4, #0]
      if (Serial1.available() >= 5) { // already received a complete packet?
   d473e:	f002 fbe1 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d4742:	6803      	ldr	r3, [r0, #0]
   d4744:	691b      	ldr	r3, [r3, #16]
   d4746:	4798      	blx	r3
   d4748:	2804      	cmp	r0, #4
   d474a:	dd12      	ble.n	d4772 <_Z13ProcessSerialv+0x6a>
        memset(buf, 0x00,
   d474c:	9500      	str	r5, [sp, #0]
   d474e:	f8cd 5003 	str.w	r5, [sp, #3]
        Serial1.readBytes(buf, 6);            // read the packet
   d4752:	f002 fbd7 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d4756:	2206      	movs	r2, #6
   d4758:	4669      	mov	r1, sp
   d475a:	f001 fd82 	bl	d6262 <_ZN6Stream9readBytesEPcj>
        distanceToWaterMM = atoi(&buf[1]);    // convert string following the R to integer
   d475e:	f10d 0001 	add.w	r0, sp, #1
   d4762:	f003 fc13 	bl	d7f8c <atoi>
   d4766:	ee07 0a90 	vmov	s15, r0
   d476a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        msTimeout = 0;                        // prepare for next incoming R
   d476e:	6025      	str	r5, [r4, #0]
   d4770:	e7d2      	b.n	d4718 <_Z13ProcessSerialv+0x10>
   d4772:	f000 fe57 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
      } else if (millis() - msTimeout > 50) { // current R is outdated
   d4776:	6823      	ldr	r3, [r4, #0]
   d4778:	1ac0      	subs	r0, r0, r3
   d477a:	2832      	cmp	r0, #50	; 0x32
   d477c:	d9cc      	bls.n	d4718 <_Z13ProcessSerialv+0x10>
        Serial1.read();                       // flush R and move on
   d477e:	f002 fbc1 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d4782:	6803      	ldr	r3, [r0, #0]
   d4784:	695b      	ldr	r3, [r3, #20]
   d4786:	4798      	blx	r3
   d4788:	e7f1      	b.n	d476e <_Z13ProcessSerialv+0x66>
      }
    } else {
      Serial1.read();
   d478a:	f002 fbbb 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d478e:	6803      	ldr	r3, [r0, #0]
   d4790:	695b      	ldr	r3, [r3, #20]
   d4792:	4798      	blx	r3
   d4794:	e7c0      	b.n	d4718 <_Z13ProcessSerialv+0x10>
      // Serial1.read(); // flush "orphaned" bytes
    }
  }
  Serial.print("Serial Output : ");
   d4796:	f002 fae3 	bl	d6d60 <_Z16_fetch_usbserialv>
   d479a:	4917      	ldr	r1, [pc, #92]	; (d47f8 <_Z13ProcessSerialv+0xf0>)
   d479c:	f001 fc2e 	bl	d5ffc <_ZN5Print5printEPKc>
  Serial.println((distanceToWaterMM * 0.393701) / 10);
   d47a0:	f002 fade 	bl	d6d60 <_Z16_fetch_usbserialv>
   d47a4:	4606      	mov	r6, r0
   d47a6:	ee18 0a10 	vmov	r0, s16
   d47aa:	f003 f84f 	bl	d784c <__aeabi_f2d>
   d47ae:	a30e      	add	r3, pc, #56	; (adr r3, d47e8 <_Z13ProcessSerialv+0xe0>)
   d47b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47b4:	f003 f8a2 	bl	d78fc <__aeabi_dmul>
   d47b8:	4b10      	ldr	r3, [pc, #64]	; (d47fc <_Z13ProcessSerialv+0xf4>)
   d47ba:	2200      	movs	r2, #0
   d47bc:	f003 f9c8 	bl	d7b50 <__aeabi_ddiv>
   d47c0:	4604      	mov	r4, r0
   d47c2:	460d      	mov	r5, r1
   d47c4:	ec45 4b10 	vmov	d0, r4, r5
   d47c8:	2102      	movs	r1, #2
   d47ca:	4630      	mov	r0, r6
   d47cc:	f001 fd1a 	bl	d6204 <_ZN5Print7printlnEdi>
  return ((distanceToWaterMM * 0.393701) / 10);
   d47d0:	4620      	mov	r0, r4
   d47d2:	4629      	mov	r1, r5
   d47d4:	f003 fb8a 	bl	d7eec <__aeabi_d2f>
}
   d47d8:	ee00 0a10 	vmov	s0, r0
   d47dc:	b002      	add	sp, #8
   d47de:	ecbd 8b02 	vpop	{d8}
   d47e2:	bd70      	pop	{r4, r5, r6, pc}
   d47e4:	f3af 8000 	nop.w
   d47e8:	add9c27f 	.word	0xadd9c27f
   d47ec:	3fd93265 	.word	0x3fd93265
   d47f0:	2003e4b0 	.word	0x2003e4b0
   d47f4:	00000000 	.word	0x00000000
   d47f8:	000d823e 	.word	0x000d823e
   d47fc:	40240000 	.word	0x40240000

000d4800 <_Z26calculateSleepCycleSecondsv>:
  return Particle.publish(unitName, msg,WITH_ACK); // Added this code on 06/17/21 - AJK
}

// retuns the number of seconds to sleep on the 15th minute schedual
// this is only going to trigger on successfully communicated network
long calculateSleepCycleSeconds() {
   d4800:	b538      	push	{r3, r4, r5, lr}
  //   // figure out somthing to do if this gets wonky
  // }

  // // on return convert it to seconds
  // return (mins * 60) + secs;
  long secNow = Time.now();
   d4802:	f001 fda7 	bl	d6354 <_ZN9TimeClass3nowEv>

  long secInPeriod = secNow % PERIOD;
   d4806:	f44f 7443 	mov.w	r4, #780	; 0x30c
   d480a:	fb90 f1f4 	sdiv	r1, r0, r4
   d480e:	fb01 0414 	mls	r4, r1, r4, r0

  long secTillNextPeriod = PERIOD - secInPeriod;
  Serial.println(secTillNextPeriod);
   d4812:	f002 faa5 	bl	d6d60 <_Z16_fetch_usbserialv>
  long secTillNextPeriod = PERIOD - secInPeriod;
   d4816:	f5c4 7443 	rsb	r4, r4, #780	; 0x30c
  Serial.println(secTillNextPeriod);
   d481a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
   d481c:	220a      	movs	r2, #10
   d481e:	4621      	mov	r1, r4
   d4820:	f001 fc09 	bl	d6036 <_ZN5Print11printNumberEmh>
        n += println();
   d4824:	4628      	mov	r0, r5
   d4826:	f001 fbf0 	bl	d600a <_ZN5Print7printlnEv>
  return secTillNextPeriod;
  

} // end function
   d482a:	4620      	mov	r0, r4
   d482c:	bd38      	pop	{r3, r4, r5, pc}

000d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d482e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4830:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4832:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4834:	b17c      	cbz	r4, d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4836:	6863      	ldr	r3, [r4, #4]
   d4838:	3b01      	subs	r3, #1
   d483a:	6063      	str	r3, [r4, #4]
   d483c:	b95b      	cbnz	r3, d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d483e:	6823      	ldr	r3, [r4, #0]
   d4840:	4620      	mov	r0, r4
   d4842:	689b      	ldr	r3, [r3, #8]
   d4844:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4846:	68a3      	ldr	r3, [r4, #8]
   d4848:	3b01      	subs	r3, #1
   d484a:	60a3      	str	r3, [r4, #8]
   d484c:	b91b      	cbnz	r3, d4856 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d484e:	6823      	ldr	r3, [r4, #0]
   d4850:	4620      	mov	r0, r4
   d4852:	68db      	ldr	r3, [r3, #12]
   d4854:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4856:	4628      	mov	r0, r5
   d4858:	bd38      	pop	{r3, r4, r5, pc}
	...

000d485c <_Z19allReadingsToServerffffff>:
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float serialValue, float temp) {
   d485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                              oldAvg, newAnalog, newAnalogAvg, temp, fuelGauge.getSoC());
   d4860:	4830      	ldr	r0, [pc, #192]	; (d4924 <_Z19allReadingsToServerffffff+0xc8>)
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float serialValue, float temp) {
   d4862:	b090      	sub	sp, #64	; 0x40
   d4864:	ee10 4a90 	vmov	r4, s1
   d4868:	ee11 8a10 	vmov	r8, s2
   d486c:	ee11 5a90 	vmov	r5, s3
   d4870:	ee12 6a90 	vmov	r6, s5
                              oldAvg, newAnalog, newAnalogAvg, temp, fuelGauge.getSoC());
   d4874:	f001 fe34 	bl	d64e0 <_ZN9FuelGauge6getSoCEv>
   d4878:	4640      	mov	r0, r8
   d487a:	ee10 7a10 	vmov	r7, s0
   d487e:	f002 ffe5 	bl	d784c <__aeabi_f2d>
   d4882:	4602      	mov	r2, r0
   d4884:	460b      	mov	r3, r1
   d4886:	4638      	mov	r0, r7
   d4888:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d488c:	f002 ffde 	bl	d784c <__aeabi_f2d>
   d4890:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4894:	4630      	mov	r0, r6
   d4896:	f002 ffd9 	bl	d784c <__aeabi_f2d>
   d489a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d489e:	4628      	mov	r0, r5
   d48a0:	f002 ffd4 	bl	d784c <__aeabi_f2d>
   d48a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48a8:	4620      	mov	r0, r4
   d48aa:	f002 ffcf 	bl	d784c <__aeabi_f2d>
   d48ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d48b2:	e9cd 0100 	strd	r0, r1, [sp]
   d48b6:	491c      	ldr	r1, [pc, #112]	; (d4928 <_Z19allReadingsToServerffffff+0xcc>)
   d48b8:	a80c      	add	r0, sp, #48	; 0x30
   d48ba:	f001 fb2b 	bl	d5f14 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d48be:	4b1b      	ldr	r3, [pc, #108]	; (d492c <_Z19allReadingsToServerffffff+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d48c0:	491b      	ldr	r1, [pc, #108]	; (d4930 <_Z19allReadingsToServerffffff+0xd4>)
   d48c2:	781b      	ldrb	r3, [r3, #0]
   d48c4:	f88d 3000 	strb.w	r3, [sp]
   d48c8:	a80a      	add	r0, sp, #40	; 0x28
   d48ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d48cc:	6809      	ldr	r1, [r1, #0]
   d48ce:	233c      	movs	r3, #60	; 0x3c
   d48d0:	f002 f802 	bl	d68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d48d4:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d48d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d48d8:	f000 fefc 	bl	d56d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d48dc:	b120      	cbz	r0, d48e8 <_Z19allReadingsToServerffffff+0x8c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d48de:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d48e0:	b913      	cbnz	r3, d48e8 <_Z19allReadingsToServerffffff+0x8c>
        spark_process();
   d48e2:	f000 ff8d 	bl	d5800 <spark_process>
    }
   d48e6:	e7fa      	b.n	d48de <_Z19allReadingsToServerffffff+0x82>
   d48e8:	7863      	ldrb	r3, [r4, #1]
   d48ea:	f3bf 8f5b 	dmb	ish
   d48ee:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d48f0:	b953      	cbnz	r3, d4908 <_Z19allReadingsToServerffffff+0xac>
        return std::move(defaultValue);
   d48f2:	2400      	movs	r4, #0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d48f4:	a80b      	add	r0, sp, #44	; 0x2c
   d48f6:	f7ff ff9a 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48fa:	a80c      	add	r0, sp, #48	; 0x30
   d48fc:	f001 fa78 	bl	d5df0 <_ZN6StringD1Ev>
}
   d4900:	4620      	mov	r0, r4
   d4902:	b010      	add	sp, #64	; 0x40
   d4904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return (application_thread_current(nullptr) != 0);
   d4908:	2000      	movs	r0, #0
   d490a:	f000 fee3 	bl	d56d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d490e:	b120      	cbz	r0, d491a <_Z19allReadingsToServerffffff+0xbe>
   d4910:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d4912:	b913      	cbnz	r3, d491a <_Z19allReadingsToServerffffff+0xbe>
        spark_process();
   d4914:	f000 ff74 	bl	d5800 <spark_process>
    }
   d4918:	e7fa      	b.n	d4910 <_Z19allReadingsToServerffffff+0xb4>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d491a:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d491c:	2b01      	cmp	r3, #1
   d491e:	d1e8      	bne.n	d48f2 <_Z19allReadingsToServerffffff+0x96>
            return result_;
   d4920:	7b24      	ldrb	r4, [r4, #12]
   d4922:	e7e7      	b.n	d48f4 <_Z19allReadingsToServerffffff+0x98>
   d4924:	2003e4cc 	.word	0x2003e4cc
   d4928:	000d824f 	.word	0x000d824f
   d492c:	2003e4a1 	.word	0x2003e4a1
   d4930:	2003e5b8 	.word	0x2003e5b8

000d4934 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4938:	e9d0 8a00 	ldrd	r8, sl, [r0]
   d493c:	460f      	mov	r7, r1

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d493e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
   d4942:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4944:	ebaa 0208 	sub.w	r2, sl, r8
	if (max_size() - size() < __n)
   d4948:	ebb3 1f22 	cmp.w	r3, r2, asr #4
   d494c:	4681      	mov	r9, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d494e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
   d4952:	d102      	bne.n	d495a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d4954:	482b      	ldr	r0, [pc, #172]	; (d4a04 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
   d4956:	f002 fd5f 	bl	d7418 <_ZSt20__throw_length_errorPKc>
   d495a:	2c01      	cmp	r4, #1
   d495c:	4622      	mov	r2, r4
   d495e:	bf38      	it	cc
   d4960:	2201      	movcc	r2, #1
   d4962:	18a4      	adds	r4, r4, r2
   d4964:	eba7 0608 	sub.w	r6, r7, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4968:	d24a      	bcs.n	d4a00 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d496a:	b14c      	cbz	r4, d4980 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4c>
   d496c:	429c      	cmp	r4, r3
   d496e:	bf28      	it	cs
   d4970:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4972:	0120      	lsls	r0, r4, #4
   d4974:	9101      	str	r1, [sp, #4]
   d4976:	f7ff fb8e 	bl	d4096 <_Znwj>
   d497a:	9901      	ldr	r1, [sp, #4]
   d497c:	4605      	mov	r5, r0
   d497e:	e000      	b.n	d4982 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d4980:	4625      	mov	r5, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4982:	19a8      	adds	r0, r5, r6
   d4984:	d001      	beq.n	d498a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
   d4986:	f001 faa1 	bl	d5ecc <_ZN6StringC1ERKS_>
   d498a:	46ab      	mov	fp, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d498c:	4646      	mov	r6, r8
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d498e:	42b7      	cmp	r7, r6
   d4990:	d00a      	beq.n	d49a8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d4992:	f1bb 0f00 	cmp.w	fp, #0
   d4996:	d003      	beq.n	d49a0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
   d4998:	4631      	mov	r1, r6
   d499a:	4658      	mov	r0, fp
   d499c:	f001 fa96 	bl	d5ecc <_ZN6StringC1ERKS_>
   d49a0:	3610      	adds	r6, #16
   d49a2:	f10b 0b10 	add.w	fp, fp, #16
   d49a6:	e7f2      	b.n	d498e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d49a8:	eba6 0708 	sub.w	r7, r6, r8
   d49ac:	3710      	adds	r7, #16
   d49ae:	442f      	add	r7, r5
	  _ForwardIterator __cur = __result;
   d49b0:	463b      	mov	r3, r7
   d49b2:	46b3      	mov	fp, r6
	      for (; __first != __last; ++__first, (void)++__cur)
   d49b4:	45d3      	cmp	fp, sl
   d49b6:	d10a      	bne.n	d49ce <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
   d49b8:	ebaa 0606 	sub.w	r6, sl, r6
   d49bc:	4437      	add	r7, r6
   d49be:	4646      	mov	r6, r8
	  for (; __first != __last; ++__first)
   d49c0:	4556      	cmp	r6, sl
   d49c2:	d00e      	beq.n	d49e2 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
    { __pointer->~_Tp(); }
   d49c4:	4630      	mov	r0, r6
   d49c6:	f001 fa13 	bl	d5df0 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
   d49ca:	3610      	adds	r6, #16
   d49cc:	e7f8      	b.n	d49c0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d49ce:	4659      	mov	r1, fp
   d49d0:	4618      	mov	r0, r3
   d49d2:	9301      	str	r3, [sp, #4]
   d49d4:	f001 fa7a 	bl	d5ecc <_ZN6StringC1ERKS_>
   d49d8:	9b01      	ldr	r3, [sp, #4]
   d49da:	f10b 0b10 	add.w	fp, fp, #16
   d49de:	3310      	adds	r3, #16
   d49e0:	e7e8      	b.n	d49b4 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	if (__p)
   d49e2:	f1b8 0f00 	cmp.w	r8, #0
   d49e6:	d002      	beq.n	d49ee <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xba>
	::operator delete(__p);
   d49e8:	4640      	mov	r0, r8
   d49ea:	f7ff fb58 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d49ee:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   d49f2:	e9c9 5700 	strd	r5, r7, [r9]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d49f6:	f8c9 4008 	str.w	r4, [r9, #8]
    }
   d49fa:	b003      	add	sp, #12
   d49fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4a00:	461c      	mov	r4, r3
   d4a02:	e7b6      	b.n	d4972 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d4a04:	000d82e0 	.word	0x000d82e0

000d4a08 <_ZN9Buffering18RegisterSensorNameE6String>:
// so it can have an Id assigned to it. Do not register the same name twice.
// This could be called automatically if a name is unregistered in NameToId, but
// calling
// it separately enforces more effectively that the ordering must be the same
// after a reset.
void RegisterSensorName(String name) { SensorNames.push_back(name); }
   d4a08:	b538      	push	{r3, r4, r5, lr}
   d4a0a:	4602      	mov	r2, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4a0c:	4809      	ldr	r0, [pc, #36]	; (d4a34 <_ZN9Buffering18RegisterSensorNameE6String+0x2c>)
   d4a0e:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
   d4a12:	428c      	cmp	r4, r1
   d4a14:	4605      	mov	r5, r0
   d4a16:	d008      	beq.n	d4a2a <_ZN9Buffering18RegisterSensorNameE6String+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4a18:	b11c      	cbz	r4, d4a22 <_ZN9Buffering18RegisterSensorNameE6String+0x1a>
   d4a1a:	4611      	mov	r1, r2
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f001 fa55 	bl	d5ecc <_ZN6StringC1ERKS_>
	    ++this->_M_impl._M_finish;
   d4a22:	686b      	ldr	r3, [r5, #4]
   d4a24:	3310      	adds	r3, #16
   d4a26:	606b      	str	r3, [r5, #4]
   d4a28:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d4a2a:	4621      	mov	r1, r4
   d4a2c:	f7ff ff82 	bl	d4934 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d4a30:	e7fa      	b.n	d4a28 <_ZN9Buffering18RegisterSensorNameE6String+0x20>
   d4a32:	bf00      	nop
   d4a34:	2003e4a4 	.word	0x2003e4a4

000d4a38 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   d4a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a3c:	e9d0 8700 	ldrd	r8, r7, [r0]
   d4a40:	eba7 0408 	sub.w	r4, r7, r8
   d4a44:	10a3      	asrs	r3, r4, #2
   d4a46:	4c24      	ldr	r4, [pc, #144]	; (d4ad8 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>)
   d4a48:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
   d4a4a:	4b24      	ldr	r3, [pc, #144]	; (d4adc <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   d4a4c:	429c      	cmp	r4, r3
   d4a4e:	4606      	mov	r6, r0
   d4a50:	4689      	mov	r9, r1
   d4a52:	4693      	mov	fp, r2
   d4a54:	d102      	bne.n	d4a5c <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   d4a56:	4822      	ldr	r0, [pc, #136]	; (d4ae0 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
   d4a58:	f002 fcde 	bl	d7418 <_ZSt20__throw_length_errorPKc>
   d4a5c:	2c01      	cmp	r4, #1
   d4a5e:	4622      	mov	r2, r4
   d4a60:	bf38      	it	cc
   d4a62:	2201      	movcc	r2, #1
   d4a64:	18a4      	adds	r4, r4, r2
   d4a66:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4a6a:	d232      	bcs.n	d4ad2 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4a6c:	b144      	cbz	r4, d4a80 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
   d4a6e:	429c      	cmp	r4, r3
   d4a70:	bf28      	it	cs
   d4a72:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4a74:	200c      	movs	r0, #12
   d4a76:	4360      	muls	r0, r4
   d4a78:	f7ff fb0d 	bl	d4096 <_Znwj>
   d4a7c:	4682      	mov	sl, r0
   d4a7e:	e000      	b.n	d4a82 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
   d4a80:	46a2      	mov	sl, r4
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4a82:	eb1a 0305 	adds.w	r3, sl, r5
   d4a86:	bf1c      	itt	ne
   d4a88:	e89b 0007 	ldmiane.w	fp, {r0, r1, r2}
   d4a8c:	e883 0007 	stmiane.w	r3, {r0, r1, r2}
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   d4a90:	2d00      	cmp	r5, #0
   d4a92:	dd04      	ble.n	d4a9e <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   d4a94:	462a      	mov	r2, r5
   d4a96:	4641      	mov	r1, r8
   d4a98:	4650      	mov	r0, sl
   d4a9a:	f003 fa97 	bl	d7fcc <memmove>
      ptrdiff_t __count = __last - __first;
   d4a9e:	eba7 0709 	sub.w	r7, r7, r9
	      ++__new_finish;
   d4aa2:	350c      	adds	r5, #12
      if (__count > 0)
   d4aa4:	2f00      	cmp	r7, #0
   d4aa6:	4455      	add	r5, sl
   d4aa8:	dd04      	ble.n	d4ab4 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   d4aaa:	463a      	mov	r2, r7
   d4aac:	4649      	mov	r1, r9
   d4aae:	4628      	mov	r0, r5
   d4ab0:	f003 fa7e 	bl	d7fb0 <memcpy>
      return __result + __count;
   d4ab4:	443d      	add	r5, r7
	if (__p)
   d4ab6:	f1b8 0f00 	cmp.w	r8, #0
   d4aba:	d002      	beq.n	d4ac2 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
	::operator delete(__p);
   d4abc:	4640      	mov	r0, r8
   d4abe:	f7ff faee 	bl	d409e <_ZdlPv>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4ac2:	200c      	movs	r0, #12
   d4ac4:	fb00 a404 	mla	r4, r0, r4, sl
      this->_M_impl._M_finish = __new_finish;
   d4ac8:	e9c6 a500 	strd	sl, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d4acc:	60b4      	str	r4, [r6, #8]
    }
   d4ace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4ad2:	461c      	mov	r4, r3
   d4ad4:	e7ce      	b.n	d4a74 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
   d4ad6:	bf00      	nop
   d4ad8:	aaaaaaab 	.word	0xaaaaaaab
   d4adc:	0aaaaaaa 	.word	0x0aaaaaaa
   d4ae0:	000d82e0 	.word	0x000d82e0

000d4ae4 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
   d4ae4:	b508      	push	{r3, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4ae6:	e9d0 3200 	ldrd	r3, r2, [r0]
   d4aea:	1ad2      	subs	r2, r2, r3
   d4aec:	4b04      	ldr	r3, [pc, #16]	; (d4b00 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x1c>)
   d4aee:	1092      	asrs	r2, r2, #2
   d4af0:	435a      	muls	r2, r3
	if (__n >= this->size())
   d4af2:	4291      	cmp	r1, r2
   d4af4:	d302      	bcc.n	d4afc <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   d4af6:	4803      	ldr	r0, [pc, #12]	; (d4b04 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x20>)
   d4af8:	f002 fc91 	bl	d741e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   d4afc:	bd08      	pop	{r3, pc}
   d4afe:	bf00      	nop
   d4b00:	aaaaaaab 	.word	0xaaaaaaab
   d4b04:	000d8296 	.word	0x000d8296

000d4b08 <_Z19ProcessOldAnalogAvgv>:
float ProcessOldAnalogAvg() {
   d4b08:	b570      	push	{r4, r5, r6, lr}
   d4b0a:	ed2d 8b02 	vpush	{d8}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4b0e:	4830      	ldr	r0, [pc, #192]	; (d4bd0 <_Z19ProcessOldAnalogAvgv+0xc8>)
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4b10:	e9d0 4300 	ldrd	r4, r3, [r0]
   d4b14:	429c      	cmp	r4, r3
   d4b16:	d053      	beq.n	d4bc0 <_Z19ProcessOldAnalogAvgv+0xb8>
	_M_range_check(__n);
   d4b18:	2100      	movs	r1, #0
   d4b1a:	f7ff ffe3 	bl	d4ae4 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    SensorConfig sc = sensors.at(i);
   d4b1e:	6824      	ldr	r4, [r4, #0]
    float data2 = 0;
   d4b20:	ed9f 8a2c 	vldr	s16, [pc, #176]	; d4bd4 <_Z19ProcessOldAnalogAvgv+0xcc>
    time_t startTime = Time.now();
   d4b24:	f001 fc16 	bl	d6354 <_ZN9TimeClass3nowEv>
    float sensorOutput = s->GetSample() * 0.393701;
   d4b28:	6823      	ldr	r3, [r4, #0]
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	4798      	blx	r3
   d4b30:	ee10 6a10 	vmov	r6, s0
    Serial.print("data = ");
   d4b34:	f002 f914 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4b38:	4927      	ldr	r1, [pc, #156]	; (d4bd8 <_Z19ProcessOldAnalogAvgv+0xd0>)
   d4b3a:	f001 fa5f 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.println(sensorOutput);
   d4b3e:	f002 f90f 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4b42:	4605      	mov	r5, r0
    float sensorOutput = s->GetSample() * 0.393701;
   d4b44:	4630      	mov	r0, r6
   d4b46:	f002 fe81 	bl	d784c <__aeabi_f2d>
   d4b4a:	a31f      	add	r3, pc, #124	; (adr r3, d4bc8 <_Z19ProcessOldAnalogAvgv+0xc0>)
   d4b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b50:	f002 fed4 	bl	d78fc <__aeabi_dmul>
   d4b54:	f003 f9ca 	bl	d7eec <__aeabi_d2f>
    Serial.println(sensorOutput);
   d4b58:	2102      	movs	r1, #2
   d4b5a:	ee00 0a10 	vmov	s0, r0
   d4b5e:	4628      	mov	r0, r5
   d4b60:	f001 fb5b 	bl	d621a <_ZN5Print7printlnEfi>
   d4b64:	2514      	movs	r5, #20
      data2 += s->GetSample();
   d4b66:	6823      	ldr	r3, [r4, #0]
   d4b68:	4620      	mov	r0, r4
   d4b6a:	681b      	ldr	r3, [r3, #0]
   d4b6c:	4798      	blx	r3
      delay(100);
   d4b6e:	2064      	movs	r0, #100	; 0x64
      data2 += s->GetSample();
   d4b70:	ee38 8a00 	vadd.f32	s16, s16, s0
      delay(100);
   d4b74:	f001 fc20 	bl	d63b8 <delay>
    for (int i = 0; i < samples; i++) {
   d4b78:	3d01      	subs	r5, #1
   d4b7a:	d1f4      	bne.n	d4b66 <_Z19ProcessOldAnalogAvgv+0x5e>
    float inchesavg2 = data2avg * 0.393701;
   d4b7c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4b80:	eec8 7a27 	vdiv.f32	s15, s16, s15
   d4b84:	ee17 0a90 	vmov	r0, s15
   d4b88:	f002 fe60 	bl	d784c <__aeabi_f2d>
   d4b8c:	a30e      	add	r3, pc, #56	; (adr r3, d4bc8 <_Z19ProcessOldAnalogAvgv+0xc0>)
   d4b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b92:	f002 feb3 	bl	d78fc <__aeabi_dmul>
   d4b96:	f003 f9a9 	bl	d7eec <__aeabi_d2f>
   d4b9a:	ee08 0a10 	vmov	s16, r0
    Serial.print("Data Avg: ");
   d4b9e:	f002 f8df 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4ba2:	490e      	ldr	r1, [pc, #56]	; (d4bdc <_Z19ProcessOldAnalogAvgv+0xd4>)
   d4ba4:	f001 fa2a 	bl	d5ffc <_ZN5Print5printEPKc>
    Serial.println(inchesavg2);
   d4ba8:	f002 f8da 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4bac:	2102      	movs	r1, #2
   d4bae:	eeb0 0a48 	vmov.f32	s0, s16
   d4bb2:	f001 fb32 	bl	d621a <_ZN5Print7printlnEfi>
}
   d4bb6:	eeb0 0a48 	vmov.f32	s0, s16
   d4bba:	ecbd 8b02 	vpop	{d8}
   d4bbe:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
   d4bc0:	ed9f 8a04 	vldr	s16, [pc, #16]	; d4bd4 <_Z19ProcessOldAnalogAvgv+0xcc>
   d4bc4:	e7f7      	b.n	d4bb6 <_Z19ProcessOldAnalogAvgv+0xae>
   d4bc6:	bf00      	nop
   d4bc8:	add9c27f 	.word	0xadd9c27f
   d4bcc:	3fd93265 	.word	0x3fd93265
   d4bd0:	2003e4e4 	.word	0x2003e4e4
   d4bd4:	00000000 	.word	0x00000000
   d4bd8:	000d82fa 	.word	0x000d82fa
   d4bdc:	000d8302 	.word	0x000d8302

000d4be0 <_Z16ProcessOldAnalogv>:
float ProcessOldAnalog() {
   d4be0:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4be2:	4813      	ldr	r0, [pc, #76]	; (d4c30 <_Z16ProcessOldAnalogv+0x50>)
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4be4:	e9d0 4300 	ldrd	r4, r3, [r0]
   d4be8:	429c      	cmp	r4, r3
   d4bea:	d017      	beq.n	d4c1c <_Z16ProcessOldAnalogv+0x3c>
	_M_range_check(__n);
   d4bec:	2100      	movs	r1, #0
   d4bee:	f7ff ff79 	bl	d4ae4 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    SensorConfig sc = sensors.at(i);
   d4bf2:	6824      	ldr	r4, [r4, #0]
    time_t startTime = Time.now();
   d4bf4:	f001 fbae 	bl	d6354 <_ZN9TimeClass3nowEv>
    return (s->GetSample() * 0.393701);
   d4bf8:	6823      	ldr	r3, [r4, #0]
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	4798      	blx	r3
   d4c00:	ee10 0a10 	vmov	r0, s0
   d4c04:	f002 fe22 	bl	d784c <__aeabi_f2d>
   d4c08:	a307      	add	r3, pc, #28	; (adr r3, d4c28 <_Z16ProcessOldAnalogv+0x48>)
   d4c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c0e:	f002 fe75 	bl	d78fc <__aeabi_dmul>
   d4c12:	f003 f96b 	bl	d7eec <__aeabi_d2f>
   d4c16:	ee00 0a10 	vmov	s0, r0
}
   d4c1a:	bd10      	pop	{r4, pc}
  return 0;
   d4c1c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4c34 <_Z16ProcessOldAnalogv+0x54>
   d4c20:	e7fb      	b.n	d4c1a <_Z16ProcessOldAnalogv+0x3a>
   d4c22:	bf00      	nop
   d4c24:	f3af 8000 	nop.w
   d4c28:	add9c27f 	.word	0xadd9c27f
   d4c2c:	3fd93265 	.word	0x3fd93265
   d4c30:	2003e4e4 	.word	0x2003e4e4
   d4c34:	00000000 	.word	0x00000000

000d4c38 <loop>:
void loop() {
   d4c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c3c:	ed2d 8b06 	vpush	{d8-d10}
   d4c40:	b08b      	sub	sp, #44	; 0x2c
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4c42:	f000 fde5 	bl	d5810 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c46:	f000 fdeb 	bl	d5820 <spark_cloud_flag_connected>
        if (!connected()) {
   d4c4a:	b110      	cbz	r0, d4c52 <loop+0x1a>
        return spark_sync_time(NULL);
   d4c4c:	2000      	movs	r0, #0
   d4c4e:	f000 fdf7 	bl	d5840 <spark_sync_time>
   d4c52:	4da1      	ldr	r5, [pc, #644]	; (d4ed8 <loop+0x2a0>)
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && !Particle.connected() && !Time.isValid()) {
   d4c54:	f8df 9298 	ldr.w	r9, [pc, #664]	; d4ef0 <loop+0x2b8>
   d4c58:	f000 fbe4 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
   d4c5c:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c5e:	499f      	ldr	r1, [pc, #636]	; (d4edc <loop+0x2a4>)
   d4c60:	f88d 3000 	strb.w	r3, [sp]
   d4c64:	4a9e      	ldr	r2, [pc, #632]	; (d4ee0 <loop+0x2a8>)
   d4c66:	6809      	ldr	r1, [r1, #0]
   d4c68:	233c      	movs	r3, #60	; 0x3c
   d4c6a:	4604      	mov	r4, r0
   d4c6c:	a806      	add	r0, sp, #24
   d4c6e:	f001 fe33 	bl	d68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4c72:	a807      	add	r0, sp, #28
   d4c74:	f7ff fddb 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  digitalWrite(PERIPHERAL_ENABLE_PIN, LOW);
   d4c78:	2100      	movs	r1, #0
   d4c7a:	2003      	movs	r0, #3
   d4c7c:	f002 fb0b 	bl	d7296 <digitalWrite>
  delay(500);
   d4c80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4c84:	f001 fb98 	bl	d63b8 <delay>
  float oldAnalog = ProcessOldAnalog();
   d4c88:	f7ff ffaa 	bl	d4be0 <_Z16ProcessOldAnalogv>
   d4c8c:	eeb0 8a40 	vmov.f32	s16, s0
  float oldAnalogAvg = ProcessOldAnalogAvg();
   d4c90:	f7ff ff3a 	bl	d4b08 <_Z19ProcessOldAnalogAvgv>
   d4c94:	eef0 8a40 	vmov.f32	s17, s0
  float newAnalog = ProccessNewAnalog();
   d4c98:	f7ff fc5e 	bl	d4558 <_Z17ProccessNewAnalogv>
   d4c9c:	eeb0 9a40 	vmov.f32	s18, s0
  float newAnalogAvg = ProccessNewAnalogAvg();
   d4ca0:	f7ff fcc6 	bl	d4630 <_Z20ProccessNewAnalogAvgv>
   d4ca4:	eef0 9a40 	vmov.f32	s19, s0
  float serialData = ProcessSerial();
   d4ca8:	f7ff fd2e 	bl	d4708 <_Z13ProcessSerialv>
   d4cac:	eeb0 aa40 	vmov.f32	s20, s0
  float tempData = processTemp(); 
   d4cb0:	f7ff fbc2 	bl	d4438 <_Z11processTempv>
   d4cb4:	eef0 aa40 	vmov.f32	s21, s0
  Serial.println(a);
   d4cb8:	f002 f852 	bl	d6d60 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4cbc:	220a      	movs	r2, #10
   d4cbe:	21ff      	movs	r1, #255	; 0xff
   d4cc0:	4606      	mov	r6, r0
   d4cc2:	f001 f9b8 	bl	d6036 <_ZN5Print11printNumberEmh>
        n += println();
   d4cc6:	4630      	mov	r0, r6
   d4cc8:	f001 f99f 	bl	d600a <_ZN5Print7printlnEv>
  a = pmic.getFault();
   d4ccc:	4885      	ldr	r0, [pc, #532]	; (d4ee4 <loop+0x2ac>)
   d4cce:	f000 fe86 	bl	d59de <_ZN4PMIC8getFaultEv>
   d4cd2:	4607      	mov	r7, r0
  Serial.println("charging");
   d4cd4:	f002 f844 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4cd8:	4983      	ldr	r1, [pc, #524]	; (d4ee8 <loop+0x2b0>)
   d4cda:	f001 f9a2 	bl	d6022 <_ZN5Print7printlnEPKc>
  Serial.println(a);
   d4cde:	f002 f83f 	bl	d6d60 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4ce2:	220a      	movs	r2, #10
   d4ce4:	4639      	mov	r1, r7
   d4ce6:	4606      	mov	r6, r0
   d4ce8:	f001 f9a5 	bl	d6036 <_ZN5Print11printNumberEmh>
        n += println();
   d4cec:	4630      	mov	r0, r6
   d4cee:	f001 f98c 	bl	d600a <_ZN5Print7printlnEv>
  Serial.println("Fault");
   d4cf2:	f002 f835 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4cf6:	497d      	ldr	r1, [pc, #500]	; (d4eec <loop+0x2b4>)
   d4cf8:	f001 f993 	bl	d6022 <_ZN5Print7printlnEPKc>
  delay(500);
   d4cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4d00:	f001 fb5a 	bl	d63b8 <delay>
  digitalWrite(PERIPHERAL_ENABLE_PIN, HIGH);
   d4d04:	2101      	movs	r1, #1
   d4d06:	2003      	movs	r0, #3
   d4d08:	f002 fac5 	bl	d7296 <digitalWrite>
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && !Particle.connected() && !Time.isValid()) {
   d4d0c:	a770      	add	r7, pc, #448	; (adr r7, d4ed0 <loop+0x298>)
   d4d0e:	e9d7 6700 	ldrd	r6, r7, [r7]
   d4d12:	f04f 0800 	mov.w	r8, #0
   d4d16:	f000 fb85 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
   d4d1a:	1b00      	subs	r0, r0, r4
   d4d1c:	f002 fd74 	bl	d7808 <__aeabi_ui2d>
   d4d20:	4632      	mov	r2, r6
   d4d22:	463b      	mov	r3, r7
   d4d24:	f002 ff14 	bl	d7b50 <__aeabi_ddiv>
   d4d28:	4642      	mov	r2, r8
   d4d2a:	464b      	mov	r3, r9
   d4d2c:	f003 f858 	bl	d7de0 <__aeabi_dcmplt>
   d4d30:	b130      	cbz	r0, d4d40 <loop+0x108>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d32:	f000 fd75 	bl	d5820 <spark_cloud_flag_connected>
   d4d36:	b918      	cbnz	r0, d4d40 <loop+0x108>
   d4d38:	f001 faef 	bl	d631a <_ZN9TimeClass7isValidEv>
   d4d3c:	2800      	cmp	r0, #0
   d4d3e:	d0ea      	beq.n	d4d16 <loop+0xde>
  delay(10000);
   d4d40:	f242 7010 	movw	r0, #10000	; 0x2710
   d4d44:	f001 fb38 	bl	d63b8 <delay>
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && Particle.connected() && false == allSent) {
   d4d48:	f20f 1984 	addw	r9, pc, #388	; 0x184
   d4d4c:	e9d9 8900 	ldrd	r8, r9, [r9]
   d4d50:	4f67      	ldr	r7, [pc, #412]	; (d4ef0 <loop+0x2b8>)
  bool allSent = false;
   d4d52:	f04f 0a00 	mov.w	sl, #0
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && Particle.connected() && false == allSent) {
   d4d56:	2600      	movs	r6, #0
   d4d58:	f000 fb64 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
   d4d5c:	1b00      	subs	r0, r0, r4
   d4d5e:	f002 fd53 	bl	d7808 <__aeabi_ui2d>
   d4d62:	4642      	mov	r2, r8
   d4d64:	464b      	mov	r3, r9
   d4d66:	f002 fef3 	bl	d7b50 <__aeabi_ddiv>
   d4d6a:	4632      	mov	r2, r6
   d4d6c:	463b      	mov	r3, r7
   d4d6e:	f003 f837 	bl	d7de0 <__aeabi_dcmplt>
   d4d72:	2800      	cmp	r0, #0
   d4d74:	d153      	bne.n	d4e1e <loop+0x1e6>
  if (Time.hour() == 17 && Time.minute() <= 10) {
   d4d76:	f001 fafd 	bl	d6374 <_ZN9TimeClass4hourEv>
   d4d7a:	2811      	cmp	r0, #17
   d4d7c:	d170      	bne.n	d4e60 <loop+0x228>
   d4d7e:	f001 fb05 	bl	d638c <_ZN9TimeClass6minuteEv>
   d4d82:	280a      	cmp	r0, #10
   d4d84:	dc6c      	bgt.n	d4e60 <loop+0x228>
   d4d86:	f000 fb4d 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
    String mainMess = String::format("Maintaince Mode started for %s", unitName);
   d4d8a:	4954      	ldr	r1, [pc, #336]	; (d4edc <loop+0x2a4>)
    while (((millis() - maintTimer) / 1000.0) < MAINTENANCE_DURATION_min * 60) {
   d4d8c:	f8df 9174 	ldr.w	r9, [pc, #372]	; d4f04 <loop+0x2cc>
   d4d90:	4f58      	ldr	r7, [pc, #352]	; (d4ef4 <loop+0x2bc>)
   d4d92:	4604      	mov	r4, r0
    String mainMess = String::format("Maintaince Mode started for %s", unitName);
   d4d94:	a806      	add	r0, sp, #24
   d4d96:	f001 f899 	bl	d5ecc <_ZN6StringC1ERKS_>
   d4d9a:	4957      	ldr	r1, [pc, #348]	; (d4ef8 <loop+0x2c0>)
   d4d9c:	aa06      	add	r2, sp, #24
   d4d9e:	a802      	add	r0, sp, #8
   d4da0:	f001 f8b8 	bl	d5f14 <_ZN6String6formatEPKcz>
   d4da4:	a806      	add	r0, sp, #24
   d4da6:	f001 f823 	bl	d5df0 <_ZN6StringD1Ev>
   d4daa:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4dac:	9a02      	ldr	r2, [sp, #8]
   d4dae:	4953      	ldr	r1, [pc, #332]	; (d4efc <loop+0x2c4>)
   d4db0:	f88d 3000 	strb.w	r3, [sp]
   d4db4:	a806      	add	r0, sp, #24
   d4db6:	233c      	movs	r3, #60	; 0x3c
   d4db8:	f001 fd8e 	bl	d68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4dbc:	a807      	add	r0, sp, #28
   d4dbe:	f7ff fd36 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    while (((millis() - maintTimer) / 1000.0) < MAINTENANCE_DURATION_min * 60) {
   d4dc2:	f04f 0800 	mov.w	r8, #0
   d4dc6:	2600      	movs	r6, #0
   d4dc8:	f000 fb2c 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
   d4dcc:	1b00      	subs	r0, r0, r4
   d4dce:	f002 fd1b 	bl	d7808 <__aeabi_ui2d>
   d4dd2:	4642      	mov	r2, r8
   d4dd4:	464b      	mov	r3, r9
   d4dd6:	f002 febb 	bl	d7b50 <__aeabi_ddiv>
   d4dda:	4632      	mov	r2, r6
   d4ddc:	463b      	mov	r3, r7
   d4dde:	f002 ffff 	bl	d7de0 <__aeabi_dcmplt>
   d4de2:	2800      	cmp	r0, #0
   d4de4:	d1f0      	bne.n	d4dc8 <loop+0x190>
        if (valid_) {
   d4de6:	4b46      	ldr	r3, [pc, #280]	; (d4f00 <loop+0x2c8>)
   d4de8:	7d1a      	ldrb	r2, [r3, #20]
   d4dea:	b10a      	cbz	r2, d4df0 <loop+0x1b8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4dec:	2202      	movs	r2, #2
   d4dee:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(calculateSleepCycleSeconds()*1000);
   d4df0:	f7ff fd06 	bl	d4800 <_Z26calculateSleepCycleSecondsv>
   d4df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4df8:	4341      	muls	r1, r0
   d4dfa:	4841      	ldr	r0, [pc, #260]	; (d4f00 <loop+0x2c8>)
   d4dfc:	f7ff fa9a 	bl	d4334 <_ZN8particle24SystemSleepConfiguration8durationEm>
    System.sleep(config);  // Added this line on May 26, 2021 - commented the line above. - AJK
   d4e00:	493f      	ldr	r1, [pc, #252]	; (d4f00 <loop+0x2c8>)
   d4e02:	a806      	add	r0, sp, #24
   d4e04:	f000 ff72 	bl	d5cec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d4e08:	a806      	add	r0, sp, #24
   d4e0a:	f7ff fa56 	bl	d42ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
    String mainMess = String::format("Maintaince Mode started for %s", unitName);
   d4e0e:	a802      	add	r0, sp, #8
   d4e10:	f000 ffee 	bl	d5df0 <_ZN6StringD1Ev>
}
   d4e14:	b00b      	add	sp, #44	; 0x2c
   d4e16:	ecbd 8b06 	vpop	{d8-d10}
   d4e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e1e:	f000 fcff 	bl	d5820 <spark_cloud_flag_connected>
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && Particle.connected() && false == allSent) {
   d4e22:	2800      	cmp	r0, #0
   d4e24:	d0a7      	beq.n	d4d76 <loop+0x13e>
   d4e26:	f1ba 0f00 	cmp.w	sl, #0
   d4e2a:	d1a4      	bne.n	d4d76 <loop+0x13e>
    allSent |= allReadingsToServer(oldAnalog, oldAnalogAvg, newAnalog, newAnalogAvg, serialData, tempData);
   d4e2c:	eef0 2a6a 	vmov.f32	s5, s21
   d4e30:	eeb0 2a4a 	vmov.f32	s4, s20
   d4e34:	eef0 1a69 	vmov.f32	s3, s19
   d4e38:	eeb0 1a49 	vmov.f32	s2, s18
   d4e3c:	eef0 0a68 	vmov.f32	s1, s17
   d4e40:	eeb0 0a48 	vmov.f32	s0, s16
   d4e44:	f7ff fd0a 	bl	d485c <_Z19allReadingsToServerffffff>
   d4e48:	4682      	mov	sl, r0
    Serial.println(allSent);
   d4e4a:	f001 ff89 	bl	d6d60 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   d4e4e:	220a      	movs	r2, #10
   d4e50:	4683      	mov	fp, r0
   d4e52:	4651      	mov	r1, sl
   d4e54:	f001 f8ef 	bl	d6036 <_ZN5Print11printNumberEmh>
        n += println();
   d4e58:	4658      	mov	r0, fp
   d4e5a:	f001 f8d6 	bl	d600a <_ZN5Print7printlnEv>
        return n;
   d4e5e:	e77b      	b.n	d4d58 <loop+0x120>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d4e60:	2300      	movs	r3, #0
    Particle.disconnect();
   d4e62:	a806      	add	r0, sp, #24
   d4e64:	e9cd 3306 	strd	r3, r3, [sp, #24]
   d4e68:	f8ad 3020 	strh.w	r3, [sp, #32]
    while ((Particle.connected() && (millis() - startTime) / 60000.0 < MAX_ON_TIME_min)) {
   d4e6c:	f20f 0960 	addw	r9, pc, #96	; 0x60
   d4e70:	e9d9 8900 	ldrd	r8, r9, [r9]
    Particle.disconnect();
   d4e74:	f001 fc35 	bl	d66e2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    while ((Particle.connected() && (millis() - startTime) / 60000.0 < MAX_ON_TIME_min)) {
   d4e78:	4f1d      	ldr	r7, [pc, #116]	; (d4ef0 <loop+0x2b8>)
   d4e7a:	2600      	movs	r6, #0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e7c:	f000 fcd0 	bl	d5820 <spark_cloud_flag_connected>
   d4e80:	b990      	cbnz	r0, d4ea8 <loop+0x270>
        if (valid_) {
   d4e82:	4b1f      	ldr	r3, [pc, #124]	; (d4f00 <loop+0x2c8>)
   d4e84:	7d1a      	ldrb	r2, [r3, #20]
   d4e86:	b9fa      	cbnz	r2, d4ec8 <loop+0x290>
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(calculateSleepCycleSeconds()*1000);
   d4e88:	f7ff fcba 	bl	d4800 <_Z26calculateSleepCycleSecondsv>
   d4e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4e90:	4341      	muls	r1, r0
   d4e92:	481b      	ldr	r0, [pc, #108]	; (d4f00 <loop+0x2c8>)
   d4e94:	f7ff fa4e 	bl	d4334 <_ZN8particle24SystemSleepConfiguration8durationEm>
    System.sleep(config);  // Added this line on May 26, 2021 - commented the line above. - AJK
   d4e98:	a806      	add	r0, sp, #24
   d4e9a:	4919      	ldr	r1, [pc, #100]	; (d4f00 <loop+0x2c8>)
   d4e9c:	f000 ff26 	bl	d5cec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   d4ea0:	a806      	add	r0, sp, #24
   d4ea2:	f7ff fa0a 	bl	d42ba <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
}
   d4ea6:	e7b5      	b.n	d4e14 <loop+0x1dc>
   d4ea8:	f000 fabc 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
    while ((Particle.connected() && (millis() - startTime) / 60000.0 < MAX_ON_TIME_min)) {
   d4eac:	1b00      	subs	r0, r0, r4
   d4eae:	f002 fcab 	bl	d7808 <__aeabi_ui2d>
   d4eb2:	4642      	mov	r2, r8
   d4eb4:	464b      	mov	r3, r9
   d4eb6:	f002 fe4b 	bl	d7b50 <__aeabi_ddiv>
   d4eba:	4632      	mov	r2, r6
   d4ebc:	463b      	mov	r3, r7
   d4ebe:	f002 ff8f 	bl	d7de0 <__aeabi_dcmplt>
   d4ec2:	2800      	cmp	r0, #0
   d4ec4:	d1da      	bne.n	d4e7c <loop+0x244>
   d4ec6:	e7dc      	b.n	d4e82 <loop+0x24a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4ec8:	2202      	movs	r2, #2
   d4eca:	721a      	strb	r2, [r3, #8]
   d4ecc:	e7dc      	b.n	d4e88 <loop+0x250>
   d4ece:	bf00      	nop
   d4ed0:	00000000 	.word	0x00000000
   d4ed4:	40ed4c00 	.word	0x40ed4c00
   d4ed8:	2003e4a0 	.word	0x2003e4a0
   d4edc:	2003e5b8 	.word	0x2003e5b8
   d4ee0:	000d830d 	.word	0x000d830d
   d4ee4:	2003e4d4 	.word	0x2003e4d4
   d4ee8:	000d8312 	.word	0x000d8312
   d4eec:	000d831b 	.word	0x000d831b
   d4ef0:	40080000 	.word	0x40080000
   d4ef4:	4082c000 	.word	0x4082c000
   d4ef8:	000d8321 	.word	0x000d8321
   d4efc:	000d8340 	.word	0x000d8340
   d4f00:	2003e4b4 	.word	0x2003e4b4
   d4f04:	408f4000 	.word	0x408f4000

000d4f08 <setup>:
void setup() {
   d4f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f0c:	b08d      	sub	sp, #52	; 0x34
   Serial.begin(9600);
   d4f0e:	f001 ff27 	bl	d6d60 <_Z16_fetch_usbserialv>
   d4f12:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f16:	f001 ff17 	bl	d6d48 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d4f1a:	f001 fff3 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d4f1e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f22:	f001 ffeb 	bl	d6efc <_ZN11USARTSerial5beginEm>
        particle::protocol::connection_properties_t conn_prop = {0};
   d4f26:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4f28:	2208      	movs	r2, #8
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f2a:	4618      	mov	r0, r3
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4f2c:	2401      	movs	r4, #1
        conn_prop.size = sizeof(conn_prop);
   d4f2e:	f8ad 2020 	strh.w	r2, [sp, #32]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f32:	f247 5130 	movw	r1, #30000	; 0x7530
   d4f36:	aa08      	add	r2, sp, #32
        particle::protocol::connection_properties_t conn_prop = {0};
   d4f38:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4f3c:	9409      	str	r4, [sp, #36]	; 0x24
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4f3e:	f000 fc8f 	bl	d5860 <spark_set_connection_property>
  pinMode(PERIPHERAL_ENABLE_PIN, OUTPUT);
   d4f42:	4621      	mov	r1, r4
   d4f44:	2003      	movs	r0, #3
   d4f46:	f002 f995 	bl	d7274 <pinMode>
  AnalogUltrasonicSensor *maxbotixSensor = new AnalogUltrasonicSensor(String(unitName), MAXBOTIX_INPUT_PIN);
   d4f4a:	4936      	ldr	r1, [pc, #216]	; (d5024 <setup+0x11c>)
   d4f4c:	a808      	add	r0, sp, #32
   d4f4e:	f000 ffbd 	bl	d5ecc <_ZN6StringC1ERKS_>
   d4f52:	2014      	movs	r0, #20
   d4f54:	f7ff f89f 	bl	d4096 <_Znwj>
   d4f58:	4604      	mov	r4, r0
   d4f5a:	b128      	cbz	r0, d4f68 <setup+0x60>
   d4f5c:	f04f 33ff 	mov.w	r3, #4294967295
   d4f60:	2212      	movs	r2, #18
   d4f62:	a908      	add	r1, sp, #32
   d4f64:	f7ff fa10 	bl	d4388 <_ZN22AnalogUltrasonicSensorC1E6Stringii>
   d4f68:	a808      	add	r0, sp, #32
   d4f6a:	f000 ff41 	bl	d5df0 <_ZN6StringD1Ev>
		sensor_->SetAnalogRef_V(vRef_V);
   d4f6e:	6923      	ldr	r3, [r4, #16]
            analogReference_V_ = voltage;
   d4f70:	4a2d      	ldr	r2, [pc, #180]	; (d5028 <setup+0x120>)
   d4f72:	625a      	str	r2, [r3, #36]	; 0x24
		sensor_->SetAnalogScale_cmpV(scale_cm_p_V);
   d4f74:	6923      	ldr	r3, [r4, #16]
            analogScale_cmpV_ = scale;
   d4f76:	4a2d      	ldr	r2, [pc, #180]	; (d502c <setup+0x124>)
   d4f78:	621a      	str	r2, [r3, #32]
		sensor_->SetAnalogDivs(4095);
   d4f7a:	6923      	ldr	r3, [r4, #16]
  workingConfig.SensorPtr = maxbotixSensor;
   d4f7c:	9405      	str	r4, [sp, #20]
            analogDivs_ = divs;
   d4f7e:	f640 72ff 	movw	r2, #4095	; 0xfff
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4f82:	4c2b      	ldr	r4, [pc, #172]	; (d5030 <setup+0x128>)
   d4f84:	629a      	str	r2, [r3, #40]	; 0x28
  workingConfig.SamplePeriod_ms = 100;
   d4f86:	220a      	movs	r2, #10
   d4f88:	2364      	movs	r3, #100	; 0x64
   d4f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d4f8e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   d4f92:	4293      	cmp	r3, r2
   d4f94:	d028      	beq.n	d4fe8 <setup+0xe0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4f96:	b11b      	cbz	r3, d4fa0 <setup+0x98>
   d4f98:	aa05      	add	r2, sp, #20
   d4f9a:	ca07      	ldmia	r2, {r0, r1, r2}
   d4f9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
   d4fa0:	6863      	ldr	r3, [r4, #4]
   d4fa2:	330c      	adds	r3, #12
   d4fa4:	6063      	str	r3, [r4, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4fa6:	f8df 9090 	ldr.w	r9, [pc, #144]	; d5038 <setup+0x130>
	_M_range_check(__n);
   d4faa:	f8df 8084 	ldr.w	r8, [pc, #132]	; d5030 <setup+0x128>
void setup() {
   d4fae:	2500      	movs	r5, #0
    Buffering::RegisterSensorName(sensors.at(i).SensorPtr->GetName());
   d4fb0:	270c      	movs	r7, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4fb2:	e9d4 6300 	ldrd	r6, r3, [r4]
   d4fb6:	1b9b      	subs	r3, r3, r6
   d4fb8:	109b      	asrs	r3, r3, #2
   d4fba:	fb09 f303 	mul.w	r3, r9, r3
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4fbe:	429d      	cmp	r5, r3
   d4fc0:	d218      	bcs.n	d4ff4 <setup+0xec>
	_M_range_check(__n);
   d4fc2:	4629      	mov	r1, r5
   d4fc4:	4640      	mov	r0, r8
   d4fc6:	f7ff fd8d 	bl	d4ae4 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    Buffering::RegisterSensorName(sensors.at(i).SensorPtr->GetName());
   d4fca:	fb07 f305 	mul.w	r3, r7, r5

  String GetName() { return String(name_); }
   d4fce:	a808      	add	r0, sp, #32
   d4fd0:	58f3      	ldr	r3, [r6, r3]
   d4fd2:	6899      	ldr	r1, [r3, #8]
   d4fd4:	f000 ff57 	bl	d5e86 <_ZN6StringC1EPKc>
   d4fd8:	a808      	add	r0, sp, #32
   d4fda:	f7ff fd15 	bl	d4a08 <_ZN9Buffering18RegisterSensorNameE6String>
   d4fde:	a808      	add	r0, sp, #32
   d4fe0:	f000 ff06 	bl	d5df0 <_ZN6StringD1Ev>
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4fe4:	3501      	adds	r5, #1
   d4fe6:	e7e4      	b.n	d4fb2 <setup+0xaa>
	  _M_realloc_insert(end(), __x);
   d4fe8:	aa05      	add	r2, sp, #20
   d4fea:	4619      	mov	r1, r3
   d4fec:	4620      	mov	r0, r4
   d4fee:	f7ff fd23 	bl	d4a38 <_ZNSt6vectorI12SensorConfigSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   d4ff2:	e7d8      	b.n	d4fa6 <setup+0x9e>
  pmic.begin();
   d4ff4:	480f      	ldr	r0, [pc, #60]	; (d5034 <setup+0x12c>)
   d4ff6:	f000 fc9a 	bl	d592e <_ZN4PMIC5beginEv>
  pmic.setChargeCurrent(0, 0, 1, 0, 0, 0); // Set charging current to 1024mA (512 + 512 offset)
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	4611      	mov	r1, r2
   d4ffe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5002:	9200      	str	r2, [sp, #0]
   d5004:	2301      	movs	r3, #1
   d5006:	480b      	ldr	r0, [pc, #44]	; (d5034 <setup+0x12c>)
   d5008:	f000 fdb6 	bl	d5b78 <_ZN4PMIC16setChargeCurrentEbbbbbb>
  pmic.setInputVoltageLimit(4840);         // Set the lowest input voltage to 4.84 volts. This keeps my 5v
   d500c:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d5010:	4808      	ldr	r0, [pc, #32]	; (d5034 <setup+0x12c>)
   d5012:	f000 fd13 	bl	d5a3c <_ZN4PMIC20setInputVoltageLimitEt>
  pmic.enableBuck();
   d5016:	4807      	ldr	r0, [pc, #28]	; (d5034 <setup+0x12c>)
   d5018:	f000 fd99 	bl	d5b4e <_ZN4PMIC10enableBuckEv>
}
   d501c:	b00d      	add	sp, #52	; 0x34
   d501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5022:	bf00      	nop
   d5024:	2003e5b8 	.word	0x2003e5b8
   d5028:	40533333 	.word	0x40533333
   d502c:	43986666 	.word	0x43986666
   d5030:	2003e4e4 	.word	0x2003e4e4
   d5034:	2003e4d4 	.word	0x2003e4d4
   d5038:	aaaaaaab 	.word	0xaaaaaaab

000d503c <_ZN10StatsTools13InsertionSortIfEEvPT_i>:
    {
        return (val < 0) ? -val : val;
    }

    template <typename T>
    void InsertionSort(T arr[], int count)
   d503c:	b510      	push	{r4, lr}
   d503e:	3008      	adds	r0, #8
    {
        for (int i = 1; i < count; ++i)
   d5040:	2201      	movs	r2, #1
   d5042:	428a      	cmp	r2, r1
   d5044:	da13      	bge.n	d506e <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x32>
   d5046:	4603      	mov	r3, r0
   d5048:	4614      	mov	r4, r2
        {
            for (int j = i; j > 0; --j)
            {
                if (arr[j] < arr[j-1])
   d504a:	ed73 7a01 	vldmdb	r3!, {s15}
   d504e:	ed13 7a01 	vldr	s14, [r3, #-4]
   d5052:	eef4 7ac7 	vcmpe.f32	s15, s14
   d5056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d505a:	d505      	bpl.n	d5068 <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x2c>
            for (int j = i; j > 0; --j)
   d505c:	3c01      	subs	r4, #1
                {
                    T temp = arr[j];
                    arr[j] = arr[j-1];
   d505e:	ed83 7a00 	vstr	s14, [r3]
                    arr[j-1] = temp;
   d5062:	ed43 7a01 	vstr	s15, [r3, #-4]
            for (int j = i; j > 0; --j)
   d5066:	d1f0      	bne.n	d504a <_ZN10StatsTools13InsertionSortIfEEvPT_i+0xe>
        for (int i = 1; i < count; ++i)
   d5068:	3201      	adds	r2, #1
   d506a:	3004      	adds	r0, #4
   d506c:	e7e9      	b.n	d5042 <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x6>
                }
                else
                    break;
            }
        }
    }
   d506e:	bd10      	pop	{r4, pc}

000d5070 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>:
            }
        }
    }

    template <typename T>
    T* SortedCopy(T arr[10], int count)
   d5070:	b538      	push	{r3, r4, r5, lr}
    {
        T *sortedArr = reinterpret_cast<T*>(statsToolsAlloc);
        for (int j = 1; j < count; j++)
        {
            sortedArr[j] = arr[j];
   d5072:	4d08      	ldr	r5, [pc, #32]	; (d5094 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x24>)
   d5074:	3004      	adds	r0, #4
        for (int j = 1; j < count; j++)
   d5076:	2301      	movs	r3, #1
   d5078:	428b      	cmp	r3, r1
   d507a:	da06      	bge.n	d508a <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x1a>
            sortedArr[j] = arr[j];
   d507c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d5080:	f850 4b04 	ldr.w	r4, [r0], #4
   d5084:	6014      	str	r4, [r2, #0]
        for (int j = 1; j < count; j++)
   d5086:	3301      	adds	r3, #1
   d5088:	e7f6      	b.n	d5078 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x8>
        }
        InsertionSort(sortedArr, count);
   d508a:	4802      	ldr	r0, [pc, #8]	; (d5094 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x24>)
   d508c:	f7ff ffd6 	bl	d503c <_ZN10StatsTools13InsertionSortIfEEvPT_i>
        return sortedArr;
    }
   d5090:	4800      	ldr	r0, [pc, #0]	; (d5094 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x24>)
   d5092:	bd38      	pop	{r3, r4, r5, pc}
   d5094:	2003e4f0 	.word	0x2003e4f0

000d5098 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj>:

        return MAD;
    }

    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
   d5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d509a:	ed2d 8b02 	vpush	{d8}
    {
        T mad = MAD(arr, count);
   d509e:	680f      	ldr	r7, [r1, #0]
    void TrimOutliers(T arr[], unsigned int &count)
   d50a0:	460d      	mov	r5, r1
        T *sortedArr = SortedCopy(arr, count);
   d50a2:	4639      	mov	r1, r7
    void TrimOutliers(T arr[], unsigned int &count)
   d50a4:	4606      	mov	r6, r0
        T *sortedArr = SortedCopy(arr, count);
   d50a6:	f7ff ffe3 	bl	d5070 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>
        T retVal = sortedArr[count/2];
   d50aa:	eb07 74d7 	add.w	r4, r7, r7, lsr #31
   d50ae:	1064      	asrs	r4, r4, #1
   d50b0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   d50b4:	ed94 7a00 	vldr	s14, [r4]
   d50b8:	4603      	mov	r3, r0
        for (int i = 0; i < count; ++i)
   d50ba:	2200      	movs	r2, #0
   d50bc:	4297      	cmp	r7, r2
   d50be:	dd0f      	ble.n	d50e0 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0x48>
            sortedArr[i] = sortedArr[i] - median;
   d50c0:	edd3 7a00 	vldr	s15, [r3]
   d50c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        for (int i = 0; i < count; ++i)
   d50c8:	3201      	adds	r2, #1
            if (sortedArr[i] < 0) // Absolute Value
   d50ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d50ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                sortedArr[i] *= -1;
   d50d2:	bf48      	it	mi
   d50d4:	eef1 7a67 	vnegmi.f32	s15, s15
   d50d8:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < count; ++i)
   d50dc:	3304      	adds	r3, #4
   d50de:	e7ed      	b.n	d50bc <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0x24>
        InsertionSort(sortedArr, count);
   d50e0:	4639      	mov	r1, r7
   d50e2:	f7ff ffab 	bl	d503c <_ZN10StatsTools13InsertionSortIfEEvPT_i>
        T retVal = sortedArr[count/2];
   d50e6:	ed94 8a00 	vldr	s16, [r4]
        return (val < 0) ? -val : val;
   d50ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d50ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d50f2:	bf46      	itte	mi
   d50f4:	eef1 7a48 	vnegmi.f32	s15, s16
   d50f8:	ee17 0a90 	vmovmi	r0, s15
   d50fc:	ee18 0a10 	vmovpl	r0, s16
        if (StatsTools::fabs(mad) < .1) // Remove divide by zero errors
   d5100:	f002 fba4 	bl	d784c <__aeabi_f2d>
   d5104:	a322      	add	r3, pc, #136	; (adr r3, d5190 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf8>)
   d5106:	e9d3 2300 	ldrd	r2, r3, [r3]
   d510a:	f002 fe69 	bl	d7de0 <__aeabi_dcmplt>
            mad = .1;

        T median = Median(arr, count);
   d510e:	682c      	ldr	r4, [r5, #0]
            mad = .1;
   d5110:	eddf 7a1d 	vldr	s15, [pc, #116]	; d5188 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf0>
   d5114:	2800      	cmp	r0, #0
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);
   d5116:	4621      	mov	r1, r4
   d5118:	4630      	mov	r0, r6
            mad = .1;
   d511a:	bf18      	it	ne
   d511c:	eeb0 8a67 	vmovne.f32	s16, s15
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);
   d5120:	f7ff ffa6 	bl	d5070 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>
        T retVal = sortedArr[count/2];
   d5124:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   d5128:	1064      	asrs	r4, r4, #1
   d512a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;

        for (int i = 0; i < count; ++i)
   d512e:	2300      	movs	r3, #0
        {
            float devs = (arr[i] - median) / (float)mad;
            if (StatsTools::fabs(devs) < 3.5)
            {
                trimmedBuffer[countOut++] = arr[i];
   d5130:	4916      	ldr	r1, [pc, #88]	; (d518c <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf4>)
        T retVal = sortedArr[count/2];
   d5132:	edd4 6a00 	vldr	s13, [r4]
   d5136:	4632      	mov	r2, r6
        int countOut = 0;
   d5138:	461c      	mov	r4, r3
            if (StatsTools::fabs(devs) < 3.5)
   d513a:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
        for (int i = 0; i < count; ++i)
   d513e:	6828      	ldr	r0, [r5, #0]
   d5140:	4298      	cmp	r0, r3
   d5142:	d918      	bls.n	d5176 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xde>
            float devs = (arr[i] - median) / (float)mad;
   d5144:	ecb2 7a01 	vldmia	r2!, {s14}
   d5148:	ee77 5a66 	vsub.f32	s11, s14, s13
        for (int i = 0; i < count; ++i)
   d514c:	3301      	adds	r3, #1
            float devs = (arr[i] - median) / (float)mad;
   d514e:	eec5 7a88 	vdiv.f32	s15, s11, s16
        return (val < 0) ? -val : val;
   d5152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d515a:	bf48      	it	mi
   d515c:	eef1 7a67 	vnegmi.f32	s15, s15
            if (StatsTools::fabs(devs) < 3.5)
   d5160:	eef4 7ac6 	vcmpe.f32	s15, s12
   d5164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                trimmedBuffer[countOut++] = arr[i];
   d5168:	bf42      	ittt	mi
   d516a:	eb01 0084 	addmi.w	r0, r1, r4, lsl #2
   d516e:	ed80 7a00 	vstrmi	s14, [r0]
   d5172:	3401      	addmi	r4, #1
        for (int i = 0; i < count; ++i)
   d5174:	e7e3      	b.n	d513e <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xa6>
            }
        }

        memcpy(arr, trimmedBuffer, countOut*sizeof(T));
   d5176:	4905      	ldr	r1, [pc, #20]	; (d518c <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf4>)
   d5178:	00a2      	lsls	r2, r4, #2
   d517a:	4630      	mov	r0, r6
   d517c:	f002 ff18 	bl	d7fb0 <memcpy>
        count = countOut;
    }
   d5180:	ecbd 8b02 	vpop	{d8}
        count = countOut;
   d5184:	602c      	str	r4, [r5, #0]
    }
   d5186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5188:	3dcccccd 	.word	0x3dcccccd
   d518c:	2003e4f0 	.word	0x2003e4f0
   d5190:	9999999a 	.word	0x9999999a
   d5194:	3fb99999 	.word	0x3fb99999

000d5198 <_ZN6Sensor15GetTrialAverageEiib>:
  virtual float GetTrialAverage(const int numSamples, const int samplePeriod_ms, const bool trimOutliers = true) {
   d5198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d519c:	461f      	mov	r7, r3
    if (enabled_) {
   d519e:	7903      	ldrb	r3, [r0, #4]
  virtual float GetTrialAverage(const int numSamples, const int samplePeriod_ms, const bool trimOutliers = true) {
   d51a0:	4605      	mov	r5, r0
   d51a2:	460e      	mov	r6, r1
   d51a4:	4690      	mov	r8, r2
    if (enabled_) {
   d51a6:	2b00      	cmp	r3, #0
   d51a8:	d046      	beq.n	d5238 <_ZN6Sensor15GetTrialAverageEiib+0xa0>
        values_(new T[size_]),
   d51aa:	9802      	ldr	r0, [sp, #8]
        count_(0) {}
   d51ac:	4b26      	ldr	r3, [pc, #152]	; (d5248 <_ZN6Sensor15GetTrialAverageEiib+0xb0>)
   d51ae:	9300      	str	r3, [sp, #0]
        values_(new T[size_]),
   d51b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   d51b4:	4298      	cmp	r0, r3
   d51b6:	bf34      	ite	cc
   d51b8:	0080      	lslcc	r0, r0, #2
   d51ba:	f04f 30ff 	movcs.w	r0, #4294967295
   d51be:	f7fe ff6c 	bl	d409a <_Znaj>
        count_(0) {}
   d51c2:	e9cd 0601 	strd	r0, r6, [sp, #4]
   d51c6:	2400      	movs	r4, #0
   d51c8:	9403      	str	r4, [sp, #12]
      for (int i = 0; i < numSamples; ++i) {
   d51ca:	42a6      	cmp	r6, r4
   d51cc:	dd14      	ble.n	d51f8 <_ZN6Sensor15GetTrialAverageEiib+0x60>
        samples.Append(GetSample());
   d51ce:	682b      	ldr	r3, [r5, #0]
   d51d0:	4628      	mov	r0, r5
   d51d2:	681b      	ldr	r3, [r3, #0]
   d51d4:	4798      	blx	r3
        return count_;
    }

    bool Append(const T value)
    {
        if (count_ < size_)
   d51d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d51da:	429a      	cmp	r2, r3
   d51dc:	d207      	bcs.n	d51ee <_ZN6Sensor15GetTrialAverageEiib+0x56>
        {
            values_[count_] = value;
   d51de:	9b01      	ldr	r3, [sp, #4]
   d51e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   d51e4:	ed83 0a00 	vstr	s0, [r3]
            count_++;
   d51e8:	9b03      	ldr	r3, [sp, #12]
   d51ea:	3301      	adds	r3, #1
   d51ec:	9303      	str	r3, [sp, #12]
        delay(samplePeriod_ms);
   d51ee:	4640      	mov	r0, r8
   d51f0:	f001 f8e2 	bl	d63b8 <delay>
      for (int i = 0; i < numSamples; ++i) {
   d51f4:	3401      	adds	r4, #1
   d51f6:	e7e8      	b.n	d51ca <_ZN6Sensor15GetTrialAverageEiib+0x32>
      if (trimOutliers) {
   d51f8:	b147      	cbz	r7, d520c <_ZN6Sensor15GetTrialAverageEiib+0x74>
        Serial.println("Trimming");
   d51fa:	f001 fdb1 	bl	d6d60 <_Z16_fetch_usbserialv>
   d51fe:	4913      	ldr	r1, [pc, #76]	; (d524c <_ZN6Sensor15GetTrialAverageEiib+0xb4>)
   d5200:	f000 ff0f 	bl	d6022 <_ZN5Print7printlnEPKc>
    }

    void TrimOutliers()
    {
        // count will be copied into the function and also be modified
        StatsTools::TrimOutliers(values_, count_);
   d5204:	9801      	ldr	r0, [sp, #4]
   d5206:	a903      	add	r1, sp, #12
   d5208:	f7ff ff46 	bl	d5098 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj>
        return StatsTools::Average(values_, count_);
   d520c:	9b03      	ldr	r3, [sp, #12]
    float Average(T arr[], int count)
   d520e:	9901      	ldr	r1, [sp, #4]
        float total = 0.0;
   d5210:	ed9f 7a0f 	vldr	s14, [pc, #60]	; d5250 <_ZN6Sensor15GetTrialAverageEiib+0xb8>
        for (int i = 0; i < count; ++i) // Get the average of all readings
   d5214:	2200      	movs	r2, #0
   d5216:	4293      	cmp	r3, r2
   d5218:	dd05      	ble.n	d5226 <_ZN6Sensor15GetTrialAverageEiib+0x8e>
          total += arr[i];
   d521a:	ecf1 7a01 	vldmia	r1!, {s15}
        for (int i = 0; i < count; ++i) // Get the average of all readings
   d521e:	3201      	adds	r2, #1
          total += arr[i];
   d5220:	ee37 7a27 	vadd.f32	s14, s14, s15
        for (int i = 0; i < count; ++i) // Get the average of all readings
   d5224:	e7f7      	b.n	d5216 <_ZN6Sensor15GetTrialAverageEiib+0x7e>
        return total/count;
   d5226:	ee07 3a90 	vmov	s15, r3
   d522a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d522e:	ee87 0a27 	vdiv.f32	s0, s14, s15
  }
   d5232:	b004      	add	sp, #16
   d5234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Serial.println("Didnt trimm1");
   d5238:	f001 fd92 	bl	d6d60 <_Z16_fetch_usbserialv>
   d523c:	4905      	ldr	r1, [pc, #20]	; (d5254 <_ZN6Sensor15GetTrialAverageEiib+0xbc>)
   d523e:	f000 fef0 	bl	d6022 <_ZN5Print7printlnEPKc>
      return -1;
   d5242:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d5246:	e7f4      	b.n	d5232 <_ZN6Sensor15GetTrialAverageEiib+0x9a>
   d5248:	000d838c 	.word	0x000d838c
   d524c:	000d8347 	.word	0x000d8347
   d5250:	00000000 	.word	0x00000000
   d5254:	000d8350 	.word	0x000d8350

000d5258 <_GLOBAL__sub_I_statsToolsAlloc>:
      config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(calculateSleepCycleSeconds()*1000);
      System.sleep(config);  // Added this line on May 26, 2021 - commented the line above. - AJK
      //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
    }
  }
   d5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d525a:	4b34      	ldr	r3, [pc, #208]	; (d532c <_GLOBAL__sub_I_statsToolsAlloc+0xd4>)
std::vector<String> SensorNames;
   d525c:	4d34      	ldr	r5, [pc, #208]	; (d5330 <_GLOBAL__sub_I_statsToolsAlloc+0xd8>)
              error_(SYSTEM_ERROR_NONE) {
   d525e:	4f35      	ldr	r7, [pc, #212]	; (d5334 <_GLOBAL__sub_I_statsToolsAlloc+0xdc>)
   d5260:	2601      	movs	r6, #1
   d5262:	701e      	strb	r6, [r3, #0]
   d5264:	4b34      	ldr	r3, [pc, #208]	; (d5338 <_GLOBAL__sub_I_statsToolsAlloc+0xe0>)
   d5266:	2208      	movs	r2, #8
   d5268:	701a      	strb	r2, [r3, #0]
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d526a:	4631      	mov	r1, r6
   d526c:	4630      	mov	r0, r6
   d526e:	f000 f8f1 	bl	d5454 <HAL_Feature_Set>
	: _M_start(), _M_finish(), _M_end_of_storage()
   d5272:	4832      	ldr	r0, [pc, #200]	; (d533c <_GLOBAL__sub_I_statsToolsAlloc+0xe4>)
   d5274:	4932      	ldr	r1, [pc, #200]	; (d5340 <_GLOBAL__sub_I_statsToolsAlloc+0xe8>)
   d5276:	2400      	movs	r4, #0
   d5278:	462a      	mov	r2, r5
   d527a:	e9c0 4400 	strd	r4, r4, [r0]
   d527e:	6084      	str	r4, [r0, #8]
   d5280:	f002 f8bc 	bl	d73fc <__aeabi_atexit>
    SleepResult() {}
   d5284:	4b2f      	ldr	r3, [pc, #188]	; (d5344 <_GLOBAL__sub_I_statsToolsAlloc+0xec>)
   d5286:	60bb      	str	r3, [r7, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5288:	603c      	str	r4, [r7, #0]
   d528a:	80bc      	strh	r4, [r7, #4]
    SleepResult() {}
   d528c:	71bc      	strb	r4, [r7, #6]
        set_system_mode(mode);
   d528e:	2002      	movs	r0, #2
   d5290:	f000 fa08 	bl	d56a4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d5294:	462a      	mov	r2, r5
   d5296:	492c      	ldr	r1, [pc, #176]	; (d5348 <_GLOBAL__sub_I_statsToolsAlloc+0xf0>)
   d5298:	4638      	mov	r0, r7
   d529a:	f002 f8af 	bl	d73fc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d529e:	4621      	mov	r1, r4
   d52a0:	4630      	mov	r0, r6
   d52a2:	f000 fa0f 	bl	d56c4 <system_thread_set_state>
   d52a6:	4829      	ldr	r0, [pc, #164]	; (d534c <_GLOBAL__sub_I_statsToolsAlloc+0xf4>)
std::vector<SensorConfig> sensors;
   d52a8:	4929      	ldr	r1, [pc, #164]	; (d5350 <_GLOBAL__sub_I_statsToolsAlloc+0xf8>)
   d52aa:	6084      	str	r4, [r0, #8]
   d52ac:	462a      	mov	r2, r5
   d52ae:	e9c0 4400 	strd	r4, r4, [r0]
   d52b2:	f002 f8a3 	bl	d73fc <__aeabi_atexit>
   d52b6:	4827      	ldr	r0, [pc, #156]	; (d5354 <_GLOBAL__sub_I_statsToolsAlloc+0xfc>)
FuelGauge fuelGauge;
   d52b8:	4f27      	ldr	r7, [pc, #156]	; (d5358 <_GLOBAL__sub_I_statsToolsAlloc+0x100>)
std::vector<SensorData> sensorBuffer; // put into retained memory?
   d52ba:	4928      	ldr	r1, [pc, #160]	; (d535c <_GLOBAL__sub_I_statsToolsAlloc+0x104>)
   d52bc:	6084      	str	r4, [r0, #8]
   d52be:	462a      	mov	r2, r5
   d52c0:	e9c0 4400 	strd	r4, r4, [r0]
   d52c4:	f002 f89a 	bl	d73fc <__aeabi_atexit>
FuelGauge fuelGauge;
   d52c8:	4621      	mov	r1, r4
   d52ca:	4638      	mov	r0, r7
   d52cc:	f001 f8b2 	bl	d6434 <_ZN9FuelGaugeC1Eb>
   d52d0:	4638      	mov	r0, r7
String unitName = "UMemphis_BRN9A";
   d52d2:	4f23      	ldr	r7, [pc, #140]	; (d5360 <_GLOBAL__sub_I_statsToolsAlloc+0x108>)
FuelGauge fuelGauge;
   d52d4:	4923      	ldr	r1, [pc, #140]	; (d5364 <_GLOBAL__sub_I_statsToolsAlloc+0x10c>)
   d52d6:	462a      	mov	r2, r5
   d52d8:	f002 f890 	bl	d73fc <__aeabi_atexit>
String unitName = "UMemphis_BRN9A";
   d52dc:	4922      	ldr	r1, [pc, #136]	; (d5368 <_GLOBAL__sub_I_statsToolsAlloc+0x110>)
   d52de:	4638      	mov	r0, r7
   d52e0:	f000 fdd1 	bl	d5e86 <_ZN6StringC1EPKc>
   d52e4:	462a      	mov	r2, r5
   d52e6:	4921      	ldr	r1, [pc, #132]	; (d536c <_GLOBAL__sub_I_statsToolsAlloc+0x114>)
   d52e8:	4638      	mov	r0, r7
   d52ea:	f002 f887 	bl	d73fc <__aeabi_atexit>
        : config_(config) {
   d52ee:	4820      	ldr	r0, [pc, #128]	; (d5370 <_GLOBAL__sub_I_statsToolsAlloc+0x118>)
SystemSleepConfiguration config; 
   d52f0:	4920      	ldr	r1, [pc, #128]	; (d5374 <_GLOBAL__sub_I_statsToolsAlloc+0x11c>)
              valid_(true) {
   d52f2:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d52f6:	4603      	mov	r3, r0
   d52f8:	1d02      	adds	r2, r0, #4
   d52fa:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d52fe:	7506      	strb	r6, [r0, #20]
   d5300:	709c      	strb	r4, [r3, #2]
PMIC pmic;
   d5302:	4e1d      	ldr	r6, [pc, #116]	; (d5378 <_GLOBAL__sub_I_statsToolsAlloc+0x120>)
        config_.size = sizeof(hal_sleep_config_t);
   d5304:	4b1d      	ldr	r3, [pc, #116]	; (d537c <_GLOBAL__sub_I_statsToolsAlloc+0x124>)
   d5306:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config; 
   d5308:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d530a:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d530e:	7204      	strb	r4, [r0, #8]
   d5310:	f002 f874 	bl	d73fc <__aeabi_atexit>
PMIC pmic;
   d5314:	4621      	mov	r1, r4
   d5316:	4630      	mov	r0, r6
   d5318:	f000 fb01 	bl	d591e <_ZN4PMICC1Eb>
   d531c:	462a      	mov	r2, r5
   d531e:	4630      	mov	r0, r6
   d5320:	4917      	ldr	r1, [pc, #92]	; (d5380 <_GLOBAL__sub_I_statsToolsAlloc+0x128>)
   d5322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PMIC pmic;
   d5326:	f002 b869 	b.w	d73fc <__aeabi_atexit>
   d532a:	bf00      	nop
   d532c:	2003e4a0 	.word	0x2003e4a0
   d5330:	2003e490 	.word	0x2003e490
   d5334:	2003e494 	.word	0x2003e494
   d5338:	2003e4a1 	.word	0x2003e4a1
   d533c:	2003e4a4 	.word	0x2003e4a4
   d5340:	000d4313 	.word	0x000d4313
   d5344:	ffff0000 	.word	0xffff0000
   d5348:	000d42cd 	.word	0x000d42cd
   d534c:	2003e4e4 	.word	0x2003e4e4
   d5350:	000d4303 	.word	0x000d4303
   d5354:	2003e4d8 	.word	0x2003e4d8
   d5358:	2003e4cc 	.word	0x2003e4cc
   d535c:	000d42d9 	.word	0x000d42d9
   d5360:	2003e5b8 	.word	0x2003e5b8
   d5364:	000d6455 	.word	0x000d6455
   d5368:	000d835d 	.word	0x000d835d
   d536c:	000d5df1 	.word	0x000d5df1
   d5370:	2003e4b4 	.word	0x2003e4b4
   d5374:	000d429d 	.word	0x000d429d
   d5378:	2003e4d4 	.word	0x2003e4d4
   d537c:	00030010 	.word	0x00030010
   d5380:	000d595d 	.word	0x000d595d

000d5384 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <netdb_freeaddrinfo+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	689b      	ldr	r3, [r3, #8]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	00030268 	.word	0x00030268

000d5394 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <netdb_getaddrinfo+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	68db      	ldr	r3, [r3, #12]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030268 	.word	0x00030268

000d53a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <HAL_Validate_Pin_Function+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	685b      	ldr	r3, [r3, #4]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	0003022c 	.word	0x0003022c

000d53b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <HAL_Pin_Mode+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	689b      	ldr	r3, [r3, #8]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003022c 	.word	0x0003022c

000d53c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <HAL_Get_Pin_Mode+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	68db      	ldr	r3, [r3, #12]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003022c 	.word	0x0003022c

000d53d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <HAL_GPIO_Write+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	691b      	ldr	r3, [r3, #16]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003022c 	.word	0x0003022c

000d53e4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <hal_adc_read+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003022c 	.word	0x0003022c

000d53f4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <HAL_Pulse_In+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	0003022c 	.word	0x0003022c

000d5404 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <HAL_RNG_GetRandomNumber+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	685b      	ldr	r3, [r3, #4]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030218 	.word	0x00030218

000d5414 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <HAL_Delay_Microseconds+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	68db      	ldr	r3, [r3, #12]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030218 	.word	0x00030218

000d5424 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	695b      	ldr	r3, [r3, #20]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030218 	.word	0x00030218

000d5434 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <hal_rtc_time_is_valid+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030218 	.word	0x00030218

000d5444 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <hal_rtc_get_time+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030218 	.word	0x00030218

000d5454 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_Feature_Set+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030234 	.word	0x00030234

000d5464 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <os_mutex_recursive_create+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030248 	.word	0x00030248

000d5474 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <os_mutex_recursive_destroy+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030248 	.word	0x00030248

000d5484 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <inet_inet_ntop+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	695b      	ldr	r3, [r3, #20]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030264 	.word	0x00030264

000d5494 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <hal_usart_init+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	681b      	ldr	r3, [r3, #0]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003023c 	.word	0x0003023c

000d54a4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <hal_usart_write+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	68db      	ldr	r3, [r3, #12]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003023c 	.word	0x0003023c

000d54b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <hal_usart_available+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	691b      	ldr	r3, [r3, #16]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	0003023c 	.word	0x0003023c

000d54c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <hal_usart_read+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	695b      	ldr	r3, [r3, #20]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	0003023c 	.word	0x0003023c

000d54d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <hal_usart_peek+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	699b      	ldr	r3, [r3, #24]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	0003023c 	.word	0x0003023c

000d54e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <hal_usart_flush+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	69db      	ldr	r3, [r3, #28]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	0003023c 	.word	0x0003023c

000d54f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <hal_usart_is_enabled+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6a1b      	ldr	r3, [r3, #32]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	0003023c 	.word	0x0003023c

000d5504 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <hal_usart_available_data_for_write+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	0003023c 	.word	0x0003023c

000d5514 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <hal_usart_begin_config+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003023c 	.word	0x0003023c

000d5524 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <hal_i2c_begin+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	68db      	ldr	r3, [r3, #12]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030228 	.word	0x00030228

000d5534 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <hal_i2c_begin_transmission+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	699b      	ldr	r3, [r3, #24]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030228 	.word	0x00030228

000d5544 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <hal_i2c_end_transmission+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	69db      	ldr	r3, [r3, #28]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030228 	.word	0x00030228

000d5554 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <hal_i2c_write+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6a1b      	ldr	r3, [r3, #32]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030228 	.word	0x00030228

000d5564 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <hal_i2c_available+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030228 	.word	0x00030228

000d5574 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <hal_i2c_read+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030228 	.word	0x00030228

000d5584 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <hal_i2c_peek+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030228 	.word	0x00030228

000d5594 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <hal_i2c_flush+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030228 	.word	0x00030228

000d55a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <hal_i2c_is_enabled+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030228 	.word	0x00030228

000d55b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <hal_i2c_init+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030228 	.word	0x00030228

000d55c4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <hal_i2c_lock+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030228 	.word	0x00030228

000d55d4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <hal_i2c_unlock+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030228 	.word	0x00030228

000d55e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <hal_i2c_request_ex+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030228 	.word	0x00030228

000d55f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <hal_spi_init+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	69db      	ldr	r3, [r3, #28]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030230 	.word	0x00030230

000d5604 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <hal_spi_is_enabled+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6a1b      	ldr	r3, [r3, #32]
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030230 	.word	0x00030230

000d5614 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_USB_USART_Init+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	681b      	ldr	r3, [r3, #0]
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	0003024c 	.word	0x0003024c

000d5624 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_USB_USART_Begin+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	685b      	ldr	r3, [r3, #4]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	0003024c 	.word	0x0003024c

000d5634 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_USB_USART_Available_Data+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	691b      	ldr	r3, [r3, #16]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	0003024c 	.word	0x0003024c

000d5644 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	695b      	ldr	r3, [r3, #20]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	0003024c 	.word	0x0003024c

000d5654 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_USB_USART_Receive_Data+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	699b      	ldr	r3, [r3, #24]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	0003024c 	.word	0x0003024c

000d5664 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_USB_USART_Send_Data+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	69db      	ldr	r3, [r3, #28]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	0003024c 	.word	0x0003024c

000d5674 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_USB_USART_Flush_Data+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6a1b      	ldr	r3, [r3, #32]
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	0003024c 	.word	0x0003024c

000d5684 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <log_message+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030260 	.word	0x00030260

000d5694 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <system_mode+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	681b      	ldr	r3, [r3, #0]
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030220 	.word	0x00030220

000d56a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <set_system_mode+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	685b      	ldr	r3, [r3, #4]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030220 	.word	0x00030220

000d56b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <system_delay_ms+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	695b      	ldr	r3, [r3, #20]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030220 	.word	0x00030220

000d56c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <system_thread_set_state+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030220 	.word	0x00030220

000d56d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <application_thread_current+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030220 	.word	0x00030220

000d56e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <application_thread_invoke+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030220 	.word	0x00030220

000d56f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <system_thread_get_state+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030220 	.word	0x00030220

000d5704 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b03      	ldr	r3, [pc, #12]	; (d5714 <system_ctrl_set_app_request_handler+0x10>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d570e:	9301      	str	r3, [sp, #4]
   d5710:	bd08      	pop	{r3, pc}
   d5712:	0000      	.short	0x0000
   d5714:	00030220 	.word	0x00030220

000d5718 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b03      	ldr	r3, [pc, #12]	; (d5728 <system_ctrl_set_result+0x10>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5722:	9301      	str	r3, [sp, #4]
   d5724:	bd08      	pop	{r3, pc}
   d5726:	0000      	.short	0x0000
   d5728:	00030220 	.word	0x00030220

000d572c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b03      	ldr	r3, [pc, #12]	; (d573c <system_sleep_ext+0x10>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d5736:	9301      	str	r3, [sp, #4]
   d5738:	bd08      	pop	{r3, pc}
   d573a:	0000      	.short	0x0000
   d573c:	00030220 	.word	0x00030220

000d5740 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <network_connect+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	685b      	ldr	r3, [r3, #4]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030240 	.word	0x00030240

000d5750 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <network_connecting+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	689b      	ldr	r3, [r3, #8]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030240 	.word	0x00030240

000d5760 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <network_disconnect+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	68db      	ldr	r3, [r3, #12]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030240 	.word	0x00030240

000d5770 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <network_ready+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	691b      	ldr	r3, [r3, #16]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030240 	.word	0x00030240

000d5780 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <network_on+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	695b      	ldr	r3, [r3, #20]
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030240 	.word	0x00030240

000d5790 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <network_off+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	699b      	ldr	r3, [r3, #24]
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030240 	.word	0x00030240

000d57a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <network_listen+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	69db      	ldr	r3, [r3, #28]
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030240 	.word	0x00030240

000d57b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <network_listening+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	6a1b      	ldr	r3, [r3, #32]
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030240 	.word	0x00030240

000d57c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <network_set_listen_timeout+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030240 	.word	0x00030240

000d57d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <network_get_listen_timeout+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030240 	.word	0x00030240

000d57e0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <network_is_on+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030240 	.word	0x00030240

000d57f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <network_is_off+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030240 	.word	0x00030240

000d5800 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <spark_process+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	689b      	ldr	r3, [r3, #8]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030244 	.word	0x00030244

000d5810 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <spark_cloud_flag_connect+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	68db      	ldr	r3, [r3, #12]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030244 	.word	0x00030244

000d5820 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <spark_cloud_flag_connected+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	695b      	ldr	r3, [r3, #20]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030244 	.word	0x00030244

000d5830 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <spark_send_event+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6a1b      	ldr	r3, [r3, #32]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030244 	.word	0x00030244

000d5840 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <spark_sync_time+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030244 	.word	0x00030244

000d5850 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <spark_sync_time_pending+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030244 	.word	0x00030244

000d5860 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <spark_set_connection_property+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030244 	.word	0x00030244

000d5870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030244 	.word	0x00030244

000d5880 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <spark_cloud_disconnect+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030244 	.word	0x00030244

000d5890 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <malloc+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	681b      	ldr	r3, [r3, #0]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	0003021c 	.word	0x0003021c

000d58a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <free+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	685b      	ldr	r3, [r3, #4]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	0003021c 	.word	0x0003021c

000d58b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <realloc+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	689b      	ldr	r3, [r3, #8]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	0003021c 	.word	0x0003021c

000d58c0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <vsnprintf+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	0003021c 	.word	0x0003021c

000d58d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <abort+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003021c 	.word	0x0003021c

000d58e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <_malloc_r+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003021c 	.word	0x0003021c

000d58f0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <newlib_impure_ptr_callback+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003021c 	.word	0x0003021c

000d5900 <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <localtime_r+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003021c 	.word	0x0003021c

000d5910 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d5910:	b508      	push	{r3, lr}
            return &Wire1;
   d5912:	f001 fd4b 	bl	d73ac <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d5916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d591a:	f001 bbac 	b.w	d7076 <_ZN7TwoWire4lockEv>

000d591e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d591e:	b510      	push	{r4, lr}
   d5920:	4604      	mov	r4, r0
    lock_(_lock)
   d5922:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d5924:	b109      	cbz	r1, d592a <_ZN4PMICC1Eb+0xc>
        lock();
   d5926:	f7ff fff3 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
}
   d592a:	4620      	mov	r0, r4
   d592c:	bd10      	pop	{r4, pc}

000d592e <_ZN4PMIC5beginEv>:
{
   d592e:	b508      	push	{r3, lr}
            return &Wire1;
   d5930:	f001 fd3c 	bl	d73ac <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d5934:	f001 fb9b 	bl	d706e <_ZN7TwoWire9isEnabledEv>
   d5938:	b918      	cbnz	r0, d5942 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d593a:	f001 fd37 	bl	d73ac <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d593e:	f001 fb5d 	bl	d6ffc <_ZN7TwoWire5beginEv>
            return &Wire1;
   d5942:	f001 fd33 	bl	d73ac <_Z20__fetch_global_Wire1v>
}
   d5946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d594a:	f001 bb90 	b.w	d706e <_ZN7TwoWire9isEnabledEv>

000d594e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d594e:	b508      	push	{r3, lr}
            return &Wire1;
   d5950:	f001 fd2c 	bl	d73ac <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d5954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d5958:	f001 bb96 	b.w	d7088 <_ZN7TwoWire6unlockEv>

000d595c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d595c:	b510      	push	{r4, lr}
    if (lock_) {
   d595e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d5960:	4604      	mov	r4, r0
    if (lock_) {
   d5962:	b10b      	cbz	r3, d5968 <_ZN4PMICD1Ev+0xc>
        unlock();
   d5964:	f7ff fff3 	bl	d594e <_ZN4PMIC6unlockEv>
}
   d5968:	4620      	mov	r0, r4
   d596a:	bd10      	pop	{r4, pc}

000d596c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d596c:	b510      	push	{r4, lr}
   d596e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5970:	6800      	ldr	r0, [r0, #0]
   d5972:	f7ff ffec 	bl	d594e <_ZN4PMIC6unlockEv>
   d5976:	4620      	mov	r0, r4
   d5978:	bd10      	pop	{r4, pc}

000d597a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d597a:	b530      	push	{r4, r5, lr}
   d597c:	b087      	sub	sp, #28
   d597e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5980:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5982:	f7ff ffc5 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5986:	236b      	movs	r3, #107	; 0x6b
   d5988:	f88d 3008 	strb.w	r3, [sp, #8]
   d598c:	2300      	movs	r3, #0
   d598e:	2401      	movs	r4, #1
   d5990:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d5992:	230a      	movs	r3, #10
   d5994:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5996:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d599a:	f001 fd07 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d599e:	a902      	add	r1, sp, #8
   d59a0:	f001 fb49 	bl	d7036 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d59a4:	f001 fd02 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d59a8:	6803      	ldr	r3, [r0, #0]
   d59aa:	4629      	mov	r1, r5
   d59ac:	689b      	ldr	r3, [r3, #8]
   d59ae:	4798      	blx	r3
            return &Wire1;
   d59b0:	f001 fcfc 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d59b4:	4621      	mov	r1, r4
   d59b6:	f001 fb56 	bl	d7066 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d59ba:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d59bc:	f001 fcf6 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d59c0:	a902      	add	r1, sp, #8
   d59c2:	f001 fb21 	bl	d7008 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d59c6:	f001 fcf1 	bl	d73ac <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d59ca:	6803      	ldr	r3, [r0, #0]
   d59cc:	695b      	ldr	r3, [r3, #20]
   d59ce:	4798      	blx	r3
   d59d0:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d59d2:	a801      	add	r0, sp, #4
   d59d4:	f7ff ffca 	bl	d596c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d59d8:	b2e0      	uxtb	r0, r4
   d59da:	b007      	add	sp, #28
   d59dc:	bd30      	pop	{r4, r5, pc}

000d59de <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
   d59de:	2109      	movs	r1, #9
   d59e0:	f7ff bfcb 	b.w	d597a <_ZN4PMIC12readRegisterEh>

000d59e4 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d59e4:	b570      	push	{r4, r5, r6, lr}
   d59e6:	b086      	sub	sp, #24
   d59e8:	4614      	mov	r4, r2
   d59ea:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d59ec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d59ee:	f7ff ff8f 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d59f2:	236b      	movs	r3, #107	; 0x6b
   d59f4:	f88d 3008 	strb.w	r3, [sp, #8]
   d59f8:	2300      	movs	r3, #0
   d59fa:	9303      	str	r3, [sp, #12]
   d59fc:	2601      	movs	r6, #1
    timeout_ = ms;
   d59fe:	230a      	movs	r3, #10
   d5a00:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5a02:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d5a06:	f001 fcd1 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d5a0a:	a902      	add	r1, sp, #8
   d5a0c:	f001 fb13 	bl	d7036 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d5a10:	f001 fccc 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d5a14:	6803      	ldr	r3, [r0, #0]
   d5a16:	4629      	mov	r1, r5
   d5a18:	689b      	ldr	r3, [r3, #8]
   d5a1a:	4798      	blx	r3
            return &Wire1;
   d5a1c:	f001 fcc6 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d5a20:	6803      	ldr	r3, [r0, #0]
   d5a22:	4621      	mov	r1, r4
   d5a24:	689b      	ldr	r3, [r3, #8]
   d5a26:	4798      	blx	r3
            return &Wire1;
   d5a28:	f001 fcc0 	bl	d73ac <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d5a2c:	4631      	mov	r1, r6
   d5a2e:	f001 fb1a 	bl	d7066 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d5a32:	a801      	add	r0, sp, #4
   d5a34:	f7ff ff9a 	bl	d596c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d5a38:	b006      	add	sp, #24
   d5a3a:	bd70      	pop	{r4, r5, r6, pc}

000d5a3c <_ZN4PMIC20setInputVoltageLimitEt>:
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d5a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5a3e:	4604      	mov	r4, r0
   d5a40:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a42:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a44:	f7ff ff64 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d5a48:	2100      	movs	r1, #0
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	f7ff ff95 	bl	d597a <_ZN4PMIC12readRegisterEh>
    switch(voltage) {
   d5a50:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d5a54:	429d      	cmp	r5, r3
    byte mask = DATA & 0b10000111;
   d5a56:	f000 0287 	and.w	r2, r0, #135	; 0x87
    switch(voltage) {
   d5a5a:	d066      	beq.n	d5b2a <_ZN4PMIC20setInputVoltageLimitEt+0xee>
   d5a5c:	d82e      	bhi.n	d5abc <_ZN4PMIC20setInputVoltageLimitEt+0x80>
   d5a5e:	f241 0368 	movw	r3, #4200	; 0x1068
   d5a62:	429d      	cmp	r5, r3
   d5a64:	d058      	beq.n	d5b18 <_ZN4PMIC20setInputVoltageLimitEt+0xdc>
   d5a66:	d81a      	bhi.n	d5a9e <_ZN4PMIC20setInputVoltageLimitEt+0x62>
   d5a68:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d5a6c:	429d      	cmp	r5, r3
   d5a6e:	d050      	beq.n	d5b12 <_ZN4PMIC20setInputVoltageLimitEt+0xd6>
   d5a70:	d80e      	bhi.n	d5a90 <_ZN4PMIC20setInputVoltageLimitEt+0x54>
   d5a72:	f640 7328 	movw	r3, #3880	; 0xf28
   d5a76:	429d      	cmp	r5, r3
   d5a78:	d045      	beq.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
   d5a7a:	f640 7378 	movw	r3, #3960	; 0xf78
   d5a7e:	429d      	cmp	r5, r3
   d5a80:	d03f      	beq.n	d5b02 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d5a82:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
   d5a84:	a801      	add	r0, sp, #4
   d5a86:	f7ff ff71 	bl	d596c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	b003      	add	sp, #12
   d5a8e:	bd30      	pop	{r4, r5, pc}
    switch(voltage) {
   d5a90:	f241 0318 	movw	r3, #4120	; 0x1018
   d5a94:	429d      	cmp	r5, r3
   d5a96:	d1f4      	bne.n	d5a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d5a98:	f042 0218 	orr.w	r2, r2, #24
   d5a9c:	e033      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
    switch(voltage) {
   d5a9e:	f241 1308 	movw	r3, #4360	; 0x1108
   d5aa2:	429d      	cmp	r5, r3
   d5aa4:	d03b      	beq.n	d5b1e <_ZN4PMIC20setInputVoltageLimitEt+0xe2>
   d5aa6:	f241 1358 	movw	r3, #4440	; 0x1158
   d5aaa:	429d      	cmp	r5, r3
   d5aac:	d03a      	beq.n	d5b24 <_ZN4PMIC20setInputVoltageLimitEt+0xe8>
   d5aae:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d5ab2:	429d      	cmp	r5, r3
   d5ab4:	d1e5      	bne.n	d5a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d5ab6:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d5aba:	e024      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
    switch(voltage) {
   d5abc:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d5ac0:	429d      	cmp	r5, r3
   d5ac2:	d03b      	beq.n	d5b3c <_ZN4PMIC20setInputVoltageLimitEt+0x100>
   d5ac4:	d80e      	bhi.n	d5ae4 <_ZN4PMIC20setInputVoltageLimitEt+0xa8>
   d5ac6:	f241 2348 	movw	r3, #4680	; 0x1248
   d5aca:	429d      	cmp	r5, r3
   d5acc:	d030      	beq.n	d5b30 <_ZN4PMIC20setInputVoltageLimitEt+0xf4>
   d5ace:	f241 2398 	movw	r3, #4760	; 0x1298
   d5ad2:	429d      	cmp	r5, r3
   d5ad4:	d02f      	beq.n	d5b36 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d5ad6:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d5ada:	429d      	cmp	r5, r3
   d5adc:	d1d1      	bne.n	d5a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d5ade:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d5ae2:	e010      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
    switch(voltage) {
   d5ae4:	f241 3388 	movw	r3, #5000	; 0x1388
   d5ae8:	429d      	cmp	r5, r3
   d5aea:	d02a      	beq.n	d5b42 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d5aec:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d5af0:	429d      	cmp	r5, r3
   d5af2:	d029      	beq.n	d5b48 <_ZN4PMIC20setInputVoltageLimitEt+0x10c>
   d5af4:	f241 3338 	movw	r3, #4920	; 0x1338
   d5af8:	429d      	cmp	r5, r3
   d5afa:	d1c2      	bne.n	d5a82 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d5afc:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d5b00:	e001      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d5b02:	f042 0208 	orr.w	r2, r2, #8
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d5b06:	4620      	mov	r0, r4
   d5b08:	2100      	movs	r1, #0
   d5b0a:	f7ff ff6b 	bl	d59e4 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
   d5b0e:	2401      	movs	r4, #1
        break;
   d5b10:	e7b8      	b.n	d5a84 <_ZN4PMIC20setInputVoltageLimitEt+0x48>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d5b12:	f042 0210 	orr.w	r2, r2, #16
   d5b16:	e7f6      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d5b18:	f042 0220 	orr.w	r2, r2, #32
   d5b1c:	e7f3      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d5b1e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d5b22:	e7f0      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d5b24:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d5b28:	e7ed      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d5b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d5b2e:	e7ea      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d5b30:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d5b34:	e7e7      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d5b36:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d5b3a:	e7e4      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d5b3c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d5b40:	e7e1      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d5b42:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d5b46:	e7de      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d5b48:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d5b4c:	e7db      	b.n	d5b06 <_ZN4PMIC20setInputVoltageLimitEt+0xca>

000d5b4e <_ZN4PMIC10enableBuckEv>:
bool PMIC::enableBuck(void) {
   d5b4e:	b513      	push	{r0, r1, r4, lr}
   d5b50:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b52:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5b54:	f7ff fedc 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d5b58:	2100      	movs	r1, #0
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	f7ff ff0d 	bl	d597a <_ZN4PMIC12readRegisterEh>
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
   d5b60:	2100      	movs	r1, #0
   d5b62:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5b66:	4620      	mov	r0, r4
   d5b68:	f7ff ff3c 	bl	d59e4 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d5b6c:	a801      	add	r0, sp, #4
   d5b6e:	f7ff fefd 	bl	d596c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d5b72:	2001      	movs	r0, #1
   d5b74:	b002      	add	sp, #8
   d5b76:	bd10      	pop	{r4, pc}

000d5b78 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d5b78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5b7c:	460c      	mov	r4, r1
   d5b7e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5b82:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d5b86:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b8a:	9001      	str	r0, [sp, #4]
   d5b8c:	4605      	mov	r5, r0
   d5b8e:	4617      	mov	r7, r2
   d5b90:	461e      	mov	r6, r3
      { _M_device.lock(); }
   d5b92:	f7ff febd 	bl	d5910 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
   d5b96:	2c00      	cmp	r4, #0
   d5b98:	bf0c      	ite	eq
   d5b9a:	2400      	moveq	r4, #0
   d5b9c:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d5b9e:	b10f      	cbz	r7, d5ba4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
   d5ba0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
   d5ba4:	b10e      	cbz	r6, d5baa <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
   d5ba6:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d5baa:	f1ba 0f00 	cmp.w	sl, #0
   d5bae:	d001      	beq.n	d5bb4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
   d5bb0:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d5bb4:	f1b9 0f00 	cmp.w	r9, #0
   d5bb8:	d001      	beq.n	d5bbe <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
   d5bba:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d5bbe:	f1b8 0f00 	cmp.w	r8, #0
   d5bc2:	d001      	beq.n	d5bc8 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
   d5bc4:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d5bc8:	2102      	movs	r1, #2
   d5bca:	4628      	mov	r0, r5
   d5bcc:	f7ff fed5 	bl	d597a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
   d5bd0:	f000 0001 	and.w	r0, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d5bd4:	ea44 0200 	orr.w	r2, r4, r0
   d5bd8:	2102      	movs	r1, #2
   d5bda:	4628      	mov	r0, r5
   d5bdc:	f7ff ff02 	bl	d59e4 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d5be0:	a801      	add	r0, sp, #4
   d5be2:	f7ff fec3 	bl	d596c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d5be6:	2001      	movs	r0, #1
   d5be8:	b002      	add	sp, #8
   d5bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5bee <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bee:	2200      	movs	r2, #0
   d5bf0:	6840      	ldr	r0, [r0, #4]
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	f7ff bddc 	b.w	d57b0 <network_listening>

000d5bf8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	6840      	ldr	r0, [r0, #4]
   d5bfc:	4611      	mov	r1, r2
   d5bfe:	f7ff bde7 	b.w	d57d0 <network_get_listen_timeout>

000d5c02 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5c02:	6840      	ldr	r0, [r0, #4]
   d5c04:	2200      	movs	r2, #0
   d5c06:	f7ff bddb 	b.w	d57c0 <network_set_listen_timeout>

000d5c0a <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c0a:	6840      	ldr	r0, [r0, #4]
   d5c0c:	2200      	movs	r2, #0
   d5c0e:	f081 0101 	eor.w	r1, r1, #1
   d5c12:	f7ff bdc5 	b.w	d57a0 <network_listen>

000d5c16 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c16:	2300      	movs	r3, #0
   d5c18:	6840      	ldr	r0, [r0, #4]
   d5c1a:	461a      	mov	r2, r3
   d5c1c:	4619      	mov	r1, r3
   d5c1e:	f7ff bdb7 	b.w	d5790 <network_off>

000d5c22 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5c22:	2300      	movs	r3, #0
   d5c24:	6840      	ldr	r0, [r0, #4]
   d5c26:	461a      	mov	r2, r3
   d5c28:	4619      	mov	r1, r3
   d5c2a:	f7ff bda9 	b.w	d5780 <network_on>

000d5c2e <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c2e:	2200      	movs	r2, #0
   d5c30:	6840      	ldr	r0, [r0, #4]
   d5c32:	4611      	mov	r1, r2
   d5c34:	f7ff bd9c 	b.w	d5770 <network_ready>

000d5c38 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5c38:	2200      	movs	r2, #0
   d5c3a:	6840      	ldr	r0, [r0, #4]
   d5c3c:	4611      	mov	r1, r2
   d5c3e:	f7ff bd87 	b.w	d5750 <network_connecting>

000d5c42 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c42:	6840      	ldr	r0, [r0, #4]
   d5c44:	2200      	movs	r2, #0
   d5c46:	2102      	movs	r1, #2
   d5c48:	f7ff bd8a 	b.w	d5760 <network_disconnect>

000d5c4c <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	461a      	mov	r2, r3
   d5c52:	f7ff bd75 	b.w	d5740 <network_connect>
	...

000d5c58 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5c58:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5c5a:	2203      	movs	r2, #3
   d5c5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5c5e:	4a02      	ldr	r2, [pc, #8]	; (d5c68 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5c60:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5c62:	4770      	bx	lr
   d5c64:	2003e5c8 	.word	0x2003e5c8
   d5c68:	000d83b4 	.word	0x000d83b4

000d5c6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5c6c:	b510      	push	{r4, lr}
   d5c6e:	4604      	mov	r4, r0
   d5c70:	4608      	mov	r0, r1
{
    _spi = spi;
   d5c72:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5c74:	f7ff fcbe 	bl	d55f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5c78:	2300      	movs	r3, #0
   d5c7a:	6063      	str	r3, [r4, #4]
}
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	bd10      	pop	{r4, pc}

000d5c80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5c80:	b510      	push	{r4, lr}
   d5c82:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5c84:	6800      	ldr	r0, [r0, #0]
   d5c86:	b118      	cbz	r0, d5c90 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5c88:	f7ff fe0a 	bl	d58a0 <free>
            wakeupSource_ = nullptr;
   d5c8c:	2300      	movs	r3, #0
   d5c8e:	6023      	str	r3, [r4, #0]
        }
    }
   d5c90:	bd10      	pop	{r4, pc}

000d5c92 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5c92:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5c94:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5c98:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5c9a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5c9c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d5c9e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5ca2:	f8c0 2006 	str.w	r2, [r0, #6]
   d5ca6:	889b      	ldrh	r3, [r3, #4]
   d5ca8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5caa:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5cac:	f7ff ffe8 	bl	d5c80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5cb0:	682b      	ldr	r3, [r5, #0]
   d5cb2:	b113      	cbz	r3, d5cba <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5cb4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5cb6:	2300      	movs	r3, #0
   d5cb8:	602b      	str	r3, [r5, #0]
    }
   d5cba:	4620      	mov	r0, r4
   d5cbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5cc0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5cc0:	b538      	push	{r3, r4, r5, lr}
   d5cc2:	460c      	mov	r4, r1
   d5cc4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5cc6:	f7ff ffdb 	bl	d5c80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d5cca:	b144      	cbz	r4, d5cde <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5ccc:	8820      	ldrh	r0, [r4, #0]
   d5cce:	f7ff fddf 	bl	d5890 <malloc>
   d5cd2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5cd4:	b128      	cbz	r0, d5ce2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5cd6:	8822      	ldrh	r2, [r4, #0]
   d5cd8:	4621      	mov	r1, r4
   d5cda:	f002 f969 	bl	d7fb0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d5cde:	2000      	movs	r0, #0
    }
   d5ce0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d5ce2:	4801      	ldr	r0, [pc, #4]	; (d5ce8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5ce4:	e7fc      	b.n	d5ce0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d5ce6:	bf00      	nop
   d5ce8:	fffffefc 	.word	0xfffffefc

000d5cec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5cec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cee:	4d2d      	ldr	r5, [pc, #180]	; (d5da4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5cf0:	7d0b      	ldrb	r3, [r1, #20]
   d5cf2:	4604      	mov	r4, r0
   d5cf4:	b08b      	sub	sp, #44	; 0x2c
   d5cf6:	4608      	mov	r0, r1
   d5cf8:	1daf      	adds	r7, r5, #6
   d5cfa:	2b00      	cmp	r3, #0
   d5cfc:	d038      	beq.n	d5d70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d5cfe:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5d00:	791b      	ldrb	r3, [r3, #4]
   d5d02:	2b00      	cmp	r3, #0
   d5d04:	d034      	beq.n	d5d70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d5d06:	2200      	movs	r2, #0
    SleepResult() {}
   d5d08:	4b27      	ldr	r3, [pc, #156]	; (d5da8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5d0a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5d0c:	a902      	add	r1, sp, #8
   d5d0e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d5d10:	9202      	str	r2, [sp, #8]
   d5d12:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d5d16:	f88d 200e 	strb.w	r2, [sp, #14]
   d5d1a:	f7ff fd07 	bl	d572c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5d1e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5d22:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d5d26:	b200      	sxth	r0, r0
   d5d28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5d2c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5d30:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d32:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5d34:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d36:	4628      	mov	r0, r5
   d5d38:	f7ff ffc2 	bl	d5cc0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5d3c:	a802      	add	r0, sp, #8
   d5d3e:	f7ff ff9f 	bl	d5c80 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5d42:	2300      	movs	r3, #0
   d5d44:	6023      	str	r3, [r4, #0]
   d5d46:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d5d48:	71a3      	strb	r3, [r4, #6]
   d5d4a:	8123      	strh	r3, [r4, #8]
   d5d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d50:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d5d52:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5d56:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5d58:	683b      	ldr	r3, [r7, #0]
   d5d5a:	f8c4 3006 	str.w	r3, [r4, #6]
   d5d5e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d60:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d5d62:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5d64:	4620      	mov	r0, r4
   d5d66:	f7ff ffab 	bl	d5cc0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	b00b      	add	sp, #44	; 0x2c
   d5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d5d70:	2600      	movs	r6, #0
   d5d72:	2320      	movs	r3, #32
   d5d74:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d5d78:	4b0c      	ldr	r3, [pc, #48]	; (d5dac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d5d7a:	9300      	str	r3, [sp, #0]
   d5d7c:	490c      	ldr	r1, [pc, #48]	; (d5db0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d5d7e:	4633      	mov	r3, r6
   d5d80:	aa02      	add	r2, sp, #8
   d5d82:	2032      	movs	r0, #50	; 0x32
   d5d84:	f7ff fc7e 	bl	d5684 <log_message>
    SleepResult() {}
   d5d88:	4b07      	ldr	r3, [pc, #28]	; (d5da8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5d8a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5d8c:	a902      	add	r1, sp, #8
        error_ = error;
   d5d8e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5d92:	4804      	ldr	r0, [pc, #16]	; (d5da4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5d94:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d5d96:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d5d9a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5d9e:	f7ff ff78 	bl	d5c92 <_ZN17SystemSleepResultaSEOS_>
   d5da2:	e7cb      	b.n	d5d3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5da4:	2003e5d0 	.word	0x2003e5d0
   d5da8:	ffff0000 	.word	0xffff0000
   d5dac:	000d83ef 	.word	0x000d83ef
   d5db0:	000d83e8 	.word	0x000d83e8

000d5db4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5db4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5db6:	4b09      	ldr	r3, [pc, #36]	; (d5ddc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5db8:	4c09      	ldr	r4, [pc, #36]	; (d5de0 <_GLOBAL__sub_I_System+0x2c>)
   d5dba:	2202      	movs	r2, #2
   d5dbc:	2000      	movs	r0, #0
   d5dbe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5dc0:	4b08      	ldr	r3, [pc, #32]	; (d5de4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5dc2:	6020      	str	r0, [r4, #0]
   d5dc4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5dc6:	71a0      	strb	r0, [r4, #6]
   d5dc8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dca:	f7ff fc6b 	bl	d56a4 <set_system_mode>
SystemClass System;
   d5dce:	4620      	mov	r0, r4
   d5dd0:	4a05      	ldr	r2, [pc, #20]	; (d5de8 <_GLOBAL__sub_I_System+0x34>)
   d5dd2:	4906      	ldr	r1, [pc, #24]	; (d5dec <_GLOBAL__sub_I_System+0x38>)
   d5dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5dd8:	f001 bb10 	b.w	d73fc <__aeabi_atexit>
   d5ddc:	2003e5dc 	.word	0x2003e5dc
   d5de0:	2003e5d0 	.word	0x2003e5d0
   d5de4:	ffff0000 	.word	0xffff0000
   d5de8:	2003e490 	.word	0x2003e490
   d5dec:	000d42cd 	.word	0x000d42cd

000d5df0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5df0:	b510      	push	{r4, lr}
   d5df2:	4604      	mov	r4, r0
{
	free(buffer);
   d5df4:	6800      	ldr	r0, [r0, #0]
   d5df6:	f7ff fd53 	bl	d58a0 <free>
}
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	bd10      	pop	{r4, pc}

000d5dfe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5dfe:	b510      	push	{r4, lr}
   d5e00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e02:	6800      	ldr	r0, [r0, #0]
   d5e04:	b108      	cbz	r0, d5e0a <_ZN6String10invalidateEv+0xc>
   d5e06:	f7ff fd4b 	bl	d58a0 <free>
	buffer = NULL;
   d5e0a:	2300      	movs	r3, #0
	capacity = len = 0;
   d5e0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5e10:	6023      	str	r3, [r4, #0]
}
   d5e12:	bd10      	pop	{r4, pc}

000d5e14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e14:	b538      	push	{r3, r4, r5, lr}
   d5e16:	4604      	mov	r4, r0
   d5e18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e1a:	6800      	ldr	r0, [r0, #0]
   d5e1c:	3101      	adds	r1, #1
   d5e1e:	f7ff fd47 	bl	d58b0 <realloc>
	if (newbuffer) {
   d5e22:	b110      	cbz	r0, d5e2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e24:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5e28:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e2a:	bd38      	pop	{r3, r4, r5, pc}

000d5e2c <_ZN6String7reserveEj>:
{
   d5e2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e2e:	6803      	ldr	r3, [r0, #0]
{
   d5e30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e32:	b123      	cbz	r3, d5e3e <_ZN6String7reserveEj+0x12>
   d5e34:	6843      	ldr	r3, [r0, #4]
   d5e36:	428b      	cmp	r3, r1
   d5e38:	d301      	bcc.n	d5e3e <_ZN6String7reserveEj+0x12>
   d5e3a:	2001      	movs	r0, #1
}
   d5e3c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5e3e:	4620      	mov	r0, r4
   d5e40:	f7ff ffe8 	bl	d5e14 <_ZN6String12changeBufferEj>
   d5e44:	2800      	cmp	r0, #0
   d5e46:	d0f9      	beq.n	d5e3c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5e48:	68a3      	ldr	r3, [r4, #8]
   d5e4a:	2b00      	cmp	r3, #0
   d5e4c:	d1f5      	bne.n	d5e3a <_ZN6String7reserveEj+0xe>
   d5e4e:	6822      	ldr	r2, [r4, #0]
   d5e50:	7013      	strb	r3, [r2, #0]
   d5e52:	e7f2      	b.n	d5e3a <_ZN6String7reserveEj+0xe>

000d5e54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e56:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5e58:	4611      	mov	r1, r2
   d5e5a:	9201      	str	r2, [sp, #4]
{
   d5e5c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5e5e:	f7ff ffe5 	bl	d5e2c <_ZN6String7reserveEj>
   d5e62:	9a01      	ldr	r2, [sp, #4]
   d5e64:	b928      	cbnz	r0, d5e72 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5e66:	4620      	mov	r0, r4
   d5e68:	f7ff ffc9 	bl	d5dfe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	b003      	add	sp, #12
   d5e70:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5e72:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5e74:	4629      	mov	r1, r5
   d5e76:	6820      	ldr	r0, [r4, #0]
   d5e78:	f002 f89a 	bl	d7fb0 <memcpy>
	buffer[len] = 0;
   d5e7c:	6822      	ldr	r2, [r4, #0]
   d5e7e:	68a3      	ldr	r3, [r4, #8]
   d5e80:	2100      	movs	r1, #0
   d5e82:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5e84:	e7f2      	b.n	d5e6c <_ZN6String4copyEPKcj+0x18>

000d5e86 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5e86:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5e88:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5e8a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5e8e:	4604      	mov	r4, r0
	len = 0;
   d5e90:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e92:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5e94:	b141      	cbz	r1, d5ea8 <_ZN6StringC1EPKc+0x22>
   d5e96:	4608      	mov	r0, r1
   d5e98:	9101      	str	r1, [sp, #4]
   d5e9a:	f002 f8fa 	bl	d8092 <strlen>
   d5e9e:	9901      	ldr	r1, [sp, #4]
   d5ea0:	4602      	mov	r2, r0
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	f7ff ffd6 	bl	d5e54 <_ZN6String4copyEPKcj>
}
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	b002      	add	sp, #8
   d5eac:	bd10      	pop	{r4, pc}

000d5eae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5eae:	4288      	cmp	r0, r1
{
   d5eb0:	b510      	push	{r4, lr}
   d5eb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5eb4:	d005      	beq.n	d5ec2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5eb6:	680b      	ldr	r3, [r1, #0]
   d5eb8:	b12b      	cbz	r3, d5ec6 <_ZN6StringaSERKS_+0x18>
   d5eba:	688a      	ldr	r2, [r1, #8]
   d5ebc:	4619      	mov	r1, r3
   d5ebe:	f7ff ffc9 	bl	d5e54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	bd10      	pop	{r4, pc}
	else invalidate();
   d5ec6:	f7ff ff9a 	bl	d5dfe <_ZN6String10invalidateEv>
   d5eca:	e7fa      	b.n	d5ec2 <_ZN6StringaSERKS_+0x14>

000d5ecc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5ecc:	b510      	push	{r4, lr}
	buffer = NULL;
   d5ece:	2300      	movs	r3, #0
String::String(const String &value)
   d5ed0:	4604      	mov	r4, r0
	capacity = 0;
   d5ed2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5ed6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ed8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5eda:	f7ff ffe8 	bl	d5eae <_ZN6StringaSERKS_>
}
   d5ede:	4620      	mov	r0, r4
   d5ee0:	bd10      	pop	{r4, pc}

000d5ee2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5ee2:	b558      	push	{r3, r4, r6, lr}
   d5ee4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5ee6:	b12a      	cbz	r2, d5ef4 <_ZNK6String8getBytesEPhjj+0x12>
   d5ee8:	b121      	cbz	r1, d5ef4 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d5eea:	6884      	ldr	r4, [r0, #8]
   d5eec:	42a3      	cmp	r3, r4
   d5eee:	d302      	bcc.n	d5ef6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5ef0:	2300      	movs	r3, #0
   d5ef2:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d5ef4:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d5ef6:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d5ef8:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d5efa:	6801      	ldr	r1, [r0, #0]
   d5efc:	4294      	cmp	r4, r2
   d5efe:	bf28      	it	cs
   d5f00:	4614      	movcs	r4, r2
   d5f02:	4419      	add	r1, r3
   d5f04:	4622      	mov	r2, r4
   d5f06:	4630      	mov	r0, r6
   d5f08:	f002 f8cb 	bl	d80a2 <strncpy>
	buf[n] = 0;
   d5f0c:	2300      	movs	r3, #0
   d5f0e:	5533      	strb	r3, [r6, r4]
   d5f10:	e7f0      	b.n	d5ef4 <_ZNK6String8getBytesEPhjj+0x12>
	...

000d5f14 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5f14:	b40e      	push	{r1, r2, r3}
   d5f16:	b570      	push	{r4, r5, r6, lr}
   d5f18:	b087      	sub	sp, #28
   d5f1a:	ad0b      	add	r5, sp, #44	; 0x2c
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5f22:	9201      	str	r2, [sp, #4]
   d5f24:	462b      	mov	r3, r5
   d5f26:	2105      	movs	r1, #5
   d5f28:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d5f2a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5f2c:	f7ff fcc8 	bl	d58c0 <vsnprintf>
    va_end(marker);

    String result;
   d5f30:	490b      	ldr	r1, [pc, #44]	; (d5f60 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5f32:	4606      	mov	r6, r0
    String result;
   d5f34:	4620      	mov	r0, r4
   d5f36:	f7ff ffa6 	bl	d5e86 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d5f3a:	4631      	mov	r1, r6
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	f7ff ff75 	bl	d5e2c <_ZN6String7reserveEj>
    if (result.buffer) {
   d5f42:	6820      	ldr	r0, [r4, #0]
   d5f44:	b130      	cbz	r0, d5f54 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5f46:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d5f48:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5f4a:	462b      	mov	r3, r5
   d5f4c:	1c71      	adds	r1, r6, #1
   d5f4e:	f7ff fcb7 	bl	d58c0 <vsnprintf>
        va_end(marker);
        result.len = n;
   d5f52:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d5f54:	4620      	mov	r0, r4
   d5f56:	b007      	add	sp, #28
   d5f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f5c:	b003      	add	sp, #12
   d5f5e:	4770      	bx	lr
   d5f60:	000d85dd 	.word	0x000d85dd

000d5f64 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f64:	b510      	push	{r4, lr}
   d5f66:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f68:	6800      	ldr	r0, [r0, #0]
   d5f6a:	b108      	cbz	r0, d5f70 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f6c:	f7ff fa82 	bl	d5474 <os_mutex_recursive_destroy>
    }
   d5f70:	4620      	mov	r0, r4
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5f74:	680b      	ldr	r3, [r1, #0]
   d5f76:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5f78:	b113      	cbz	r3, d5f80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5f7a:	685a      	ldr	r2, [r3, #4]
   d5f7c:	3201      	adds	r2, #1
   d5f7e:	605a      	str	r2, [r3, #4]
      }
   d5f80:	4770      	bx	lr
	...

000d5f84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f84:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5f86:	4c06      	ldr	r4, [pc, #24]	; (d5fa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f88:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5f8a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5f8c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5f8e:	f7ff fa69 	bl	d5464 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5f92:	4620      	mov	r0, r4
   d5f94:	4a03      	ldr	r2, [pc, #12]	; (d5fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f96:	4904      	ldr	r1, [pc, #16]	; (d5fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5f9c:	f001 ba2e 	b.w	d73fc <__aeabi_atexit>
   d5fa0:	2003e5e0 	.word	0x2003e5e0
   d5fa4:	2003e490 	.word	0x2003e490
   d5fa8:	000d5f65 	.word	0x000d5f65

000d5fac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5fae:	4606      	mov	r6, r0
   d5fb0:	460d      	mov	r5, r1
  size_t n = 0;
   d5fb2:	188f      	adds	r7, r1, r2
   d5fb4:	2400      	movs	r4, #0
  while (size--) {
   d5fb6:	42bd      	cmp	r5, r7
   d5fb8:	d00c      	beq.n	d5fd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5fba:	6833      	ldr	r3, [r6, #0]
   d5fbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5fc0:	689b      	ldr	r3, [r3, #8]
   d5fc2:	4630      	mov	r0, r6
   d5fc4:	4798      	blx	r3
     if (chunk>=0)
   d5fc6:	1e03      	subs	r3, r0, #0
   d5fc8:	db01      	blt.n	d5fce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5fca:	441c      	add	r4, r3
  while (size--) {
   d5fcc:	e7f3      	b.n	d5fb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5fce:	2c00      	cmp	r4, #0
   d5fd0:	bf08      	it	eq
   d5fd2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fd8:	b513      	push	{r0, r1, r4, lr}
   d5fda:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5fdc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5fde:	b159      	cbz	r1, d5ff8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5fe0:	9101      	str	r1, [sp, #4]
   d5fe2:	f002 f856 	bl	d8092 <strlen>
   d5fe6:	6823      	ldr	r3, [r4, #0]
   d5fe8:	9901      	ldr	r1, [sp, #4]
   d5fea:	68db      	ldr	r3, [r3, #12]
   d5fec:	4602      	mov	r2, r0
   d5fee:	4620      	mov	r0, r4
    }
   d5ff0:	b002      	add	sp, #8
   d5ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5ff6:	4718      	bx	r3
    }
   d5ff8:	b002      	add	sp, #8
   d5ffa:	bd10      	pop	{r4, pc}

000d5ffc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5ffc:	b508      	push	{r3, lr}
  return write(str);
   d5ffe:	f7ff ffeb 	bl	d5fd8 <_ZN5Print5writeEPKc>
}
   d6002:	bd08      	pop	{r3, pc}

000d6004 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6004:	6803      	ldr	r3, [r0, #0]
   d6006:	689b      	ldr	r3, [r3, #8]
   d6008:	4718      	bx	r3

000d600a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d600a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d600c:	210d      	movs	r1, #13
{
   d600e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6010:	f7ff fff8 	bl	d6004 <_ZN5Print5printEc>
  n += print('\n');
   d6014:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6016:	4604      	mov	r4, r0
  n += print('\n');
   d6018:	4628      	mov	r0, r5
   d601a:	f7ff fff3 	bl	d6004 <_ZN5Print5printEc>
  return n;
}
   d601e:	4420      	add	r0, r4
   d6020:	bd38      	pop	{r3, r4, r5, pc}

000d6022 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6022:	b538      	push	{r3, r4, r5, lr}
   d6024:	4605      	mov	r5, r0
  return write(str);
   d6026:	f7ff ffd7 	bl	d5fd8 <_ZN5Print5writeEPKc>
   d602a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d602c:	4628      	mov	r0, r5
   d602e:	f7ff ffec 	bl	d600a <_ZN5Print7printlnEv>
  return n;
}
   d6032:	4420      	add	r0, r4
   d6034:	bd38      	pop	{r3, r4, r5, pc}

000d6036 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6036:	b530      	push	{r4, r5, lr}
   d6038:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d603a:	2300      	movs	r3, #0
   d603c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6040:	2a01      	cmp	r2, #1
   d6042:	bf98      	it	ls
   d6044:	220a      	movls	r2, #10
   d6046:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6048:	460d      	mov	r5, r1
   d604a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d604e:	fb01 5312 	mls	r3, r1, r2, r5
   d6052:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6056:	2b09      	cmp	r3, #9
   d6058:	bf94      	ite	ls
   d605a:	3330      	addls	r3, #48	; 0x30
   d605c:	3337      	addhi	r3, #55	; 0x37
   d605e:	b2db      	uxtb	r3, r3
  } while(n);
   d6060:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6062:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6066:	d9ef      	bls.n	d6048 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6068:	4621      	mov	r1, r4
   d606a:	f7ff ffb5 	bl	d5fd8 <_ZN5Print5writeEPKc>
}
   d606e:	b00b      	add	sp, #44	; 0x2c
   d6070:	bd30      	pop	{r4, r5, pc}
	...

000d6074 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6078:	ec55 4b10 	vmov	r4, r5, d0
   d607c:	4606      	mov	r6, r0
   d607e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6080:	ee10 2a10 	vmov	r2, s0
   d6084:	ee10 0a10 	vmov	r0, s0
   d6088:	462b      	mov	r3, r5
   d608a:	4629      	mov	r1, r5
   d608c:	f001 fed0 	bl	d7e30 <__aeabi_dcmpun>
   d6090:	b140      	cbz	r0, d60a4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6092:	4953      	ldr	r1, [pc, #332]	; (d61e0 <_ZN5Print10printFloatEdh+0x16c>)
   d6094:	4630      	mov	r0, r6
   d6096:	f7ff ff9f 	bl	d5fd8 <_ZN5Print5writeEPKc>
   d609a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d609c:	4650      	mov	r0, sl
   d609e:	b003      	add	sp, #12
   d60a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d60a4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d60a8:	4b4e      	ldr	r3, [pc, #312]	; (d61e4 <_ZN5Print10printFloatEdh+0x170>)
   d60aa:	f04f 32ff 	mov.w	r2, #4294967295
   d60ae:	4620      	mov	r0, r4
   d60b0:	4649      	mov	r1, r9
   d60b2:	f001 febd 	bl	d7e30 <__aeabi_dcmpun>
   d60b6:	b948      	cbnz	r0, d60cc <_ZN5Print10printFloatEdh+0x58>
   d60b8:	4b4a      	ldr	r3, [pc, #296]	; (d61e4 <_ZN5Print10printFloatEdh+0x170>)
   d60ba:	f04f 32ff 	mov.w	r2, #4294967295
   d60be:	4620      	mov	r0, r4
   d60c0:	4649      	mov	r1, r9
   d60c2:	f001 fe97 	bl	d7df4 <__aeabi_dcmple>
   d60c6:	b908      	cbnz	r0, d60cc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d60c8:	4947      	ldr	r1, [pc, #284]	; (d61e8 <_ZN5Print10printFloatEdh+0x174>)
   d60ca:	e7e3      	b.n	d6094 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d60cc:	4b47      	ldr	r3, [pc, #284]	; (d61ec <_ZN5Print10printFloatEdh+0x178>)
   d60ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60d2:	4620      	mov	r0, r4
   d60d4:	4629      	mov	r1, r5
   d60d6:	f001 fea1 	bl	d7e1c <__aeabi_dcmpgt>
   d60da:	b108      	cbz	r0, d60e0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d60dc:	4944      	ldr	r1, [pc, #272]	; (d61f0 <_ZN5Print10printFloatEdh+0x17c>)
   d60de:	e7d9      	b.n	d6094 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d60e0:	4b44      	ldr	r3, [pc, #272]	; (d61f4 <_ZN5Print10printFloatEdh+0x180>)
   d60e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60e6:	4620      	mov	r0, r4
   d60e8:	4629      	mov	r1, r5
   d60ea:	f001 fe79 	bl	d7de0 <__aeabi_dcmplt>
   d60ee:	2800      	cmp	r0, #0
   d60f0:	d1f4      	bne.n	d60dc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d60f2:	2200      	movs	r2, #0
   d60f4:	2300      	movs	r3, #0
   d60f6:	4620      	mov	r0, r4
   d60f8:	4629      	mov	r1, r5
   d60fa:	f001 fe71 	bl	d7de0 <__aeabi_dcmplt>
   d60fe:	b1d0      	cbz	r0, d6136 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d6100:	212d      	movs	r1, #45	; 0x2d
   d6102:	4630      	mov	r0, r6
   d6104:	f7ff ff7e 	bl	d6004 <_ZN5Print5printEc>
     number = -number;
   d6108:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d610c:	4682      	mov	sl, r0
     number = -number;
   d610e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d6110:	4939      	ldr	r1, [pc, #228]	; (d61f8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d6112:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d6200 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d6116:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d611a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d611c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d6120:	fa5f f38b 	uxtb.w	r3, fp
   d6124:	429f      	cmp	r7, r3
   d6126:	d908      	bls.n	d613a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d6128:	4642      	mov	r2, r8
   d612a:	464b      	mov	r3, r9
   d612c:	f001 fd10 	bl	d7b50 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d6130:	f10b 0b01 	add.w	fp, fp, #1
   d6134:	e7f4      	b.n	d6120 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d6136:	4682      	mov	sl, r0
   d6138:	e7ea      	b.n	d6110 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d613a:	4622      	mov	r2, r4
   d613c:	462b      	mov	r3, r5
   d613e:	f001 fa27 	bl	d7590 <__adddf3>
   d6142:	460d      	mov	r5, r1
   d6144:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d6146:	f001 feb1 	bl	d7eac <__aeabi_d2uiz>
   d614a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d614c:	f001 fb5c 	bl	d7808 <__aeabi_ui2d>
   d6150:	4602      	mov	r2, r0
   d6152:	460b      	mov	r3, r1
   d6154:	4620      	mov	r0, r4
   d6156:	4629      	mov	r1, r5
   d6158:	f001 fa18 	bl	d758c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d615c:	220a      	movs	r2, #10
   d615e:	4604      	mov	r4, r0
   d6160:	460d      	mov	r5, r1
   d6162:	4630      	mov	r0, r6
   d6164:	4641      	mov	r1, r8
   d6166:	f7ff ff66 	bl	d6036 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d616a:	4482      	add	sl, r0
  if (digits > 0) {
   d616c:	b127      	cbz	r7, d6178 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d616e:	4923      	ldr	r1, [pc, #140]	; (d61fc <_ZN5Print10printFloatEdh+0x188>)
   d6170:	4630      	mov	r0, r6
   d6172:	f7ff ff31 	bl	d5fd8 <_ZN5Print5writeEPKc>
    n += print(".");
   d6176:	4482      	add	sl, r0
    remainder *= 10.0;
   d6178:	f8df 9084 	ldr.w	r9, [pc, #132]	; d6200 <_ZN5Print10printFloatEdh+0x18c>
   d617c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d6180:	3f01      	subs	r7, #1
   d6182:	b2ff      	uxtb	r7, r7
   d6184:	2fff      	cmp	r7, #255	; 0xff
   d6186:	d089      	beq.n	d609c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d6188:	4642      	mov	r2, r8
   d618a:	464b      	mov	r3, r9
   d618c:	4620      	mov	r0, r4
   d618e:	4629      	mov	r1, r5
   d6190:	f001 fbb4 	bl	d78fc <__aeabi_dmul>
   d6194:	4604      	mov	r4, r0
   d6196:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d6198:	f001 fe60 	bl	d7e5c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d619c:	f1b0 0b00 	subs.w	fp, r0, #0
   d61a0:	da1a      	bge.n	d61d8 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d61a2:	212d      	movs	r1, #45	; 0x2d
   d61a4:	4630      	mov	r0, r6
   d61a6:	f7ff ff2d 	bl	d6004 <_ZN5Print5printEc>
            val = -n;
   d61aa:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d61ae:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d61b0:	220a      	movs	r2, #10
   d61b2:	4630      	mov	r0, r6
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	f7ff ff3e 	bl	d6036 <_ZN5Print11printNumberEmh>
   d61ba:	9b01      	ldr	r3, [sp, #4]
   d61bc:	4418      	add	r0, r3
    n += print(toPrint);
   d61be:	4482      	add	sl, r0
    remainder -= toPrint;
   d61c0:	4658      	mov	r0, fp
   d61c2:	f001 fb31 	bl	d7828 <__aeabi_i2d>
   d61c6:	4602      	mov	r2, r0
   d61c8:	460b      	mov	r3, r1
   d61ca:	4620      	mov	r0, r4
   d61cc:	4629      	mov	r1, r5
   d61ce:	f001 f9dd 	bl	d758c <__aeabi_dsub>
   d61d2:	4604      	mov	r4, r0
   d61d4:	460d      	mov	r5, r1
  while (digits-- > 0)
   d61d6:	e7d3      	b.n	d6180 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d61d8:	4659      	mov	r1, fp
        size_t t = 0;
   d61da:	2300      	movs	r3, #0
   d61dc:	e7e8      	b.n	d61b0 <_ZN5Print10printFloatEdh+0x13c>
   d61de:	bf00      	nop
   d61e0:	000d8416 	.word	0x000d8416
   d61e4:	7fefffff 	.word	0x7fefffff
   d61e8:	000d841a 	.word	0x000d841a
   d61ec:	41efffff 	.word	0x41efffff
   d61f0:	000d841e 	.word	0x000d841e
   d61f4:	c1efffff 	.word	0xc1efffff
   d61f8:	3fe00000 	.word	0x3fe00000
   d61fc:	000d8414 	.word	0x000d8414
   d6200:	40240000 	.word	0x40240000

000d6204 <_ZN5Print7printlnEdi>:
{
   d6204:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d6206:	b2c9      	uxtb	r1, r1
{
   d6208:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d620a:	f7ff ff33 	bl	d6074 <_ZN5Print10printFloatEdh>
   d620e:	4604      	mov	r4, r0
  n += println();
   d6210:	4628      	mov	r0, r5
   d6212:	f7ff fefa 	bl	d600a <_ZN5Print7printlnEv>
}
   d6216:	4420      	add	r0, r4
   d6218:	bd38      	pop	{r3, r4, r5, pc}

000d621a <_ZN5Print7printlnEfi>:
{
   d621a:	b538      	push	{r3, r4, r5, lr}
   d621c:	4604      	mov	r4, r0
   d621e:	ee10 0a10 	vmov	r0, s0
   d6222:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6224:	f001 fb12 	bl	d784c <__aeabi_f2d>
   d6228:	ec41 0b10 	vmov	d0, r0, r1
   d622c:	4629      	mov	r1, r5
   d622e:	4620      	mov	r0, r4
}
   d6230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d6234:	f7ff bfe6 	b.w	d6204 <_ZN5Print7printlnEdi>

000d6238 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6238:	b510      	push	{r4, lr}
   d623a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d623c:	f7ff f8f2 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6240:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6242:	6823      	ldr	r3, [r4, #0]
   d6244:	4620      	mov	r0, r4
   d6246:	695b      	ldr	r3, [r3, #20]
   d6248:	4798      	blx	r3
    if (c >= 0) return c;
   d624a:	2800      	cmp	r0, #0
   d624c:	da08      	bge.n	d6260 <_ZN6Stream9timedReadEv+0x28>
   d624e:	f7ff f8e9 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6252:	68e3      	ldr	r3, [r4, #12]
   d6254:	1ac0      	subs	r0, r0, r3
   d6256:	68a3      	ldr	r3, [r4, #8]
   d6258:	4298      	cmp	r0, r3
   d625a:	d3f2      	bcc.n	d6242 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d625c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6260:	bd10      	pop	{r4, pc}

000d6262 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6264:	4606      	mov	r6, r0
   d6266:	460d      	mov	r5, r1
   d6268:	4617      	mov	r7, r2
  size_t count = 0;
   d626a:	2400      	movs	r4, #0
  while (count < length) {
   d626c:	42bc      	cmp	r4, r7
   d626e:	d007      	beq.n	d6280 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d6270:	4630      	mov	r0, r6
   d6272:	f7ff ffe1 	bl	d6238 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d6276:	1e03      	subs	r3, r0, #0
   d6278:	db02      	blt.n	d6280 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d627a:	552b      	strb	r3, [r5, r4]
    count++;
   d627c:	3401      	adds	r4, #1
  while (count < length) {
   d627e:	e7f5      	b.n	d626c <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d6280:	4620      	mov	r0, r4
   d6282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6284 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6284:	4b01      	ldr	r3, [pc, #4]	; (d628c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6286:	4a02      	ldr	r2, [pc, #8]	; (d6290 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6288:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d628a:	4770      	bx	lr
   d628c:	2003e5e4 	.word	0x2003e5e4
   d6290:	000d8422 	.word	0x000d8422

000d6294 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d6298:	4a15      	ldr	r2, [pc, #84]	; (d62f0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d629a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d62fc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d629e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62a2:	18c0      	adds	r0, r0, r3
   d62a4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d62a8:	4a12      	ldr	r2, [pc, #72]	; (d62f4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d62aa:	e9d2 3200 	ldrd	r3, r2, [r2]
   d62ae:	18c6      	adds	r6, r0, r3
   d62b0:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d62b4:	e9d8 2300 	ldrd	r2, r3, [r8]
   d62b8:	42bb      	cmp	r3, r7
   d62ba:	bf08      	it	eq
   d62bc:	42b2      	cmpeq	r2, r6
{
   d62be:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d62c0:	d013      	beq.n	d62ea <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d62c2:	a903      	add	r1, sp, #12
   d62c4:	4668      	mov	r0, sp
   d62c6:	e9cd 6700 	strd	r6, r7, [sp]
   d62ca:	f7ff fb19 	bl	d5900 <localtime_r>
	calendar_time.tm_year += 1900;
   d62ce:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62d0:	4d09      	ldr	r5, [pc, #36]	; (d62f8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d62d2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62d6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d62d8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d62de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d62e2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d62e6:	6823      	ldr	r3, [r4, #0]
   d62e8:	602b      	str	r3, [r5, #0]
    }
}
   d62ea:	b00c      	add	sp, #48	; 0x30
   d62ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62f0:	2003e618 	.word	0x2003e618
   d62f4:	2003e610 	.word	0x2003e610
   d62f8:	2003e5ec 	.word	0x2003e5ec
   d62fc:	2003e620 	.word	0x2003e620

000d6300 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d6300:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6302:	2000      	movs	r0, #0
   d6304:	f7ff faa4 	bl	d5850 <spark_sync_time_pending>
   d6308:	b128      	cbz	r0, d6316 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d630a:	f7ff fa89 	bl	d5820 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d630e:	f080 0001 	eor.w	r0, r0, #1
   d6312:	b2c0      	uxtb	r0, r0
    }
   d6314:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6316:	2001      	movs	r0, #1
   d6318:	e7fc      	b.n	d6314 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d631a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d631a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d631c:	2000      	movs	r0, #0
   d631e:	f7ff f889 	bl	d5434 <hal_rtc_time_is_valid>
    if (rtcstate)
   d6322:	4604      	mov	r4, r0
   d6324:	b9a0      	cbnz	r0, d6350 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6326:	f7ff f9b5 	bl	d5694 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d632a:	2801      	cmp	r0, #1
   d632c:	d110      	bne.n	d6350 <_ZN9TimeClass7isValidEv+0x36>
   d632e:	4620      	mov	r0, r4
   d6330:	f7ff f9e0 	bl	d56f4 <system_thread_get_state>
   d6334:	b960      	cbnz	r0, d6350 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6336:	f7ff ffe3 	bl	d6300 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d633a:	b910      	cbnz	r0, d6342 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d633c:	f7ff fa60 	bl	d5800 <spark_process>
        while (_while() && !_condition()) {
   d6340:	e7f9      	b.n	d6336 <_ZN9TimeClass7isValidEv+0x1c>
   d6342:	f7ff ffdd 	bl	d6300 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d634a:	2000      	movs	r0, #0
   d634c:	f7ff b872 	b.w	d5434 <hal_rtc_time_is_valid>
}
   d6350:	4620      	mov	r0, r4
   d6352:	bd10      	pop	{r4, pc}

000d6354 <_ZN9TimeClass3nowEv>:
{
   d6354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6356:	f7ff ffe0 	bl	d631a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d635a:	2210      	movs	r2, #16
   d635c:	2100      	movs	r1, #0
   d635e:	4668      	mov	r0, sp
   d6360:	f001 fe4e 	bl	d8000 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6364:	2100      	movs	r1, #0
   d6366:	4668      	mov	r0, sp
   d6368:	f7ff f86c 	bl	d5444 <hal_rtc_get_time>
}
   d636c:	9800      	ldr	r0, [sp, #0]
   d636e:	b005      	add	sp, #20
   d6370:	f85d fb04 	ldr.w	pc, [sp], #4

000d6374 <_ZN9TimeClass4hourEv>:
{
   d6374:	b508      	push	{r3, lr}
	return hour(now());
   d6376:	f7ff ffed 	bl	d6354 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d637a:	17c1      	asrs	r1, r0, #31
   d637c:	f7ff ff8a 	bl	d6294 <_ZL22Refresh_UnixTime_Cachex>
}
   d6380:	4b01      	ldr	r3, [pc, #4]	; (d6388 <_ZN9TimeClass4hourEv+0x14>)
   d6382:	6898      	ldr	r0, [r3, #8]
   d6384:	bd08      	pop	{r3, pc}
   d6386:	bf00      	nop
   d6388:	2003e5ec 	.word	0x2003e5ec

000d638c <_ZN9TimeClass6minuteEv>:
{
   d638c:	b508      	push	{r3, lr}
	return minute(now());
   d638e:	f7ff ffe1 	bl	d6354 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6392:	17c1      	asrs	r1, r0, #31
   d6394:	f7ff ff7e 	bl	d6294 <_ZL22Refresh_UnixTime_Cachex>
}
   d6398:	4b01      	ldr	r3, [pc, #4]	; (d63a0 <_ZN9TimeClass6minuteEv+0x14>)
   d639a:	6858      	ldr	r0, [r3, #4]
   d639c:	bd08      	pop	{r3, pc}
   d639e:	bf00      	nop
   d63a0:	2003e5ec 	.word	0x2003e5ec

000d63a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63a4:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d63ac:	4770      	bx	lr
   d63ae:	bf00      	nop
   d63b0:	2003e428 	.word	0x2003e428
   d63b4:	2003e5e8 	.word	0x2003e5e8

000d63b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63b8:	2100      	movs	r1, #0
   d63ba:	f7ff b97b 	b.w	d56b4 <system_delay_ms>

000d63be <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63be:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63c0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d63c2:	4604      	mov	r4, r0
      if (_M_manager)
   d63c4:	b113      	cbz	r3, d63cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63c6:	2203      	movs	r2, #3
   d63c8:	4601      	mov	r1, r0
   d63ca:	4798      	blx	r3
    }
   d63cc:	4620      	mov	r0, r4
   d63ce:	bd10      	pop	{r4, pc}

000d63d0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63d0:	b510      	push	{r4, lr}
   d63d2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63d4:	f7ff fff3 	bl	d63be <_ZNSt14_Function_baseD1Ev>
   d63d8:	4620      	mov	r0, r4
   d63da:	bd10      	pop	{r4, pc}

000d63dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d63dc:	b513      	push	{r0, r1, r4, lr}
   d63de:	460b      	mov	r3, r1
   d63e0:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63e2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d63e6:	466c      	mov	r4, sp
   d63e8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d63ec:	e893 0003 	ldmia.w	r3, {r0, r1}
   d63f0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d63f4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d63f8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d63fc:	b002      	add	sp, #8
   d63fe:	bd10      	pop	{r4, pc}

000d6400 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6400:	4803      	ldr	r0, [pc, #12]	; (d6410 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6402:	4a04      	ldr	r2, [pc, #16]	; (d6414 <_GLOBAL__sub_I_RGB+0x14>)
   d6404:	4904      	ldr	r1, [pc, #16]	; (d6418 <_GLOBAL__sub_I_RGB+0x18>)
   d6406:	2300      	movs	r3, #0
   d6408:	6083      	str	r3, [r0, #8]
   d640a:	f000 bff7 	b.w	d73fc <__aeabi_atexit>
   d640e:	bf00      	nop
   d6410:	2003e628 	.word	0x2003e628
   d6414:	2003e490 	.word	0x2003e490
   d6418:	000d63d1 	.word	0x000d63d1

000d641c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d641c:	6800      	ldr	r0, [r0, #0]
   d641e:	f000 be2a 	b.w	d7076 <_ZN7TwoWire4lockEv>

000d6422 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6422:	b510      	push	{r4, lr}
   d6424:	4604      	mov	r4, r0
      lock_(_lock) {
   d6426:	6001      	str	r1, [r0, #0]
   d6428:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d642a:	b10a      	cbz	r2, d6430 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d642c:	f7ff fff6 	bl	d641c <_ZN9FuelGauge4lockEv>
}
   d6430:	4620      	mov	r0, r4
   d6432:	bd10      	pop	{r4, pc}

000d6434 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d6434:	b513      	push	{r0, r1, r4, lr}
   d6436:	4604      	mov	r4, r0
   d6438:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d643a:	f000 ffb7 	bl	d73ac <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d643e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d6440:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d6442:	4620      	mov	r0, r4
   d6444:	f7ff ffed 	bl	d6422 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d6448:	4620      	mov	r0, r4
   d644a:	b002      	add	sp, #8
   d644c:	bd10      	pop	{r4, pc}

000d644e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d644e:	6800      	ldr	r0, [r0, #0]
   d6450:	f000 be1a 	b.w	d7088 <_ZN7TwoWire6unlockEv>

000d6454 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d6454:	b510      	push	{r4, lr}
    if (lock_) {
   d6456:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d6458:	4604      	mov	r4, r0
    if (lock_) {
   d645a:	b10b      	cbz	r3, d6460 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d645c:	f7ff fff7 	bl	d644e <_ZN9FuelGauge6unlockEv>
}
   d6460:	4620      	mov	r0, r4
   d6462:	bd10      	pop	{r4, pc}

000d6464 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6464:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6468:	4604      	mov	r4, r0
   d646a:	460d      	mov	r5, r1
   d646c:	4617      	mov	r7, r2
   d646e:	461e      	mov	r6, r3
   d6470:	f7ff ffd4 	bl	d641c <_ZN9FuelGauge4lockEv>
   d6474:	2336      	movs	r3, #54	; 0x36
   d6476:	f88d 3000 	strb.w	r3, [sp]
   d647a:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d647c:	6820      	ldr	r0, [r4, #0]
   d647e:	9301      	str	r3, [sp, #4]
   d6480:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d6484:	230a      	movs	r3, #10
   d6486:	4669      	mov	r1, sp
   d6488:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d648a:	f88d 8008 	strb.w	r8, [sp, #8]
   d648e:	f000 fdd2 	bl	d7036 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d6492:	6820      	ldr	r0, [r4, #0]
   d6494:	6803      	ldr	r3, [r0, #0]
   d6496:	4629      	mov	r1, r5
   d6498:	689b      	ldr	r3, [r3, #8]
   d649a:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d649c:	6820      	ldr	r0, [r4, #0]
   d649e:	4641      	mov	r1, r8
   d64a0:	f000 fde1 	bl	d7066 <_ZN7TwoWire15endTransmissionEh>
   d64a4:	4605      	mov	r5, r0
   d64a6:	b140      	cbz	r0, d64ba <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d64a8:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d64ac:	4620      	mov	r0, r4
   d64ae:	f7ff ffce 	bl	d644e <_ZN9FuelGauge6unlockEv>
}
   d64b2:	4628      	mov	r0, r5
   d64b4:	b004      	add	sp, #16
   d64b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d64ba:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d64bc:	6820      	ldr	r0, [r4, #0]
   d64be:	9301      	str	r3, [sp, #4]
   d64c0:	4669      	mov	r1, sp
   d64c2:	f000 fda1 	bl	d7008 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d64c6:	2802      	cmp	r0, #2
   d64c8:	d1ee      	bne.n	d64a8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d64ca:	6820      	ldr	r0, [r4, #0]
   d64cc:	6803      	ldr	r3, [r0, #0]
   d64ce:	695b      	ldr	r3, [r3, #20]
   d64d0:	4798      	blx	r3
   d64d2:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d64d4:	6820      	ldr	r0, [r4, #0]
   d64d6:	6803      	ldr	r3, [r0, #0]
   d64d8:	695b      	ldr	r3, [r3, #20]
   d64da:	4798      	blx	r3
   d64dc:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d64de:	e7e5      	b.n	d64ac <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d64e0 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d64e0:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d64e2:	2300      	movs	r3, #0
   d64e4:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d64e8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d64ec:	f10d 0206 	add.w	r2, sp, #6
   d64f0:	f10d 0307 	add.w	r3, sp, #7
   d64f4:	2104      	movs	r1, #4
   d64f6:	f7ff ffb5 	bl	d6464 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d64fa:	b9b0      	cbnz	r0, d652a <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d64fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6500:	f001 f992 	bl	d7828 <__aeabi_i2d>
   d6504:	4b0a      	ldr	r3, [pc, #40]	; (d6530 <_ZN9FuelGauge6getSoCEv+0x50>)
   d6506:	2200      	movs	r2, #0
   d6508:	f001 f9f8 	bl	d78fc <__aeabi_dmul>
   d650c:	f001 fcee 	bl	d7eec <__aeabi_d2f>
        return MSB + decimal;
   d6510:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6514:	ee00 3a10 	vmov	s0, r3
   d6518:	ee07 0a90 	vmov	s15, r0
   d651c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d6520:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d6524:	b003      	add	sp, #12
   d6526:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d652a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d652e:	e7f9      	b.n	d6524 <_ZN9FuelGauge6getSoCEv+0x44>
   d6530:	3f700000 	.word	0x3f700000

000d6534 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6534:	4b01      	ldr	r3, [pc, #4]	; (d653c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6536:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6538:	4770      	bx	lr
   d653a:	bf00      	nop
   d653c:	2003e42c 	.word	0x2003e42c

000d6540 <serialEventRun>:
{
   d6540:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6542:	4b0b      	ldr	r3, [pc, #44]	; (d6570 <serialEventRun+0x30>)
   d6544:	b143      	cbz	r3, d6558 <serialEventRun+0x18>
   d6546:	f000 fc0b 	bl	d6d60 <_Z16_fetch_usbserialv>
   d654a:	6803      	ldr	r3, [r0, #0]
   d654c:	691b      	ldr	r3, [r3, #16]
   d654e:	4798      	blx	r3
   d6550:	2800      	cmp	r0, #0
   d6552:	dd01      	ble.n	d6558 <serialEventRun+0x18>
        serialEvent();
   d6554:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6558:	4b06      	ldr	r3, [pc, #24]	; (d6574 <serialEventRun+0x34>)
   d655a:	b143      	cbz	r3, d656e <serialEventRun+0x2e>
   d655c:	f000 fcd2 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d6560:	6803      	ldr	r3, [r0, #0]
   d6562:	691b      	ldr	r3, [r3, #16]
   d6564:	4798      	blx	r3
   d6566:	2800      	cmp	r0, #0
   d6568:	dd01      	ble.n	d656e <serialEventRun+0x2e>
        serialEvent1();
   d656a:	f3af 8000 	nop.w
}
   d656e:	bd08      	pop	{r3, pc}
	...

000d6578 <_post_loop>:
{
   d6578:	b508      	push	{r3, lr}
	serialEventRun();
   d657a:	f7ff ffe1 	bl	d6540 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d657e:	f7fe ff51 	bl	d5424 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6582:	4b01      	ldr	r3, [pc, #4]	; (d6588 <_post_loop+0x10>)
   d6584:	6018      	str	r0, [r3, #0]
}
   d6586:	bd08      	pop	{r3, pc}
   d6588:	2003e7bc 	.word	0x2003e7bc

000d658c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d658c:	4802      	ldr	r0, [pc, #8]	; (d6598 <_Z33system_initialize_user_backup_ramv+0xc>)
   d658e:	4a03      	ldr	r2, [pc, #12]	; (d659c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6590:	4903      	ldr	r1, [pc, #12]	; (d65a0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6592:	1a12      	subs	r2, r2, r0
   d6594:	f001 bd0c 	b.w	d7fb0 <memcpy>
   d6598:	2003f400 	.word	0x2003f400
   d659c:	2003f404 	.word	0x2003f404
   d65a0:	000d8710 	.word	0x000d8710

000d65a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d65a4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d65a6:	2300      	movs	r3, #0
   d65a8:	9300      	str	r3, [sp, #0]
   d65aa:	461a      	mov	r2, r3
   d65ac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d65b0:	f7ff f8b2 	bl	d5718 <system_ctrl_set_result>
}
   d65b4:	b003      	add	sp, #12
   d65b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d65bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d65bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d65be:	8843      	ldrh	r3, [r0, #2]
   d65c0:	2b0a      	cmp	r3, #10
   d65c2:	d008      	beq.n	d65d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d65c4:	2b50      	cmp	r3, #80	; 0x50
   d65c6:	d10b      	bne.n	d65e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d65c8:	4b09      	ldr	r3, [pc, #36]	; (d65f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d65ca:	681b      	ldr	r3, [r3, #0]
   d65cc:	b14b      	cbz	r3, d65e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d65ce:	b003      	add	sp, #12
   d65d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d65d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d65d6:	f7ff ffe5 	bl	d65a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d65da:	b003      	add	sp, #12
   d65dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d65e0:	2300      	movs	r3, #0
   d65e2:	9300      	str	r3, [sp, #0]
   d65e4:	461a      	mov	r2, r3
   d65e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d65ea:	f7ff f895 	bl	d5718 <system_ctrl_set_result>
}
   d65ee:	e7f4      	b.n	d65da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d65f0:	2003e63c 	.word	0x2003e63c

000d65f4 <module_user_init_hook>:
{
   d65f4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d65f6:	4c12      	ldr	r4, [pc, #72]	; (d6640 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d65f8:	4812      	ldr	r0, [pc, #72]	; (d6644 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d65fa:	4d13      	ldr	r5, [pc, #76]	; (d6648 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d65fc:	2100      	movs	r1, #0
   d65fe:	f7ff f977 	bl	d58f0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6602:	6823      	ldr	r3, [r4, #0]
   d6604:	42ab      	cmp	r3, r5
   d6606:	4b11      	ldr	r3, [pc, #68]	; (d664c <module_user_init_hook+0x58>)
   d6608:	bf0c      	ite	eq
   d660a:	2201      	moveq	r2, #1
   d660c:	2200      	movne	r2, #0
   d660e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6610:	d002      	beq.n	d6618 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6612:	f7ff ffbb 	bl	d658c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6616:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6618:	f7fe fef4 	bl	d5404 <HAL_RNG_GetRandomNumber>
   d661c:	4604      	mov	r4, r0
    srand(seed);
   d661e:	f001 fcf7 	bl	d8010 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6622:	4b0b      	ldr	r3, [pc, #44]	; (d6650 <module_user_init_hook+0x5c>)
   d6624:	b113      	cbz	r3, d662c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6626:	4620      	mov	r0, r4
   d6628:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d662c:	2100      	movs	r1, #0
   d662e:	4808      	ldr	r0, [pc, #32]	; (d6650 <module_user_init_hook+0x5c>)
   d6630:	f7ff f91e 	bl	d5870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6638:	4806      	ldr	r0, [pc, #24]	; (d6654 <module_user_init_hook+0x60>)
   d663a:	2100      	movs	r1, #0
   d663c:	f7ff b862 	b.w	d5704 <system_ctrl_set_app_request_handler>
   d6640:	2003f400 	.word	0x2003f400
   d6644:	000d6535 	.word	0x000d6535
   d6648:	9a271c1e 	.word	0x9a271c1e
   d664c:	2003e638 	.word	0x2003e638
   d6650:	00000000 	.word	0x00000000
   d6654:	000d65bd 	.word	0x000d65bd

000d6658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6658:	4770      	bx	lr

000d665a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d665a:	2000      	movs	r0, #0
   d665c:	4770      	bx	lr

000d665e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d665e:	b510      	push	{r4, lr}
   d6660:	2110      	movs	r1, #16
   d6662:	4604      	mov	r4, r0
   d6664:	f000 fecf 	bl	d7406 <_ZdlPvj>
   d6668:	4620      	mov	r0, r4
   d666a:	bd10      	pop	{r4, pc}

000d666c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d666c:	b508      	push	{r3, lr}
      { delete this; }
   d666e:	f7ff fff6 	bl	d665e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6672:	bd08      	pop	{r3, pc}

000d6674 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6674:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6676:	2200      	movs	r2, #0
   d6678:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d667c:	6002      	str	r2, [r0, #0]
   d667e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6680:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6682:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6684:	680c      	ldr	r4, [r1, #0]
   d6686:	8085      	strh	r5, [r0, #4]
   d6688:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d668a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d668c:	bd30      	pop	{r4, r5, pc}

000d668e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d668e:	b510      	push	{r4, lr}
   d6690:	4604      	mov	r4, r0
    free((void*)msg_);
   d6692:	6800      	ldr	r0, [r0, #0]
   d6694:	f7ff f904 	bl	d58a0 <free>
}
   d6698:	4620      	mov	r0, r4
   d669a:	bd10      	pop	{r4, pc}

000d669c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d669c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d669e:	68c4      	ldr	r4, [r0, #12]
   d66a0:	b1f4      	cbz	r4, d66e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d66a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d66a4:	2b02      	cmp	r3, #2
   d66a6:	d103      	bne.n	d66b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d66a8:	f104 000c 	add.w	r0, r4, #12
   d66ac:	f7ff ffef 	bl	d668e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d66b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d66b2:	b135      	cbz	r5, d66c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d66b4:	4628      	mov	r0, r5
   d66b6:	f7ff fe82 	bl	d63be <_ZNSt14_Function_baseD1Ev>
   d66ba:	2110      	movs	r1, #16
   d66bc:	4628      	mov	r0, r5
   d66be:	f000 fea2 	bl	d7406 <_ZdlPvj>
   d66c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d66c4:	b135      	cbz	r5, d66d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d66c6:	4628      	mov	r0, r5
   d66c8:	f7ff fe79 	bl	d63be <_ZNSt14_Function_baseD1Ev>
   d66cc:	2110      	movs	r1, #16
   d66ce:	4628      	mov	r0, r5
   d66d0:	f000 fe99 	bl	d7406 <_ZdlPvj>
   d66d4:	4620      	mov	r0, r4
   d66d6:	2114      	movs	r1, #20
   d66d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d66dc:	f000 be93 	b.w	d7406 <_ZdlPvj>
   d66e0:	bd38      	pop	{r3, r4, r5, pc}

000d66e2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d66e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d66e4:	230c      	movs	r3, #12
   d66e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d66ea:	6803      	ldr	r3, [r0, #0]
   d66ec:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d66f0:	7a03      	ldrb	r3, [r0, #8]
   d66f2:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d66f6:	6843      	ldr	r3, [r0, #4]
   d66f8:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d66fa:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d66fc:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d66fe:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d6702:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d6704:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d6708:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d670c:	f7ff f8b8 	bl	d5880 <spark_cloud_disconnect>
}
   d6710:	b005      	add	sp, #20
   d6712:	f85d fb04 	ldr.w	pc, [sp], #4

000d6716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6716:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6718:	460e      	mov	r6, r1
   d671a:	4604      	mov	r4, r0
   d671c:	f856 3b04 	ldr.w	r3, [r6], #4
   d6720:	9300      	str	r3, [sp, #0]
   d6722:	460d      	mov	r5, r1
   d6724:	a801      	add	r0, sp, #4
   d6726:	4631      	mov	r1, r6
   d6728:	f7ff fc24 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d672c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d672e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6730:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6732:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6734:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6736:	2300      	movs	r3, #0
   d6738:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d673a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d673c:	f7fe f877 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6740:	4630      	mov	r0, r6
   d6742:	f7fe f874 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6746:	4628      	mov	r0, r5
   d6748:	2108      	movs	r1, #8
   d674a:	f000 fe5c 	bl	d7406 <_ZdlPvj>
        return p;
    }
   d674e:	4620      	mov	r0, r4
   d6750:	b002      	add	sp, #8
   d6752:	bd70      	pop	{r4, r5, r6, pc}

000d6754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6754:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6756:	b510      	push	{r4, lr}
      if (_M_empty())
   d6758:	b90a      	cbnz	r2, d675e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d675a:	f000 fe7c 	bl	d7456 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d675e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6762:	68c3      	ldr	r3, [r0, #12]
   d6764:	4718      	bx	r3

000d6766 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6766:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6768:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d676a:	f100 0110 	add.w	r1, r0, #16
   d676e:	f7ff fff1 	bl	d6754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6772:	bd08      	pop	{r3, pc}

000d6774 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6774:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6776:	b510      	push	{r4, lr}
      if (_M_empty())
   d6778:	b90a      	cbnz	r2, d677e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d677a:	f000 fe6c 	bl	d7456 <_ZSt25__throw_bad_function_callv>
    }
   d677e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6782:	68c3      	ldr	r3, [r0, #12]
   d6784:	4718      	bx	r3

000d6786 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6786:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6788:	6800      	ldr	r0, [r0, #0]
   d678a:	f100 0110 	add.w	r1, r0, #16
   d678e:	f7ff fff1 	bl	d6774 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6792:	bd08      	pop	{r3, pc}

000d6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6794:	b538      	push	{r3, r4, r5, lr}
   d6796:	2300      	movs	r3, #0
   d6798:	4604      	mov	r4, r0
   d679a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d679c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d679e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d67a0:	f7fd fc79 	bl	d4096 <_Znwj>
   d67a4:	b128      	cbz	r0, d67b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d67a6:	2301      	movs	r3, #1
   d67a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d67ac:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d67ae:	6003      	str	r3, [r0, #0]
   d67b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d67b2:	6020      	str	r0, [r4, #0]
	}
   d67b4:	4620      	mov	r0, r4
   d67b6:	bd38      	pop	{r3, r4, r5, pc}
   d67b8:	000d844c 	.word	0x000d844c

000d67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d67bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d67be:	2300      	movs	r3, #0
   d67c0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d67c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d67c4:	4604      	mov	r4, r0
   d67c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d67c8:	b12b      	cbz	r3, d67d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67ca:	2202      	movs	r2, #2
   d67cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67ce:	68eb      	ldr	r3, [r5, #12]
   d67d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67d2:	68ab      	ldr	r3, [r5, #8]
   d67d4:	60a3      	str	r3, [r4, #8]
    }
   d67d6:	4620      	mov	r0, r4
   d67d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d67dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67de:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d67e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d67e2:	4668      	mov	r0, sp
   d67e4:	f7ff ff46 	bl	d6674 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d67e8:	f04f 0302 	mov.w	r3, #2
   d67ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   d67f0:	2a00      	cmp	r2, #0
   d67f2:	d103      	bne.n	d67fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d67f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d67f8:	2900      	cmp	r1, #0
   d67fa:	d1f7      	bne.n	d67ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d67fc:	d125      	bne.n	d684a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d67fe:	f104 050c 	add.w	r5, r4, #12
   d6802:	4669      	mov	r1, sp
   d6804:	4628      	mov	r0, r5
   d6806:	f7ff ff35 	bl	d6674 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d680a:	f3bf 8f5b 	dmb	ish
   d680e:	2301      	movs	r3, #1
   d6810:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6812:	2000      	movs	r0, #0
   d6814:	f104 0308 	add.w	r3, r4, #8
   d6818:	f3bf 8f5b 	dmb	ish
   d681c:	e853 6f00 	ldrex	r6, [r3]
   d6820:	e843 0200 	strex	r2, r0, [r3]
   d6824:	2a00      	cmp	r2, #0
   d6826:	d1f9      	bne.n	d681c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6828:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d682c:	b16e      	cbz	r6, d684a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d682e:	f7fe ff51 	bl	d56d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6832:	b178      	cbz	r0, d6854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6834:	4629      	mov	r1, r5
   d6836:	4630      	mov	r0, r6
   d6838:	f7ff ff8c 	bl	d6754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d683c:	4630      	mov	r0, r6
   d683e:	f7ff fdbe 	bl	d63be <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6842:	2110      	movs	r1, #16
   d6844:	4630      	mov	r0, r6
   d6846:	f000 fdde 	bl	d7406 <_ZdlPvj>
        p_->setError(std::move(error));
   d684a:	4668      	mov	r0, sp
   d684c:	f7ff ff1f 	bl	d668e <_ZN8particle5ErrorD1Ev>
    }
   d6850:	b009      	add	sp, #36	; 0x24
   d6852:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6854:	4631      	mov	r1, r6
   d6856:	a802      	add	r0, sp, #8
   d6858:	f7ff ffb0 	bl	d67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d685c:	68e0      	ldr	r0, [r4, #12]
   d685e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6862:	b108      	cbz	r0, d6868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6864:	f001 fbf8 	bl	d8058 <strdup>
        type_(type) {
   d6868:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d686a:	2010      	movs	r0, #16
   d686c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6870:	f7fd fc11 	bl	d4096 <_Znwj>
   d6874:	4605      	mov	r5, r0
   d6876:	b1e8      	cbz	r0, d68b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6878:	2700      	movs	r7, #0
   d687a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d687c:	2018      	movs	r0, #24
   d687e:	f7fd fc0a 	bl	d4096 <_Znwj>
   d6882:	4604      	mov	r4, r0
   d6884:	b188      	cbz	r0, d68aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6886:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6888:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d688a:	a802      	add	r0, sp, #8
   d688c:	f7ff fda6 	bl	d63dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6890:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6892:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6894:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6896:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6898:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d689a:	a906      	add	r1, sp, #24
   d689c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d689e:	60e3      	str	r3, [r4, #12]
   d68a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d68a4:	9205      	str	r2, [sp, #20]
   d68a6:	f7ff fee5 	bl	d6674 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d68aa:	4b08      	ldr	r3, [pc, #32]	; (d68cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d68ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68ae:	4b08      	ldr	r3, [pc, #32]	; (d68d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d68b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d68b4:	a806      	add	r0, sp, #24
   d68b6:	f7ff feea 	bl	d668e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d68ba:	a802      	add	r0, sp, #8
   d68bc:	f7ff fd7f 	bl	d63be <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d68c0:	2200      	movs	r2, #0
   d68c2:	4629      	mov	r1, r5
   d68c4:	4803      	ldr	r0, [pc, #12]	; (d68d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d68c6:	f7fe ff0d 	bl	d56e4 <application_thread_invoke>
   d68ca:	e7b7      	b.n	d683c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d68cc:	000d6767 	.word	0x000d6767
   d68d0:	000d69fd 	.word	0x000d69fd
   d68d4:	000d6f59 	.word	0x000d6f59

000d68d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d68d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d68dc:	b08a      	sub	sp, #40	; 0x28
   d68de:	4605      	mov	r5, r0
   d68e0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d68e4:	460c      	mov	r4, r1
   d68e6:	4617      	mov	r7, r2
   d68e8:	4698      	mov	r8, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d68ea:	f7fe ff99 	bl	d5820 <spark_cloud_flag_connected>
   d68ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d68f0:	4682      	mov	sl, r0
   d68f2:	bb38      	cbnz	r0, d6944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d68f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d68f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d68fa:	a905      	add	r1, sp, #20
   d68fc:	4630      	mov	r0, r6
   d68fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6902:	f7ff feb7 	bl	d6674 <_ZN8particle5ErrorC1EOS0_>
   d6906:	2014      	movs	r0, #20
   d6908:	f7fd fbc5 	bl	d4096 <_Znwj>
   d690c:	4604      	mov	r4, r0
   d690e:	b148      	cbz	r0, d6924 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6910:	2302      	movs	r3, #2
   d6912:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6914:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6916:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d691a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d691c:	4631      	mov	r1, r6
   d691e:	300c      	adds	r0, #12
   d6920:	f7ff fea8 	bl	d6674 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6924:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6926:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6928:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d692c:	f7ff ff32 	bl	d6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6930:	4630      	mov	r0, r6
   d6932:	f7ff feac 	bl	d668e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6936:	a805      	add	r0, sp, #20
   d6938:	f7ff fea9 	bl	d668e <_ZN8particle5ErrorD1Ev>
}
   d693c:	4628      	mov	r0, r5
   d693e:	b00a      	add	sp, #40	; 0x28
   d6940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6944:	230c      	movs	r3, #12
   d6946:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d694a:	2014      	movs	r0, #20
   d694c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6950:	9307      	str	r3, [sp, #28]
   d6952:	f7fd fba0 	bl	d4096 <_Znwj>
   d6956:	4601      	mov	r1, r0
   d6958:	b128      	cbz	r0, d6966 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d695a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d695e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6962:	f880 a001 	strb.w	sl, [r0, #1]
   d6966:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6968:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d696a:	f7ff ff13 	bl	d6794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d696e:	4b22      	ldr	r3, [pc, #136]	; (d69f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6970:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6972:	2008      	movs	r0, #8
   d6974:	f7fd fb8f 	bl	d4096 <_Znwj>
   d6978:	4682      	mov	sl, r0
   d697a:	b128      	cbz	r0, d6988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d697c:	9b03      	ldr	r3, [sp, #12]
   d697e:	f840 3b04 	str.w	r3, [r0], #4
   d6982:	a904      	add	r1, sp, #16
   d6984:	f7ff faf6 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6988:	9600      	str	r6, [sp, #0]
   d698a:	fa5f f389 	uxtb.w	r3, r9
   d698e:	4642      	mov	r2, r8
   d6990:	4639      	mov	r1, r7
   d6992:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6994:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6998:	f7fe ff4a 	bl	d5830 <spark_send_event>
   d699c:	b9b8      	cbnz	r0, d69ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d699e:	9b03      	ldr	r3, [sp, #12]
   d69a0:	785b      	ldrb	r3, [r3, #1]
   d69a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d69a6:	b993      	cbnz	r3, d69ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d69a8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d69ac:	a905      	add	r1, sp, #20
   d69ae:	a803      	add	r0, sp, #12
   d69b0:	9205      	str	r2, [sp, #20]
   d69b2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d69b6:	f7ff ff11 	bl	d67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d69ba:	a805      	add	r0, sp, #20
   d69bc:	f7ff fe67 	bl	d668e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d69c0:	a805      	add	r0, sp, #20
   d69c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d69c4:	f7ff fea7 	bl	d6716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d69c8:	a806      	add	r0, sp, #24
   d69ca:	f7fd ff30 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69ce:	9b03      	ldr	r3, [sp, #12]
   d69d0:	9305      	str	r3, [sp, #20]
   d69d2:	a904      	add	r1, sp, #16
   d69d4:	a806      	add	r0, sp, #24
   d69d6:	f7ff facd 	bl	d5f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69da:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d69dc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69de:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d69e0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d69e2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d69e4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d69e6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d69e8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d69ea:	f7fd ff20 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69ee:	a804      	add	r0, sp, #16
   d69f0:	f7fd ff1d 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d69f4:	e7a2      	b.n	d693c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d69f6:	bf00      	nop
   d69f8:	000d6ac1 	.word	0x000d6ac1

000d69fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d69fc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d69fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a00:	4605      	mov	r5, r0
	  switch (__op)
   d6a02:	d007      	beq.n	d6a14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6a04:	2a03      	cmp	r2, #3
   d6a06:	d018      	beq.n	d6a3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6a08:	2a01      	cmp	r2, #1
   d6a0a:	d101      	bne.n	d6a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6a0c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6a0e:	6003      	str	r3, [r0, #0]
	}
   d6a10:	2000      	movs	r0, #0
   d6a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6a14:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6a16:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6a18:	f7fd fb3d 	bl	d4096 <_Znwj>
   d6a1c:	4604      	mov	r4, r0
   d6a1e:	b150      	cbz	r0, d6a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6a20:	4631      	mov	r1, r6
   d6a22:	f7ff fecb 	bl	d67bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6a26:	6930      	ldr	r0, [r6, #16]
   d6a28:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6a2c:	b108      	cbz	r0, d6a32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6a2e:	f001 fb13 	bl	d8058 <strdup>
        type_(type) {
   d6a32:	6120      	str	r0, [r4, #16]
   d6a34:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6a36:	602c      	str	r4, [r5, #0]
	}
   d6a38:	e7ea      	b.n	d6a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6a3a:	6804      	ldr	r4, [r0, #0]
   d6a3c:	2c00      	cmp	r4, #0
   d6a3e:	d0e7      	beq.n	d6a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6a40:	f104 0010 	add.w	r0, r4, #16
   d6a44:	f7ff fe23 	bl	d668e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6a48:	4620      	mov	r0, r4
   d6a4a:	f7ff fcb8 	bl	d63be <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6a4e:	2118      	movs	r1, #24
   d6a50:	4620      	mov	r0, r4
   d6a52:	f000 fcd8 	bl	d7406 <_ZdlPvj>
   d6a56:	e7db      	b.n	d6a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6a58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a5a:	2300      	movs	r3, #0
   d6a5c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6a5e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6a60:	4604      	mov	r4, r0
   d6a62:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6a64:	b12b      	cbz	r3, d6a72 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a66:	2202      	movs	r2, #2
   d6a68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a6a:	68eb      	ldr	r3, [r5, #12]
   d6a6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a6e:	68ab      	ldr	r3, [r5, #8]
   d6a70:	60a3      	str	r3, [r4, #8]
    }
   d6a72:	4620      	mov	r0, r4
   d6a74:	bd38      	pop	{r3, r4, r5, pc}

000d6a76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6a76:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a78:	b570      	push	{r4, r5, r6, lr}
   d6a7a:	4604      	mov	r4, r0
	  switch (__op)
   d6a7c:	d007      	beq.n	d6a8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6a7e:	2a03      	cmp	r2, #3
   d6a80:	d012      	beq.n	d6aa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6a82:	2a01      	cmp	r2, #1
   d6a84:	d101      	bne.n	d6a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6a86:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6a88:	6003      	str	r3, [r0, #0]
	}
   d6a8a:	2000      	movs	r0, #0
   d6a8c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6a8e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6a90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6a92:	f7fd fb00 	bl	d4096 <_Znwj>
   d6a96:	4605      	mov	r5, r0
   d6a98:	b120      	cbz	r0, d6aa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6a9a:	4631      	mov	r1, r6
   d6a9c:	f7ff ffdc 	bl	d6a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6aa0:	7c33      	ldrb	r3, [r6, #16]
   d6aa2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6aa4:	6025      	str	r5, [r4, #0]
	}
   d6aa6:	e7f0      	b.n	d6a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6aa8:	6804      	ldr	r4, [r0, #0]
   d6aaa:	2c00      	cmp	r4, #0
   d6aac:	d0ed      	beq.n	d6a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6aae:	4620      	mov	r0, r4
   d6ab0:	f7ff fc85 	bl	d63be <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6ab4:	2114      	movs	r1, #20
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	f000 fca5 	bl	d7406 <_ZdlPvj>
   d6abc:	e7e5      	b.n	d6a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6ac0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ac2:	b089      	sub	sp, #36	; 0x24
   d6ac4:	4604      	mov	r4, r0
   d6ac6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6ac8:	a801      	add	r0, sp, #4
   d6aca:	4611      	mov	r1, r2
   d6acc:	f7ff fe23 	bl	d6716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6ad0:	b1a4      	cbz	r4, d6afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6ad2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6ad4:	b11d      	cbz	r5, d6ade <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6ad6:	4628      	mov	r0, r5
   d6ad8:	f001 fabe 	bl	d8058 <strdup>
   d6adc:	4605      	mov	r5, r0
   d6ade:	a801      	add	r0, sp, #4
   d6ae0:	a903      	add	r1, sp, #12
        type_(type) {
   d6ae2:	9503      	str	r5, [sp, #12]
   d6ae4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6ae8:	f7ff fe78 	bl	d67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6aec:	a803      	add	r0, sp, #12
   d6aee:	f7ff fdce 	bl	d668e <_ZN8particle5ErrorD1Ev>
   d6af2:	a802      	add	r0, sp, #8
   d6af4:	f7fd fe9b 	bl	d482e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6af8:	b009      	add	sp, #36	; 0x24
   d6afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6afc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6afe:	2301      	movs	r3, #1
   d6b00:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6b04:	2a00      	cmp	r2, #0
   d6b06:	d103      	bne.n	d6b10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6b08:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6b0c:	2900      	cmp	r1, #0
   d6b0e:	d1f7      	bne.n	d6b00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6b10:	d1ef      	bne.n	d6af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6b12:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6b14:	f3bf 8f5b 	dmb	ish
   d6b18:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6b1a:	1d2b      	adds	r3, r5, #4
   d6b1c:	f3bf 8f5b 	dmb	ish
   d6b20:	e853 6f00 	ldrex	r6, [r3]
   d6b24:	e843 4200 	strex	r2, r4, [r3]
   d6b28:	2a00      	cmp	r2, #0
   d6b2a:	d1f9      	bne.n	d6b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6b2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6b30:	2e00      	cmp	r6, #0
   d6b32:	d0de      	beq.n	d6af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6b34:	4620      	mov	r0, r4
   d6b36:	f7fe fdcd 	bl	d56d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6b3a:	4607      	mov	r7, r0
   d6b3c:	b160      	cbz	r0, d6b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b3e:	f105 010c 	add.w	r1, r5, #12
   d6b42:	4630      	mov	r0, r6
   d6b44:	f7ff fe16 	bl	d6774 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6b48:	4630      	mov	r0, r6
   d6b4a:	f7ff fc38 	bl	d63be <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6b4e:	2110      	movs	r1, #16
   d6b50:	4630      	mov	r0, r6
   d6b52:	f000 fc58 	bl	d7406 <_ZdlPvj>
   d6b56:	e7cc      	b.n	d6af2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b58:	4631      	mov	r1, r6
   d6b5a:	a803      	add	r0, sp, #12
   d6b5c:	f7ff ff7c 	bl	d6a58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b60:	7b2b      	ldrb	r3, [r5, #12]
   d6b62:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b66:	2010      	movs	r0, #16
   d6b68:	f7fd fa95 	bl	d4096 <_Znwj>
   d6b6c:	4605      	mov	r5, r0
   d6b6e:	b1d0      	cbz	r0, d6ba6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6b70:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b72:	2014      	movs	r0, #20
   d6b74:	f7fd fa8f 	bl	d4096 <_Znwj>
   d6b78:	4604      	mov	r4, r0
   d6b7a:	b178      	cbz	r0, d6b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6b7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6b7e:	4601      	mov	r1, r0
   d6b80:	a803      	add	r0, sp, #12
   d6b82:	f7ff fc2b 	bl	d63dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b8a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b8c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6b8e:	9205      	str	r2, [sp, #20]
   d6b90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b92:	60e3      	str	r3, [r4, #12]
   d6b94:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6b98:	9206      	str	r2, [sp, #24]
   d6b9a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6b9c:	4b06      	ldr	r3, [pc, #24]	; (d6bb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6b9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6ba0:	4b06      	ldr	r3, [pc, #24]	; (d6bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ba2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6ba4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6ba6:	a803      	add	r0, sp, #12
   d6ba8:	f7ff fc09 	bl	d63be <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6bac:	2200      	movs	r2, #0
   d6bae:	4629      	mov	r1, r5
   d6bb0:	4803      	ldr	r0, [pc, #12]	; (d6bc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6bb2:	f7fe fd97 	bl	d56e4 <application_thread_invoke>
   d6bb6:	e7c7      	b.n	d6b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6bb8:	000d6787 	.word	0x000d6787
   d6bbc:	000d6a77 	.word	0x000d6a77
   d6bc0:	000d6f59 	.word	0x000d6f59

000d6bc4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6bc4:	4770      	bx	lr

000d6bc6 <_ZN9IPAddressD0Ev>:
   d6bc6:	b510      	push	{r4, lr}
   d6bc8:	2118      	movs	r1, #24
   d6bca:	4604      	mov	r4, r0
   d6bcc:	f000 fc1b 	bl	d7406 <_ZdlPvj>
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	bd10      	pop	{r4, pc}

000d6bd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6bd6:	7d03      	ldrb	r3, [r0, #20]
   d6bd8:	2b06      	cmp	r3, #6
{
   d6bda:	b08d      	sub	sp, #52	; 0x34
   d6bdc:	460e      	mov	r6, r1
   d6bde:	f100 0704 	add.w	r7, r0, #4
   d6be2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6be6:	d012      	beq.n	d6c0e <_ZNK9IPAddress7printToER5Print+0x3a>
   d6be8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d6bec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6bf0:	220a      	movs	r2, #10
   d6bf2:	4630      	mov	r0, r6
   d6bf4:	f7ff fa1f 	bl	d6036 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bf8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bfa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6bfc:	d019      	beq.n	d6c32 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6bfe:	2c00      	cmp	r4, #0
   d6c00:	d0f4      	beq.n	d6bec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6c02:	212e      	movs	r1, #46	; 0x2e
   d6c04:	4630      	mov	r0, r6
   d6c06:	f7ff f9fd 	bl	d6004 <_ZN5Print5printEc>
   d6c0a:	4404      	add	r4, r0
   d6c0c:	e7ee      	b.n	d6bec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6c0e:	232f      	movs	r3, #47	; 0x2f
   d6c10:	466a      	mov	r2, sp
   d6c12:	4639      	mov	r1, r7
   d6c14:	200a      	movs	r0, #10
		buf[0] = 0;
   d6c16:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6c1a:	f7fe fc33 	bl	d5484 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6c1e:	4668      	mov	r0, sp
   d6c20:	f001 fa37 	bl	d8092 <strlen>
   d6c24:	6833      	ldr	r3, [r6, #0]
   d6c26:	4602      	mov	r2, r0
   d6c28:	68db      	ldr	r3, [r3, #12]
   d6c2a:	4669      	mov	r1, sp
   d6c2c:	4630      	mov	r0, r6
   d6c2e:	4798      	blx	r3
   d6c30:	4604      	mov	r4, r0
    }
    return n;
}
   d6c32:	4620      	mov	r0, r4
   d6c34:	b00d      	add	sp, #52	; 0x34
   d6c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c38 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6c38:	b510      	push	{r4, lr}
   d6c3a:	4b05      	ldr	r3, [pc, #20]	; (d6c50 <_ZN9IPAddressC1Ev+0x18>)
   d6c3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6c3e:	2211      	movs	r2, #17
   d6c40:	f840 3b04 	str.w	r3, [r0], #4
   d6c44:	2100      	movs	r1, #0
   d6c46:	f001 f9db 	bl	d8000 <memset>
}
   d6c4a:	4620      	mov	r0, r4
   d6c4c:	bd10      	pop	{r4, pc}
   d6c4e:	bf00      	nop
   d6c50:	000d8468 	.word	0x000d8468

000d6c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6c54:	4603      	mov	r3, r0
   d6c56:	4a07      	ldr	r2, [pc, #28]	; (d6c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6c58:	b510      	push	{r4, lr}
   d6c5a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6c5e:	f101 0210 	add.w	r2, r1, #16
   d6c62:	f851 4b04 	ldr.w	r4, [r1], #4
   d6c66:	f843 4b04 	str.w	r4, [r3], #4
   d6c6a:	4291      	cmp	r1, r2
   d6c6c:	d1f9      	bne.n	d6c62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6c6e:	780a      	ldrb	r2, [r1, #0]
   d6c70:	701a      	strb	r2, [r3, #0]
}
   d6c72:	bd10      	pop	{r4, pc}
   d6c74:	000d8468 	.word	0x000d8468

000d6c78 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6c78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6c8a:	2304      	movs	r3, #4
   d6c8c:	6041      	str	r1, [r0, #4]
   d6c8e:	7503      	strb	r3, [r0, #20]
}
   d6c90:	bd10      	pop	{r4, pc}

000d6c92 <_ZN9IPAddressaSEPKh>:
{
   d6c92:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c94:	78cb      	ldrb	r3, [r1, #3]
   d6c96:	9300      	str	r3, [sp, #0]
   d6c98:	788b      	ldrb	r3, [r1, #2]
   d6c9a:	784a      	ldrb	r2, [r1, #1]
   d6c9c:	7809      	ldrb	r1, [r1, #0]
   d6c9e:	f7ff ffeb 	bl	d6c78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6ca2:	b002      	add	sp, #8
   d6ca4:	bd10      	pop	{r4, pc}

000d6ca6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ca6:	7441      	strb	r1, [r0, #17]
}
   d6ca8:	4770      	bx	lr

000d6caa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6caa:	4770      	bx	lr

000d6cac <_ZN9USBSerial4readEv>:
{
   d6cac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6cae:	2100      	movs	r1, #0
   d6cb0:	7c00      	ldrb	r0, [r0, #16]
   d6cb2:	f7fe fccf 	bl	d5654 <HAL_USB_USART_Receive_Data>
}
   d6cb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6cba:	bd08      	pop	{r3, pc}

000d6cbc <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6cbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6cbe:	2101      	movs	r1, #1
   d6cc0:	7c00      	ldrb	r0, [r0, #16]
   d6cc2:	f7fe fcc7 	bl	d5654 <HAL_USB_USART_Receive_Data>
}
   d6cc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6cca:	bd08      	pop	{r3, pc}

000d6ccc <_ZN9USBSerial17availableForWriteEv>:
{
   d6ccc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6cce:	7c00      	ldrb	r0, [r0, #16]
   d6cd0:	f7fe fcb8 	bl	d5644 <HAL_USB_USART_Available_Data_For_Write>
}
   d6cd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cd8:	bd08      	pop	{r3, pc}

000d6cda <_ZN9USBSerial9availableEv>:
{
   d6cda:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6cdc:	7c00      	ldrb	r0, [r0, #16]
   d6cde:	f7fe fca9 	bl	d5634 <HAL_USB_USART_Available_Data>
}
   d6ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ce6:	bd08      	pop	{r3, pc}

000d6ce8 <_ZN9USBSerial5writeEh>:
{
   d6ce8:	b513      	push	{r0, r1, r4, lr}
   d6cea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cec:	7c00      	ldrb	r0, [r0, #16]
{
   d6cee:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cf0:	f7fe fca8 	bl	d5644 <HAL_USB_USART_Available_Data_For_Write>
   d6cf4:	2800      	cmp	r0, #0
   d6cf6:	9901      	ldr	r1, [sp, #4]
   d6cf8:	dc01      	bgt.n	d6cfe <_ZN9USBSerial5writeEh+0x16>
   d6cfa:	7c60      	ldrb	r0, [r4, #17]
   d6cfc:	b120      	cbz	r0, d6d08 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6cfe:	7c20      	ldrb	r0, [r4, #16]
   d6d00:	f7fe fcb0 	bl	d5664 <HAL_USB_USART_Send_Data>
   d6d04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6d08:	b002      	add	sp, #8
   d6d0a:	bd10      	pop	{r4, pc}

000d6d0c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6d0c:	7c00      	ldrb	r0, [r0, #16]
   d6d0e:	f7fe bcb1 	b.w	d5674 <HAL_USB_USART_Flush_Data>

000d6d12 <_ZN9USBSerialD0Ev>:
   d6d12:	b510      	push	{r4, lr}
   d6d14:	2114      	movs	r1, #20
   d6d16:	4604      	mov	r4, r0
   d6d18:	f000 fb75 	bl	d7406 <_ZdlPvj>
   d6d1c:	4620      	mov	r0, r4
   d6d1e:	bd10      	pop	{r4, pc}

000d6d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d20:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d26:	4604      	mov	r4, r0
   d6d28:	4608      	mov	r0, r1
   d6d2a:	2100      	movs	r1, #0
   d6d2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6d30:	4b04      	ldr	r3, [pc, #16]	; (d6d44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d32:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6d34:	2301      	movs	r3, #1
  _serial = serial;
   d6d36:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6d38:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6d3a:	4611      	mov	r1, r2
   d6d3c:	f7fe fc6a 	bl	d5614 <HAL_USB_USART_Init>
}
   d6d40:	4620      	mov	r0, r4
   d6d42:	bd10      	pop	{r4, pc}
   d6d44:	000d847c 	.word	0x000d847c

000d6d48 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6d48:	7c00      	ldrb	r0, [r0, #16]
   d6d4a:	2200      	movs	r2, #0
   d6d4c:	f7fe bc6a 	b.w	d5624 <HAL_USB_USART_Begin>

000d6d50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d52:	2214      	movs	r2, #20
{
   d6d54:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d56:	2100      	movs	r1, #0
   d6d58:	f001 f952 	bl	d8000 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	bd10      	pop	{r4, pc}

000d6d60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d62:	4c10      	ldr	r4, [pc, #64]	; (d6da4 <_Z16_fetch_usbserialv+0x44>)
{
   d6d64:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d66:	a803      	add	r0, sp, #12
   d6d68:	f7ff fff2 	bl	d6d50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d6c:	7821      	ldrb	r1, [r4, #0]
   d6d6e:	f3bf 8f5b 	dmb	ish
   d6d72:	f011 0101 	ands.w	r1, r1, #1
   d6d76:	d111      	bne.n	d6d9c <_Z16_fetch_usbserialv+0x3c>
   d6d78:	4620      	mov	r0, r4
   d6d7a:	9101      	str	r1, [sp, #4]
   d6d7c:	f7fd f991 	bl	d40a2 <__cxa_guard_acquire>
   d6d80:	9901      	ldr	r1, [sp, #4]
   d6d82:	b158      	cbz	r0, d6d9c <_Z16_fetch_usbserialv+0x3c>
   d6d84:	aa03      	add	r2, sp, #12
   d6d86:	4808      	ldr	r0, [pc, #32]	; (d6da8 <_Z16_fetch_usbserialv+0x48>)
   d6d88:	f7ff ffca 	bl	d6d20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	f7fd f98d 	bl	d40ac <__cxa_guard_release>
   d6d92:	4a06      	ldr	r2, [pc, #24]	; (d6dac <_Z16_fetch_usbserialv+0x4c>)
   d6d94:	4906      	ldr	r1, [pc, #24]	; (d6db0 <_Z16_fetch_usbserialv+0x50>)
   d6d96:	4804      	ldr	r0, [pc, #16]	; (d6da8 <_Z16_fetch_usbserialv+0x48>)
   d6d98:	f000 fb30 	bl	d73fc <__aeabi_atexit>
	return _usbserial;
}
   d6d9c:	4802      	ldr	r0, [pc, #8]	; (d6da8 <_Z16_fetch_usbserialv+0x48>)
   d6d9e:	b008      	add	sp, #32
   d6da0:	bd10      	pop	{r4, pc}
   d6da2:	bf00      	nop
   d6da4:	2003e640 	.word	0x2003e640
   d6da8:	2003e644 	.word	0x2003e644
   d6dac:	2003e490 	.word	0x2003e490
   d6db0:	000d6cab 	.word	0x000d6cab

000d6db4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6db4:	2200      	movs	r2, #0
   d6db6:	6840      	ldr	r0, [r0, #4]
   d6db8:	4611      	mov	r1, r2
   d6dba:	f7fe bcd9 	b.w	d5770 <network_ready>

000d6dbe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6dbe:	2200      	movs	r2, #0
   d6dc0:	6840      	ldr	r0, [r0, #4]
   d6dc2:	4611      	mov	r1, r2
   d6dc4:	f7fe bcf4 	b.w	d57b0 <network_listening>

000d6dc8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6dc8:	2200      	movs	r2, #0
   d6dca:	6840      	ldr	r0, [r0, #4]
   d6dcc:	4611      	mov	r1, r2
   d6dce:	f7fe bcff 	b.w	d57d0 <network_get_listen_timeout>

000d6dd2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6dd2:	6840      	ldr	r0, [r0, #4]
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	f7fe bcf3 	b.w	d57c0 <network_set_listen_timeout>

000d6dda <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6dda:	6840      	ldr	r0, [r0, #4]
   d6ddc:	2200      	movs	r2, #0
   d6dde:	f081 0101 	eor.w	r1, r1, #1
   d6de2:	f7fe bcdd 	b.w	d57a0 <network_listen>

000d6de6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6de6:	2300      	movs	r3, #0
   d6de8:	6840      	ldr	r0, [r0, #4]
   d6dea:	461a      	mov	r2, r3
   d6dec:	4619      	mov	r1, r3
   d6dee:	f7fe bccf 	b.w	d5790 <network_off>

000d6df2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6df2:	2300      	movs	r3, #0
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	461a      	mov	r2, r3
   d6df8:	4619      	mov	r1, r3
   d6dfa:	f7fe bcc1 	b.w	d5780 <network_on>

000d6dfe <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6dfe:	2200      	movs	r2, #0
   d6e00:	6840      	ldr	r0, [r0, #4]
   d6e02:	4611      	mov	r1, r2
   d6e04:	f7fe bca4 	b.w	d5750 <network_connecting>

000d6e08 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e08:	6840      	ldr	r0, [r0, #4]
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	2102      	movs	r1, #2
   d6e0e:	f7fe bca7 	b.w	d5760 <network_disconnect>

000d6e12 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6e12:	2300      	movs	r3, #0
   d6e14:	6840      	ldr	r0, [r0, #4]
   d6e16:	461a      	mov	r2, r3
   d6e18:	f7fe bc92 	b.w	d5740 <network_connect>

000d6e1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6e1c:	4b08      	ldr	r3, [pc, #32]	; (d6e40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6e1e:	b510      	push	{r4, lr}
   d6e20:	2428      	movs	r4, #40	; 0x28
   d6e22:	4622      	mov	r2, r4
   d6e24:	4618      	mov	r0, r3
   d6e26:	2100      	movs	r1, #0
   d6e28:	f001 f8ea 	bl	d8000 <memset>
   d6e2c:	4b05      	ldr	r3, [pc, #20]	; (d6e44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d6e2e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d6e30:	f04f 32ff 	mov.w	r2, #4294967295
   d6e34:	6042      	str	r2, [r0, #4]
   d6e36:	2204      	movs	r2, #4
   d6e38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6e3a:	4a03      	ldr	r2, [pc, #12]	; (d6e48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6e3c:	601a      	str	r2, [r3, #0]
   d6e3e:	bd10      	pop	{r4, pc}
   d6e40:	2003e660 	.word	0x2003e660
   d6e44:	2003e658 	.word	0x2003e658
   d6e48:	000d84ac 	.word	0x000d84ac

000d6e4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6e4c:	4770      	bx	lr

000d6e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6e4e:	7441      	strb	r1, [r0, #17]
}
   d6e50:	4770      	bx	lr

000d6e52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6e52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6e54:	7c00      	ldrb	r0, [r0, #16]
   d6e56:	f7fe fb55 	bl	d5504 <hal_usart_available_data_for_write>
}
   d6e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e5e:	bd08      	pop	{r3, pc}

000d6e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6e62:	7c00      	ldrb	r0, [r0, #16]
   d6e64:	f7fe fb26 	bl	d54b4 <hal_usart_available>
}
   d6e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e6c:	bd08      	pop	{r3, pc}

000d6e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6e70:	7c00      	ldrb	r0, [r0, #16]
   d6e72:	f7fe fb2f 	bl	d54d4 <hal_usart_peek>
}
   d6e76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6e7a:	bd08      	pop	{r3, pc}

000d6e7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6e7e:	7c00      	ldrb	r0, [r0, #16]
   d6e80:	f7fe fb20 	bl	d54c4 <hal_usart_read>
}
   d6e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6e88:	bd08      	pop	{r3, pc}

000d6e8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6e8a:	7c00      	ldrb	r0, [r0, #16]
   d6e8c:	f7fe bb2a 	b.w	d54e4 <hal_usart_flush>

000d6e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6e92:	7c45      	ldrb	r5, [r0, #17]
{
   d6e94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6e96:	b12d      	cbz	r5, d6ea4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6e9a:	b003      	add	sp, #12
   d6e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6ea0:	f7fe bb00 	b.w	d54a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6ea4:	7c00      	ldrb	r0, [r0, #16]
   d6ea6:	9101      	str	r1, [sp, #4]
   d6ea8:	f7fe fb2c 	bl	d5504 <hal_usart_available_data_for_write>
   d6eac:	2800      	cmp	r0, #0
   d6eae:	9901      	ldr	r1, [sp, #4]
   d6eb0:	dcf2      	bgt.n	d6e98 <_ZN11USARTSerial5writeEh+0x8>
}
   d6eb2:	4628      	mov	r0, r5
   d6eb4:	b003      	add	sp, #12
   d6eb6:	bd30      	pop	{r4, r5, pc}

000d6eb8 <_ZN11USARTSerialD0Ev>:
   d6eb8:	b510      	push	{r4, lr}
   d6eba:	2114      	movs	r1, #20
   d6ebc:	4604      	mov	r4, r0
   d6ebe:	f000 faa2 	bl	d7406 <_ZdlPvj>
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	bd10      	pop	{r4, pc}
	...

000d6ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6ec8:	b510      	push	{r4, lr}
   d6eca:	f04f 0c00 	mov.w	ip, #0
   d6ece:	4604      	mov	r4, r0
   d6ed0:	4608      	mov	r0, r1
   d6ed2:	4611      	mov	r1, r2
   d6ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6ed8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6edc:	4a04      	ldr	r2, [pc, #16]	; (d6ef0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6ede:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6ee0:	2201      	movs	r2, #1
  _serial = serial;
   d6ee2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6ee4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6ee6:	461a      	mov	r2, r3
   d6ee8:	f7fe fad4 	bl	d5494 <hal_usart_init>
}
   d6eec:	4620      	mov	r0, r4
   d6eee:	bd10      	pop	{r4, pc}
   d6ef0:	000d84e8 	.word	0x000d84e8

000d6ef4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6ef4:	7c00      	ldrb	r0, [r0, #16]
   d6ef6:	2300      	movs	r3, #0
   d6ef8:	f7fe bb0c 	b.w	d5514 <hal_usart_begin_config>

000d6efc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6efc:	2200      	movs	r2, #0
   d6efe:	f7ff bff9 	b.w	d6ef4 <_ZN11USARTSerial5beginEmm>
	...

000d6f04 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6f04:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6f06:	4c0e      	ldr	r4, [pc, #56]	; (d6f40 <_Z22__fetch_global_Serial1v+0x3c>)
   d6f08:	7821      	ldrb	r1, [r4, #0]
   d6f0a:	f3bf 8f5b 	dmb	ish
   d6f0e:	f011 0101 	ands.w	r1, r1, #1
   d6f12:	d112      	bne.n	d6f3a <_Z22__fetch_global_Serial1v+0x36>
   d6f14:	4620      	mov	r0, r4
   d6f16:	9101      	str	r1, [sp, #4]
   d6f18:	f7fd f8c3 	bl	d40a2 <__cxa_guard_acquire>
   d6f1c:	9901      	ldr	r1, [sp, #4]
   d6f1e:	b160      	cbz	r0, d6f3a <_Z22__fetch_global_Serial1v+0x36>
   d6f20:	4a08      	ldr	r2, [pc, #32]	; (d6f44 <_Z22__fetch_global_Serial1v+0x40>)
   d6f22:	4b09      	ldr	r3, [pc, #36]	; (d6f48 <_Z22__fetch_global_Serial1v+0x44>)
   d6f24:	4809      	ldr	r0, [pc, #36]	; (d6f4c <_Z22__fetch_global_Serial1v+0x48>)
   d6f26:	f7ff ffcf 	bl	d6ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	f7fd f8be 	bl	d40ac <__cxa_guard_release>
   d6f30:	4a07      	ldr	r2, [pc, #28]	; (d6f50 <_Z22__fetch_global_Serial1v+0x4c>)
   d6f32:	4908      	ldr	r1, [pc, #32]	; (d6f54 <_Z22__fetch_global_Serial1v+0x50>)
   d6f34:	4805      	ldr	r0, [pc, #20]	; (d6f4c <_Z22__fetch_global_Serial1v+0x48>)
   d6f36:	f000 fa61 	bl	d73fc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6f3a:	4804      	ldr	r0, [pc, #16]	; (d6f4c <_Z22__fetch_global_Serial1v+0x48>)
   d6f3c:	b002      	add	sp, #8
   d6f3e:	bd10      	pop	{r4, pc}
   d6f40:	2003e688 	.word	0x2003e688
   d6f44:	2003e68c 	.word	0x2003e68c
   d6f48:	2003e710 	.word	0x2003e710
   d6f4c:	2003e794 	.word	0x2003e794
   d6f50:	2003e490 	.word	0x2003e490
   d6f54:	000d6e4d 	.word	0x000d6e4d

000d6f58 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6f58:	b510      	push	{r4, lr}
      if (_M_empty())
   d6f5a:	6883      	ldr	r3, [r0, #8]
   d6f5c:	4604      	mov	r4, r0
   d6f5e:	b90b      	cbnz	r3, d6f64 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6f60:	f000 fa79 	bl	d7456 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6f64:	68c3      	ldr	r3, [r0, #12]
   d6f66:	4798      	blx	r3
      if (_M_manager)
   d6f68:	68a3      	ldr	r3, [r4, #8]
   d6f6a:	b11b      	cbz	r3, d6f74 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f6c:	2203      	movs	r2, #3
   d6f6e:	4621      	mov	r1, r4
   d6f70:	4620      	mov	r0, r4
   d6f72:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6f74:	4620      	mov	r0, r4
   d6f76:	2110      	movs	r1, #16
}
   d6f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6f7c:	f000 ba43 	b.w	d7406 <_ZdlPvj>

000d6f80 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6f80:	4770      	bx	lr

000d6f82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f84:	4606      	mov	r6, r0
   d6f86:	4615      	mov	r5, r2
   d6f88:	460c      	mov	r4, r1
   d6f8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6f8c:	42bc      	cmp	r4, r7
   d6f8e:	d006      	beq.n	d6f9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6f90:	6833      	ldr	r3, [r6, #0]
   d6f92:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6f96:	689b      	ldr	r3, [r3, #8]
   d6f98:	4630      	mov	r0, r6
   d6f9a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6f9c:	e7f6      	b.n	d6f8c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6f9e:	4628      	mov	r0, r5
   d6fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fa2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6fa2:	7c00      	ldrb	r0, [r0, #16]
   d6fa4:	2200      	movs	r2, #0
   d6fa6:	f7fe bad5 	b.w	d5554 <hal_i2c_write>

000d6faa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6faa:	7c00      	ldrb	r0, [r0, #16]
   d6fac:	2100      	movs	r1, #0
   d6fae:	f7fe bad9 	b.w	d5564 <hal_i2c_available>

000d6fb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6fb2:	7c00      	ldrb	r0, [r0, #16]
   d6fb4:	2100      	movs	r1, #0
   d6fb6:	f7fe badd 	b.w	d5574 <hal_i2c_read>

000d6fba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6fba:	7c00      	ldrb	r0, [r0, #16]
   d6fbc:	2100      	movs	r1, #0
   d6fbe:	f7fe bae1 	b.w	d5584 <hal_i2c_peek>

000d6fc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6fc2:	7c00      	ldrb	r0, [r0, #16]
   d6fc4:	2100      	movs	r1, #0
   d6fc6:	f7fe bae5 	b.w	d5594 <hal_i2c_flush>

000d6fca <_ZN7TwoWireD0Ev>:
   d6fca:	b510      	push	{r4, lr}
   d6fcc:	2114      	movs	r1, #20
   d6fce:	4604      	mov	r4, r0
   d6fd0:	f000 fa19 	bl	d7406 <_ZdlPvj>
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	bd10      	pop	{r4, pc}

000d6fd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6fd8:	b510      	push	{r4, lr}
   d6fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fde:	4604      	mov	r4, r0
   d6fe0:	4608      	mov	r0, r1
   d6fe2:	2100      	movs	r1, #0
   d6fe4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6fe8:	4b03      	ldr	r3, [pc, #12]	; (d6ff8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6fea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6fec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6fee:	4611      	mov	r1, r2
   d6ff0:	f7fe fae0 	bl	d55b4 <hal_i2c_init>
}
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	bd10      	pop	{r4, pc}
   d6ff8:	000d8518 	.word	0x000d8518

000d6ffc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ffc:	2300      	movs	r3, #0
   d6ffe:	7c00      	ldrb	r0, [r0, #16]
   d7000:	461a      	mov	r2, r3
   d7002:	4619      	mov	r1, r3
   d7004:	f7fe ba8e 	b.w	d5524 <hal_i2c_begin>

000d7008 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d700a:	2200      	movs	r2, #0
   d700c:	2314      	movs	r3, #20
   d700e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7012:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7016:	780b      	ldrb	r3, [r1, #0]
   d7018:	f88d 3008 	strb.w	r3, [sp, #8]
   d701c:	684b      	ldr	r3, [r1, #4]
   d701e:	9303      	str	r3, [sp, #12]
   d7020:	68cb      	ldr	r3, [r1, #12]
   d7022:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7024:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7026:	7a0b      	ldrb	r3, [r1, #8]
   d7028:	9305      	str	r3, [sp, #20]
   d702a:	a901      	add	r1, sp, #4
   d702c:	f7fe fada 	bl	d55e4 <hal_i2c_request_ex>
}
   d7030:	b007      	add	sp, #28
   d7032:	f85d fb04 	ldr.w	pc, [sp], #4

000d7036 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d7036:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7038:	2300      	movs	r3, #0
   d703a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d703e:	684a      	ldr	r2, [r1, #4]
   d7040:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d7042:	2314      	movs	r3, #20
    };
   d7044:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d7046:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d704a:	780b      	ldrb	r3, [r1, #0]
    };
   d704c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d704e:	7a0a      	ldrb	r2, [r1, #8]
   d7050:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d7052:	7c00      	ldrb	r0, [r0, #16]
    };
   d7054:	f88d 3008 	strb.w	r3, [sp, #8]
   d7058:	aa01      	add	r2, sp, #4
   d705a:	4619      	mov	r1, r3
   d705c:	f7fe fa6a 	bl	d5534 <hal_i2c_begin_transmission>
}
   d7060:	b007      	add	sp, #28
   d7062:	f85d fb04 	ldr.w	pc, [sp], #4

000d7066 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7066:	7c00      	ldrb	r0, [r0, #16]
   d7068:	2200      	movs	r2, #0
   d706a:	f7fe ba6b 	b.w	d5544 <hal_i2c_end_transmission>

000d706e <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d706e:	7c00      	ldrb	r0, [r0, #16]
   d7070:	2100      	movs	r1, #0
   d7072:	f7fe ba97 	b.w	d55a4 <hal_i2c_is_enabled>

000d7076 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7076:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7078:	2100      	movs	r1, #0
   d707a:	7c00      	ldrb	r0, [r0, #16]
   d707c:	f7fe faa2 	bl	d55c4 <hal_i2c_lock>
}
   d7080:	fab0 f080 	clz	r0, r0
   d7084:	0940      	lsrs	r0, r0, #5
   d7086:	bd08      	pop	{r3, pc}

000d7088 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7088:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d708a:	2100      	movs	r1, #0
   d708c:	7c00      	ldrb	r0, [r0, #16]
   d708e:	f7fe faa1 	bl	d55d4 <hal_i2c_unlock>
}
   d7092:	fab0 f080 	clz	r0, r0
   d7096:	0940      	lsrs	r0, r0, #5
   d7098:	bd08      	pop	{r3, pc}

000d709a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d709a:	2300      	movs	r3, #0
   d709c:	6840      	ldr	r0, [r0, #4]
   d709e:	461a      	mov	r2, r3
   d70a0:	f7fe bb4e 	b.w	d5740 <network_connect>

000d70a4 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70a4:	6840      	ldr	r0, [r0, #4]
   d70a6:	2200      	movs	r2, #0
   d70a8:	2102      	movs	r1, #2
   d70aa:	f7fe bb59 	b.w	d5760 <network_disconnect>

000d70ae <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d70ae:	2200      	movs	r2, #0
   d70b0:	6840      	ldr	r0, [r0, #4]
   d70b2:	4611      	mov	r1, r2
   d70b4:	f7fe bb4c 	b.w	d5750 <network_connecting>

000d70b8 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d70b8:	2200      	movs	r2, #0
   d70ba:	6840      	ldr	r0, [r0, #4]
   d70bc:	4611      	mov	r1, r2
   d70be:	f7fe bb57 	b.w	d5770 <network_ready>

000d70c2 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d70c2:	2300      	movs	r3, #0
   d70c4:	6840      	ldr	r0, [r0, #4]
   d70c6:	461a      	mov	r2, r3
   d70c8:	4619      	mov	r1, r3
   d70ca:	f7fe bb59 	b.w	d5780 <network_on>

000d70ce <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d70ce:	2300      	movs	r3, #0
   d70d0:	6840      	ldr	r0, [r0, #4]
   d70d2:	461a      	mov	r2, r3
   d70d4:	4619      	mov	r1, r3
   d70d6:	f7fe bb5b 	b.w	d5790 <network_off>

000d70da <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d70da:	6840      	ldr	r0, [r0, #4]
   d70dc:	2100      	movs	r1, #0
   d70de:	f7fe bb7f 	b.w	d57e0 <network_is_on>

000d70e2 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d70e2:	6840      	ldr	r0, [r0, #4]
   d70e4:	2100      	movs	r1, #0
   d70e6:	f7fe bb83 	b.w	d57f0 <network_is_off>

000d70ea <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70ea:	6840      	ldr	r0, [r0, #4]
   d70ec:	2200      	movs	r2, #0
   d70ee:	f081 0101 	eor.w	r1, r1, #1
   d70f2:	f7fe bb55 	b.w	d57a0 <network_listen>

000d70f6 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d70f6:	6840      	ldr	r0, [r0, #4]
   d70f8:	2200      	movs	r2, #0
   d70fa:	f7fe bb61 	b.w	d57c0 <network_set_listen_timeout>

000d70fe <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70fe:	2200      	movs	r2, #0
   d7100:	6840      	ldr	r0, [r0, #4]
   d7102:	4611      	mov	r1, r2
   d7104:	f7fe bb64 	b.w	d57d0 <network_get_listen_timeout>

000d7108 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7108:	2200      	movs	r2, #0
   d710a:	6840      	ldr	r0, [r0, #4]
   d710c:	4611      	mov	r1, r2
   d710e:	f7fe bb4f 	b.w	d57b0 <network_listening>

000d7112 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7112:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7116:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7118:	b095      	sub	sp, #84	; 0x54
   d711a:	4616      	mov	r6, r2
   d711c:	460d      	mov	r5, r1
   d711e:	4607      	mov	r7, r0
    IPAddress addr;
   d7120:	f7ff fd8a 	bl	d6c38 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7124:	4621      	mov	r1, r4
   d7126:	2218      	movs	r2, #24
   d7128:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d712a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d712c:	f000 ff68 	bl	d8000 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7130:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7132:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7136:	4621      	mov	r1, r4
   d7138:	466b      	mov	r3, sp
   d713a:	aa0c      	add	r2, sp, #48	; 0x30
   d713c:	4630      	mov	r0, r6
   d713e:	f7fe f929 	bl	d5394 <netdb_getaddrinfo>
    if (!r) {
   d7142:	4604      	mov	r4, r0
   d7144:	2800      	cmp	r0, #0
   d7146:	d146      	bne.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7148:	4602      	mov	r2, r0
   d714a:	2101      	movs	r1, #1
   d714c:	6868      	ldr	r0, [r5, #4]
   d714e:	f7fe fb0f 	bl	d5770 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7152:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7154:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7156:	4622      	mov	r2, r4
   d7158:	6868      	ldr	r0, [r5, #4]
   d715a:	f7fe fb09 	bl	d5770 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d715e:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7160:	4681      	mov	r9, r0
        bool ok = false;
   d7162:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7164:	2e00      	cmp	r6, #0
   d7166:	d036      	beq.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7168:	2900      	cmp	r1, #0
   d716a:	d134      	bne.n	d71d6 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d716c:	6873      	ldr	r3, [r6, #4]
   d716e:	2b02      	cmp	r3, #2
   d7170:	d003      	beq.n	d717a <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7172:	2b0a      	cmp	r3, #10
   d7174:	d00b      	beq.n	d718e <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7176:	69f6      	ldr	r6, [r6, #28]
   d7178:	e7f4      	b.n	d7164 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d717a:	f1b8 0f00 	cmp.w	r8, #0
   d717e:	d004      	beq.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7180:	6971      	ldr	r1, [r6, #20]
   d7182:	4638      	mov	r0, r7
   d7184:	3104      	adds	r1, #4
   d7186:	f7ff fd84 	bl	d6c92 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d718a:	4641      	mov	r1, r8
   d718c:	e7f3      	b.n	d7176 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d718e:	f1b9 0f00 	cmp.w	r9, #0
   d7192:	d101      	bne.n	d7198 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7194:	4649      	mov	r1, r9
   d7196:	e7ee      	b.n	d7176 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7198:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d719a:	2210      	movs	r2, #16
   d719c:	a801      	add	r0, sp, #4
   d719e:	f000 ff2f 	bl	d8000 <memset>
                    a.v = 6;
   d71a2:	2306      	movs	r3, #6
   d71a4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71a8:	ad01      	add	r5, sp, #4
   d71aa:	f104 0308 	add.w	r3, r4, #8
   d71ae:	3418      	adds	r4, #24
   d71b0:	6818      	ldr	r0, [r3, #0]
   d71b2:	6859      	ldr	r1, [r3, #4]
   d71b4:	462a      	mov	r2, r5
   d71b6:	c203      	stmia	r2!, {r0, r1}
   d71b8:	3308      	adds	r3, #8
   d71ba:	42a3      	cmp	r3, r4
   d71bc:	4615      	mov	r5, r2
   d71be:	d1f7      	bne.n	d71b0 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d71c0:	a901      	add	r1, sp, #4
   d71c2:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d71c4:	ad07      	add	r5, sp, #28
   d71c6:	f7ff fd45 	bl	d6c54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71cc:	1d3c      	adds	r4, r7, #4
   d71ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71d0:	682b      	ldr	r3, [r5, #0]
   d71d2:	7023      	strb	r3, [r4, #0]
   d71d4:	e7de      	b.n	d7194 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d71d6:	9800      	ldr	r0, [sp, #0]
   d71d8:	f7fe f8d4 	bl	d5384 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d71dc:	4638      	mov	r0, r7
   d71de:	b015      	add	sp, #84	; 0x54
   d71e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d71e4:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d71e6:	4a03      	ldr	r2, [pc, #12]	; (d71f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d71e8:	601a      	str	r2, [r3, #0]
   d71ea:	2200      	movs	r2, #0
   d71ec:	605a      	str	r2, [r3, #4]

} // spark
   d71ee:	4770      	bx	lr
   d71f0:	2003e7a8 	.word	0x2003e7a8
   d71f4:	000d8540 	.word	0x000d8540

000d71f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d71f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d71fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d71fc:	d902      	bls.n	d7204 <pinAvailable+0xc>
    return false;
   d71fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7200:	b002      	add	sp, #8
   d7202:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7204:	f1a0 030b 	sub.w	r3, r0, #11
   d7208:	2b02      	cmp	r3, #2
   d720a:	d81a      	bhi.n	d7242 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d720c:	4c17      	ldr	r4, [pc, #92]	; (d726c <pinAvailable+0x74>)
   d720e:	7821      	ldrb	r1, [r4, #0]
   d7210:	f3bf 8f5b 	dmb	ish
   d7214:	f011 0101 	ands.w	r1, r1, #1
   d7218:	d10b      	bne.n	d7232 <pinAvailable+0x3a>
   d721a:	4620      	mov	r0, r4
   d721c:	9101      	str	r1, [sp, #4]
   d721e:	f7fc ff40 	bl	d40a2 <__cxa_guard_acquire>
   d7222:	9901      	ldr	r1, [sp, #4]
   d7224:	b128      	cbz	r0, d7232 <pinAvailable+0x3a>
   d7226:	4812      	ldr	r0, [pc, #72]	; (d7270 <pinAvailable+0x78>)
   d7228:	f7fe fd20 	bl	d5c6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d722c:	4620      	mov	r0, r4
   d722e:	f7fc ff3d 	bl	d40ac <__cxa_guard_release>
   d7232:	4b0f      	ldr	r3, [pc, #60]	; (d7270 <pinAvailable+0x78>)
   d7234:	7818      	ldrb	r0, [r3, #0]
   d7236:	f7fe f9e5 	bl	d5604 <hal_spi_is_enabled>
   d723a:	2800      	cmp	r0, #0
   d723c:	d1df      	bne.n	d71fe <pinAvailable+0x6>
  return true; // 'pin' is available
   d723e:	2001      	movs	r0, #1
   d7240:	e7de      	b.n	d7200 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7242:	2801      	cmp	r0, #1
   d7244:	d809      	bhi.n	d725a <pinAvailable+0x62>
   d7246:	f000 f889 	bl	d735c <_Z19__fetch_global_Wirev>
   d724a:	2100      	movs	r1, #0
   d724c:	7c00      	ldrb	r0, [r0, #16]
   d724e:	f7fe f9a9 	bl	d55a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7252:	f080 0001 	eor.w	r0, r0, #1
   d7256:	b2c0      	uxtb	r0, r0
   d7258:	e7d2      	b.n	d7200 <pinAvailable+0x8>
   d725a:	3809      	subs	r0, #9
   d725c:	2801      	cmp	r0, #1
   d725e:	d8ee      	bhi.n	d723e <pinAvailable+0x46>
   d7260:	f7ff fe50 	bl	d6f04 <_Z22__fetch_global_Serial1v>
   d7264:	7c00      	ldrb	r0, [r0, #16]
   d7266:	f7fe f945 	bl	d54f4 <hal_usart_is_enabled>
   d726a:	e7f2      	b.n	d7252 <pinAvailable+0x5a>
   d726c:	2003e7b0 	.word	0x2003e7b0
   d7270:	2003e7b4 	.word	0x2003e7b4

000d7274 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7274:	2823      	cmp	r0, #35	; 0x23
{
   d7276:	b538      	push	{r3, r4, r5, lr}
   d7278:	4604      	mov	r4, r0
   d727a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d727c:	d80a      	bhi.n	d7294 <pinMode+0x20>
   d727e:	29ff      	cmp	r1, #255	; 0xff
   d7280:	d008      	beq.n	d7294 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7282:	f7ff ffb9 	bl	d71f8 <pinAvailable>
   d7286:	b128      	cbz	r0, d7294 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7288:	4629      	mov	r1, r5
   d728a:	4620      	mov	r0, r4
}
   d728c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7290:	f7fe b890 	b.w	d53b4 <HAL_Pin_Mode>
}
   d7294:	bd38      	pop	{r3, r4, r5, pc}

000d7296 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7296:	b538      	push	{r3, r4, r5, lr}
   d7298:	4604      	mov	r4, r0
   d729a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d729c:	f7fe f892 	bl	d53c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d72a0:	28ff      	cmp	r0, #255	; 0xff
   d72a2:	d010      	beq.n	d72c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d72a4:	2806      	cmp	r0, #6
   d72a6:	d804      	bhi.n	d72b2 <digitalWrite+0x1c>
   d72a8:	234d      	movs	r3, #77	; 0x4d
   d72aa:	fa23 f000 	lsr.w	r0, r3, r0
   d72ae:	07c3      	lsls	r3, r0, #31
   d72b0:	d409      	bmi.n	d72c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d72b2:	4620      	mov	r0, r4
   d72b4:	f7ff ffa0 	bl	d71f8 <pinAvailable>
   d72b8:	b128      	cbz	r0, d72c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d72ba:	4629      	mov	r1, r5
   d72bc:	4620      	mov	r0, r4
}
   d72be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d72c2:	f7fe b887 	b.w	d53d4 <HAL_GPIO_Write>
}
   d72c6:	bd38      	pop	{r3, r4, r5, pc}

000d72c8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d72c8:	280d      	cmp	r0, #13
{
   d72ca:	b510      	push	{r4, lr}
   d72cc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d72ce:	bf9c      	itt	ls
   d72d0:	340e      	addls	r4, #14
   d72d2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d72d4:	4620      	mov	r0, r4
   d72d6:	f7ff ff8f 	bl	d71f8 <pinAvailable>
   d72da:	b150      	cbz	r0, d72f2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d72dc:	2103      	movs	r1, #3
   d72de:	4620      	mov	r0, r4
   d72e0:	f7fe f860 	bl	d53a4 <HAL_Validate_Pin_Function>
   d72e4:	2803      	cmp	r0, #3
   d72e6:	d104      	bne.n	d72f2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d72e8:	4620      	mov	r0, r4
}
   d72ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d72ee:	f7fe b879 	b.w	d53e4 <hal_adc_read>
}
   d72f2:	2000      	movs	r0, #0
   d72f4:	bd10      	pop	{r4, pc}

000d72f6 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d72f6:	f7fe b87d 	b.w	d53f4 <HAL_Pulse_In>
	...

000d72fc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d72fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d72fe:	2300      	movs	r3, #0
   d7300:	2520      	movs	r5, #32
   d7302:	8043      	strh	r3, [r0, #2]
   d7304:	2314      	movs	r3, #20
{
   d7306:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7308:	8003      	strh	r3, [r0, #0]
   d730a:	6085      	str	r5, [r0, #8]
   d730c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d730e:	4906      	ldr	r1, [pc, #24]	; (d7328 <_Z17acquireWireBufferv+0x2c>)
   d7310:	4628      	mov	r0, r5
   d7312:	f000 f87c 	bl	d740e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7316:	4904      	ldr	r1, [pc, #16]	; (d7328 <_Z17acquireWireBufferv+0x2c>)
	};
   d7318:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d731a:	4628      	mov	r0, r5
   d731c:	f000 f877 	bl	d740e <_ZnajRKSt9nothrow_t>
	};
   d7320:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7322:	4620      	mov	r0, r4
   d7324:	bd38      	pop	{r3, r4, r5, pc}
   d7326:	bf00      	nop
   d7328:	000d8574 	.word	0x000d8574

000d732c <_Z18acquireWire1Bufferv>:
   d732c:	b538      	push	{r3, r4, r5, lr}
   d732e:	2300      	movs	r3, #0
   d7330:	2520      	movs	r5, #32
   d7332:	8043      	strh	r3, [r0, #2]
   d7334:	2314      	movs	r3, #20
   d7336:	4604      	mov	r4, r0
   d7338:	8003      	strh	r3, [r0, #0]
   d733a:	6085      	str	r5, [r0, #8]
   d733c:	6105      	str	r5, [r0, #16]
   d733e:	4906      	ldr	r1, [pc, #24]	; (d7358 <_Z18acquireWire1Bufferv+0x2c>)
   d7340:	4628      	mov	r0, r5
   d7342:	f000 f864 	bl	d740e <_ZnajRKSt9nothrow_t>
   d7346:	4904      	ldr	r1, [pc, #16]	; (d7358 <_Z18acquireWire1Bufferv+0x2c>)
   d7348:	6060      	str	r0, [r4, #4]
   d734a:	4628      	mov	r0, r5
   d734c:	f000 f85f 	bl	d740e <_ZnajRKSt9nothrow_t>
   d7350:	60e0      	str	r0, [r4, #12]
   d7352:	4620      	mov	r0, r4
   d7354:	bd38      	pop	{r3, r4, r5, pc}
   d7356:	bf00      	nop
   d7358:	000d8574 	.word	0x000d8574

000d735c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d735c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d735e:	4d0f      	ldr	r5, [pc, #60]	; (d739c <_Z19__fetch_global_Wirev+0x40>)
   d7360:	7829      	ldrb	r1, [r5, #0]
   d7362:	f3bf 8f5b 	dmb	ish
   d7366:	f011 0401 	ands.w	r4, r1, #1
{
   d736a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d736c:	d113      	bne.n	d7396 <_Z19__fetch_global_Wirev+0x3a>
   d736e:	4628      	mov	r0, r5
   d7370:	f7fc fe97 	bl	d40a2 <__cxa_guard_acquire>
   d7374:	b178      	cbz	r0, d7396 <_Z19__fetch_global_Wirev+0x3a>
   d7376:	a801      	add	r0, sp, #4
   d7378:	f7ff ffc0 	bl	d72fc <_Z17acquireWireBufferv>
   d737c:	aa01      	add	r2, sp, #4
   d737e:	4621      	mov	r1, r4
   d7380:	4807      	ldr	r0, [pc, #28]	; (d73a0 <_Z19__fetch_global_Wirev+0x44>)
   d7382:	f7ff fe29 	bl	d6fd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7386:	4628      	mov	r0, r5
   d7388:	f7fc fe90 	bl	d40ac <__cxa_guard_release>
   d738c:	4a05      	ldr	r2, [pc, #20]	; (d73a4 <_Z19__fetch_global_Wirev+0x48>)
   d738e:	4906      	ldr	r1, [pc, #24]	; (d73a8 <_Z19__fetch_global_Wirev+0x4c>)
   d7390:	4803      	ldr	r0, [pc, #12]	; (d73a0 <_Z19__fetch_global_Wirev+0x44>)
   d7392:	f000 f833 	bl	d73fc <__aeabi_atexit>
	return wire;
}
   d7396:	4802      	ldr	r0, [pc, #8]	; (d73a0 <_Z19__fetch_global_Wirev+0x44>)
   d7398:	b007      	add	sp, #28
   d739a:	bd30      	pop	{r4, r5, pc}
   d739c:	2003e7c0 	.word	0x2003e7c0
   d73a0:	2003e7c8 	.word	0x2003e7c8
   d73a4:	2003e490 	.word	0x2003e490
   d73a8:	000d6f81 	.word	0x000d6f81

000d73ac <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d73ac:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d73ae:	4c0f      	ldr	r4, [pc, #60]	; (d73ec <_Z20__fetch_global_Wire1v+0x40>)
   d73b0:	7823      	ldrb	r3, [r4, #0]
   d73b2:	f3bf 8f5b 	dmb	ish
   d73b6:	07db      	lsls	r3, r3, #31
{
   d73b8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d73ba:	d413      	bmi.n	d73e4 <_Z20__fetch_global_Wire1v+0x38>
   d73bc:	4620      	mov	r0, r4
   d73be:	f7fc fe70 	bl	d40a2 <__cxa_guard_acquire>
   d73c2:	b178      	cbz	r0, d73e4 <_Z20__fetch_global_Wire1v+0x38>
   d73c4:	a801      	add	r0, sp, #4
   d73c6:	f7ff ffb1 	bl	d732c <_Z18acquireWire1Bufferv>
   d73ca:	aa01      	add	r2, sp, #4
   d73cc:	2101      	movs	r1, #1
   d73ce:	4808      	ldr	r0, [pc, #32]	; (d73f0 <_Z20__fetch_global_Wire1v+0x44>)
   d73d0:	f7ff fe02 	bl	d6fd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d73d4:	4620      	mov	r0, r4
   d73d6:	f7fc fe69 	bl	d40ac <__cxa_guard_release>
   d73da:	4a06      	ldr	r2, [pc, #24]	; (d73f4 <_Z20__fetch_global_Wire1v+0x48>)
   d73dc:	4906      	ldr	r1, [pc, #24]	; (d73f8 <_Z20__fetch_global_Wire1v+0x4c>)
   d73de:	4804      	ldr	r0, [pc, #16]	; (d73f0 <_Z20__fetch_global_Wire1v+0x44>)
   d73e0:	f000 f80c 	bl	d73fc <__aeabi_atexit>
	return wire;
}
   d73e4:	4802      	ldr	r0, [pc, #8]	; (d73f0 <_Z20__fetch_global_Wire1v+0x44>)
   d73e6:	b006      	add	sp, #24
   d73e8:	bd10      	pop	{r4, pc}
   d73ea:	bf00      	nop
   d73ec:	2003e7c4 	.word	0x2003e7c4
   d73f0:	2003e7dc 	.word	0x2003e7dc
   d73f4:	2003e490 	.word	0x2003e490
   d73f8:	000d6f81 	.word	0x000d6f81

000d73fc <__aeabi_atexit>:
   d73fc:	460b      	mov	r3, r1
   d73fe:	4601      	mov	r1, r0
   d7400:	4618      	mov	r0, r3
   d7402:	f000 bdc7 	b.w	d7f94 <__cxa_atexit>

000d7406 <_ZdlPvj>:
   d7406:	f7fc be4a 	b.w	d409e <_ZdlPv>

000d740a <_ZnwjRKSt9nothrow_t>:
   d740a:	f7fc be44 	b.w	d4096 <_Znwj>

000d740e <_ZnajRKSt9nothrow_t>:
   d740e:	f7fc be44 	b.w	d409a <_Znaj>

000d7412 <_ZSt19__throw_logic_errorPKc>:
   d7412:	b508      	push	{r3, lr}
   d7414:	f7fe fa5c 	bl	d58d0 <abort>

000d7418 <_ZSt20__throw_length_errorPKc>:
   d7418:	b508      	push	{r3, lr}
   d741a:	f7fe fa59 	bl	d58d0 <abort>

000d741e <_ZSt24__throw_out_of_range_fmtPKcz>:
   d741e:	b40f      	push	{r0, r1, r2, r3}
   d7420:	b580      	push	{r7, lr}
   d7422:	b084      	sub	sp, #16
   d7424:	af00      	add	r7, sp, #0
   d7426:	f107 0418 	add.w	r4, r7, #24
   d742a:	f854 2b04 	ldr.w	r2, [r4], #4
   d742e:	607a      	str	r2, [r7, #4]
   d7430:	4610      	mov	r0, r2
   d7432:	f000 fe2e 	bl	d8092 <strlen>
   d7436:	f200 2307 	addw	r3, r0, #519	; 0x207
   d743a:	f023 0307 	bic.w	r3, r3, #7
   d743e:	ebad 0d03 	sub.w	sp, sp, r3
   d7442:	f500 7100 	add.w	r1, r0, #512	; 0x200
   d7446:	687a      	ldr	r2, [r7, #4]
   d7448:	60fc      	str	r4, [r7, #12]
   d744a:	4623      	mov	r3, r4
   d744c:	4668      	mov	r0, sp
   d744e:	f000 f857 	bl	d7500 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   d7452:	f7fe fa3d 	bl	d58d0 <abort>

000d7456 <_ZSt25__throw_bad_function_callv>:
   d7456:	b508      	push	{r3, lr}
   d7458:	f7fe fa3a 	bl	d58d0 <abort>

000d745c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   d745c:	b580      	push	{r7, lr}
   d745e:	b09c      	sub	sp, #112	; 0x70
   d7460:	4606      	mov	r6, r0
   d7462:	af00      	add	r7, sp, #0
   d7464:	460c      	mov	r4, r1
   d7466:	1ba4      	subs	r4, r4, r6
   d7468:	490e      	ldr	r1, [pc, #56]	; (d74a4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   d746a:	2269      	movs	r2, #105	; 0x69
   d746c:	1d38      	adds	r0, r7, #4
   d746e:	f000 fd9f 	bl	d7fb0 <memcpy>
   d7472:	f104 0370 	add.w	r3, r4, #112	; 0x70
   d7476:	f023 0307 	bic.w	r3, r3, #7
   d747a:	ebad 0d03 	sub.w	sp, sp, r3
   d747e:	466d      	mov	r5, sp
   d7480:	2268      	movs	r2, #104	; 0x68
   d7482:	1d39      	adds	r1, r7, #4
   d7484:	4628      	mov	r0, r5
   d7486:	f000 fd93 	bl	d7fb0 <memcpy>
   d748a:	4622      	mov	r2, r4
   d748c:	4631      	mov	r1, r6
   d748e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   d7492:	442c      	add	r4, r5
   d7494:	f000 fd8c 	bl	d7fb0 <memcpy>
   d7498:	2300      	movs	r3, #0
   d749a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   d749e:	4628      	mov	r0, r5
   d74a0:	f7ff ffb7 	bl	d7412 <_ZSt19__throw_logic_errorPKc>
   d74a4:	000d8575 	.word	0x000d8575

000d74a8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   d74a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74ac:	af00      	add	r7, sp, #0
   d74ae:	b084      	sub	sp, #16
   d74b0:	466d      	mov	r5, sp
   d74b2:	f105 040c 	add.w	r4, r5, #12
   d74b6:	f8df 8044 	ldr.w	r8, [pc, #68]	; d74fc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   d74ba:	4623      	mov	r3, r4
   d74bc:	f04f 0c0a 	mov.w	ip, #10
   d74c0:	fbb2 f6fc 	udiv	r6, r2, ip
   d74c4:	fb0c 2e16 	mls	lr, ip, r6, r2
   d74c8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   d74cc:	f803 ed01 	strb.w	lr, [r3, #-1]!
   d74d0:	4696      	mov	lr, r2
   d74d2:	f1be 0f09 	cmp.w	lr, #9
   d74d6:	4632      	mov	r2, r6
   d74d8:	d8f2      	bhi.n	d74c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   d74da:	1ae4      	subs	r4, r4, r3
   d74dc:	428c      	cmp	r4, r1
   d74de:	d809      	bhi.n	d74f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   d74e0:	f1c4 010c 	rsb	r1, r4, #12
   d74e4:	4622      	mov	r2, r4
   d74e6:	4429      	add	r1, r5
   d74e8:	f000 fd62 	bl	d7fb0 <memcpy>
   d74ec:	4620      	mov	r0, r4
   d74ee:	46bd      	mov	sp, r7
   d74f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d74f4:	f04f 34ff 	mov.w	r4, #4294967295
   d74f8:	e7f8      	b.n	d74ec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   d74fa:	bf00      	nop
   d74fc:	000d85de 	.word	0x000d85de

000d7500 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   d7500:	3901      	subs	r1, #1
   d7502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7506:	4607      	mov	r7, r0
   d7508:	4615      	mov	r5, r2
   d750a:	eb00 0801 	add.w	r8, r0, r1
   d750e:	4604      	mov	r4, r0
   d7510:	782a      	ldrb	r2, [r5, #0]
   d7512:	b362      	cbz	r2, d756e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   d7514:	4544      	cmp	r4, r8
   d7516:	d22e      	bcs.n	d7576 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   d7518:	2a25      	cmp	r2, #37	; 0x25
   d751a:	d107      	bne.n	d752c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   d751c:	786a      	ldrb	r2, [r5, #1]
   d751e:	2a73      	cmp	r2, #115	; 0x73
   d7520:	d009      	beq.n	d7536 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   d7522:	2a7a      	cmp	r2, #122	; 0x7a
   d7524:	d012      	beq.n	d754c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   d7526:	2a25      	cmp	r2, #37	; 0x25
   d7528:	d100      	bne.n	d752c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   d752a:	3501      	adds	r5, #1
   d752c:	f815 2b01 	ldrb.w	r2, [r5], #1
   d7530:	f804 2b01 	strb.w	r2, [r4], #1
   d7534:	e7ec      	b.n	d7510 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   d7536:	f853 2b04 	ldr.w	r2, [r3], #4
   d753a:	3a01      	subs	r2, #1
   d753c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d7540:	b1e9      	cbz	r1, d757e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
   d7542:	4544      	cmp	r4, r8
   d7544:	d017      	beq.n	d7576 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   d7546:	f804 1b01 	strb.w	r1, [r4], #1
   d754a:	e7f7      	b.n	d753c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   d754c:	78aa      	ldrb	r2, [r5, #2]
   d754e:	2a75      	cmp	r2, #117	; 0x75
   d7550:	d1ec      	bne.n	d752c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   d7552:	461e      	mov	r6, r3
   d7554:	eba8 0104 	sub.w	r1, r8, r4
   d7558:	f856 2b04 	ldr.w	r2, [r6], #4
   d755c:	4620      	mov	r0, r4
   d755e:	f7ff ffa3 	bl	d74a8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   d7562:	2800      	cmp	r0, #0
   d7564:	dd07      	ble.n	d7576 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   d7566:	4404      	add	r4, r0
   d7568:	3503      	adds	r5, #3
   d756a:	4633      	mov	r3, r6
   d756c:	e7d0      	b.n	d7510 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   d756e:	7022      	strb	r2, [r4, #0]
   d7570:	1be0      	subs	r0, r4, r7
   d7572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7576:	4621      	mov	r1, r4
   d7578:	4638      	mov	r0, r7
   d757a:	f7ff ff6f 	bl	d745c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   d757e:	3502      	adds	r5, #2
   d7580:	e7c6      	b.n	d7510 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

000d7584 <__aeabi_drsub>:
   d7584:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7588:	e002      	b.n	d7590 <__adddf3>
   d758a:	bf00      	nop

000d758c <__aeabi_dsub>:
   d758c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7590 <__adddf3>:
   d7590:	b530      	push	{r4, r5, lr}
   d7592:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7596:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d759a:	ea94 0f05 	teq	r4, r5
   d759e:	bf08      	it	eq
   d75a0:	ea90 0f02 	teqeq	r0, r2
   d75a4:	bf1f      	itttt	ne
   d75a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d75aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d75ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d75b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d75b6:	f000 80e2 	beq.w	d777e <__adddf3+0x1ee>
   d75ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d75be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d75c2:	bfb8      	it	lt
   d75c4:	426d      	neglt	r5, r5
   d75c6:	dd0c      	ble.n	d75e2 <__adddf3+0x52>
   d75c8:	442c      	add	r4, r5
   d75ca:	ea80 0202 	eor.w	r2, r0, r2
   d75ce:	ea81 0303 	eor.w	r3, r1, r3
   d75d2:	ea82 0000 	eor.w	r0, r2, r0
   d75d6:	ea83 0101 	eor.w	r1, r3, r1
   d75da:	ea80 0202 	eor.w	r2, r0, r2
   d75de:	ea81 0303 	eor.w	r3, r1, r3
   d75e2:	2d36      	cmp	r5, #54	; 0x36
   d75e4:	bf88      	it	hi
   d75e6:	bd30      	pophi	{r4, r5, pc}
   d75e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d75ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d75f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d75f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d75f8:	d002      	beq.n	d7600 <__adddf3+0x70>
   d75fa:	4240      	negs	r0, r0
   d75fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7600:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7604:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7608:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d760c:	d002      	beq.n	d7614 <__adddf3+0x84>
   d760e:	4252      	negs	r2, r2
   d7610:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7614:	ea94 0f05 	teq	r4, r5
   d7618:	f000 80a7 	beq.w	d776a <__adddf3+0x1da>
   d761c:	f1a4 0401 	sub.w	r4, r4, #1
   d7620:	f1d5 0e20 	rsbs	lr, r5, #32
   d7624:	db0d      	blt.n	d7642 <__adddf3+0xb2>
   d7626:	fa02 fc0e 	lsl.w	ip, r2, lr
   d762a:	fa22 f205 	lsr.w	r2, r2, r5
   d762e:	1880      	adds	r0, r0, r2
   d7630:	f141 0100 	adc.w	r1, r1, #0
   d7634:	fa03 f20e 	lsl.w	r2, r3, lr
   d7638:	1880      	adds	r0, r0, r2
   d763a:	fa43 f305 	asr.w	r3, r3, r5
   d763e:	4159      	adcs	r1, r3
   d7640:	e00e      	b.n	d7660 <__adddf3+0xd0>
   d7642:	f1a5 0520 	sub.w	r5, r5, #32
   d7646:	f10e 0e20 	add.w	lr, lr, #32
   d764a:	2a01      	cmp	r2, #1
   d764c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7650:	bf28      	it	cs
   d7652:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7656:	fa43 f305 	asr.w	r3, r3, r5
   d765a:	18c0      	adds	r0, r0, r3
   d765c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7664:	d507      	bpl.n	d7676 <__adddf3+0xe6>
   d7666:	f04f 0e00 	mov.w	lr, #0
   d766a:	f1dc 0c00 	rsbs	ip, ip, #0
   d766e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7672:	eb6e 0101 	sbc.w	r1, lr, r1
   d7676:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d767a:	d31b      	bcc.n	d76b4 <__adddf3+0x124>
   d767c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7680:	d30c      	bcc.n	d769c <__adddf3+0x10c>
   d7682:	0849      	lsrs	r1, r1, #1
   d7684:	ea5f 0030 	movs.w	r0, r0, rrx
   d7688:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d768c:	f104 0401 	add.w	r4, r4, #1
   d7690:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7694:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7698:	f080 809a 	bcs.w	d77d0 <__adddf3+0x240>
   d769c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d76a0:	bf08      	it	eq
   d76a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d76a6:	f150 0000 	adcs.w	r0, r0, #0
   d76aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d76ae:	ea41 0105 	orr.w	r1, r1, r5
   d76b2:	bd30      	pop	{r4, r5, pc}
   d76b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d76b8:	4140      	adcs	r0, r0
   d76ba:	eb41 0101 	adc.w	r1, r1, r1
   d76be:	3c01      	subs	r4, #1
   d76c0:	bf28      	it	cs
   d76c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d76c6:	d2e9      	bcs.n	d769c <__adddf3+0x10c>
   d76c8:	f091 0f00 	teq	r1, #0
   d76cc:	bf04      	itt	eq
   d76ce:	4601      	moveq	r1, r0
   d76d0:	2000      	moveq	r0, #0
   d76d2:	fab1 f381 	clz	r3, r1
   d76d6:	bf08      	it	eq
   d76d8:	3320      	addeq	r3, #32
   d76da:	f1a3 030b 	sub.w	r3, r3, #11
   d76de:	f1b3 0220 	subs.w	r2, r3, #32
   d76e2:	da0c      	bge.n	d76fe <__adddf3+0x16e>
   d76e4:	320c      	adds	r2, #12
   d76e6:	dd08      	ble.n	d76fa <__adddf3+0x16a>
   d76e8:	f102 0c14 	add.w	ip, r2, #20
   d76ec:	f1c2 020c 	rsb	r2, r2, #12
   d76f0:	fa01 f00c 	lsl.w	r0, r1, ip
   d76f4:	fa21 f102 	lsr.w	r1, r1, r2
   d76f8:	e00c      	b.n	d7714 <__adddf3+0x184>
   d76fa:	f102 0214 	add.w	r2, r2, #20
   d76fe:	bfd8      	it	le
   d7700:	f1c2 0c20 	rsble	ip, r2, #32
   d7704:	fa01 f102 	lsl.w	r1, r1, r2
   d7708:	fa20 fc0c 	lsr.w	ip, r0, ip
   d770c:	bfdc      	itt	le
   d770e:	ea41 010c 	orrle.w	r1, r1, ip
   d7712:	4090      	lslle	r0, r2
   d7714:	1ae4      	subs	r4, r4, r3
   d7716:	bfa2      	ittt	ge
   d7718:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d771c:	4329      	orrge	r1, r5
   d771e:	bd30      	popge	{r4, r5, pc}
   d7720:	ea6f 0404 	mvn.w	r4, r4
   d7724:	3c1f      	subs	r4, #31
   d7726:	da1c      	bge.n	d7762 <__adddf3+0x1d2>
   d7728:	340c      	adds	r4, #12
   d772a:	dc0e      	bgt.n	d774a <__adddf3+0x1ba>
   d772c:	f104 0414 	add.w	r4, r4, #20
   d7730:	f1c4 0220 	rsb	r2, r4, #32
   d7734:	fa20 f004 	lsr.w	r0, r0, r4
   d7738:	fa01 f302 	lsl.w	r3, r1, r2
   d773c:	ea40 0003 	orr.w	r0, r0, r3
   d7740:	fa21 f304 	lsr.w	r3, r1, r4
   d7744:	ea45 0103 	orr.w	r1, r5, r3
   d7748:	bd30      	pop	{r4, r5, pc}
   d774a:	f1c4 040c 	rsb	r4, r4, #12
   d774e:	f1c4 0220 	rsb	r2, r4, #32
   d7752:	fa20 f002 	lsr.w	r0, r0, r2
   d7756:	fa01 f304 	lsl.w	r3, r1, r4
   d775a:	ea40 0003 	orr.w	r0, r0, r3
   d775e:	4629      	mov	r1, r5
   d7760:	bd30      	pop	{r4, r5, pc}
   d7762:	fa21 f004 	lsr.w	r0, r1, r4
   d7766:	4629      	mov	r1, r5
   d7768:	bd30      	pop	{r4, r5, pc}
   d776a:	f094 0f00 	teq	r4, #0
   d776e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7772:	bf06      	itte	eq
   d7774:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7778:	3401      	addeq	r4, #1
   d777a:	3d01      	subne	r5, #1
   d777c:	e74e      	b.n	d761c <__adddf3+0x8c>
   d777e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7782:	bf18      	it	ne
   d7784:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7788:	d029      	beq.n	d77de <__adddf3+0x24e>
   d778a:	ea94 0f05 	teq	r4, r5
   d778e:	bf08      	it	eq
   d7790:	ea90 0f02 	teqeq	r0, r2
   d7794:	d005      	beq.n	d77a2 <__adddf3+0x212>
   d7796:	ea54 0c00 	orrs.w	ip, r4, r0
   d779a:	bf04      	itt	eq
   d779c:	4619      	moveq	r1, r3
   d779e:	4610      	moveq	r0, r2
   d77a0:	bd30      	pop	{r4, r5, pc}
   d77a2:	ea91 0f03 	teq	r1, r3
   d77a6:	bf1e      	ittt	ne
   d77a8:	2100      	movne	r1, #0
   d77aa:	2000      	movne	r0, #0
   d77ac:	bd30      	popne	{r4, r5, pc}
   d77ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d77b2:	d105      	bne.n	d77c0 <__adddf3+0x230>
   d77b4:	0040      	lsls	r0, r0, #1
   d77b6:	4149      	adcs	r1, r1
   d77b8:	bf28      	it	cs
   d77ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d77be:	bd30      	pop	{r4, r5, pc}
   d77c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d77c4:	bf3c      	itt	cc
   d77c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d77ca:	bd30      	popcc	{r4, r5, pc}
   d77cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d77d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77d8:	f04f 0000 	mov.w	r0, #0
   d77dc:	bd30      	pop	{r4, r5, pc}
   d77de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d77e2:	bf1a      	itte	ne
   d77e4:	4619      	movne	r1, r3
   d77e6:	4610      	movne	r0, r2
   d77e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d77ec:	bf1c      	itt	ne
   d77ee:	460b      	movne	r3, r1
   d77f0:	4602      	movne	r2, r0
   d77f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d77f6:	bf06      	itte	eq
   d77f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d77fc:	ea91 0f03 	teqeq	r1, r3
   d7800:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7804:	bd30      	pop	{r4, r5, pc}
   d7806:	bf00      	nop

000d7808 <__aeabi_ui2d>:
   d7808:	f090 0f00 	teq	r0, #0
   d780c:	bf04      	itt	eq
   d780e:	2100      	moveq	r1, #0
   d7810:	4770      	bxeq	lr
   d7812:	b530      	push	{r4, r5, lr}
   d7814:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7818:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d781c:	f04f 0500 	mov.w	r5, #0
   d7820:	f04f 0100 	mov.w	r1, #0
   d7824:	e750      	b.n	d76c8 <__adddf3+0x138>
   d7826:	bf00      	nop

000d7828 <__aeabi_i2d>:
   d7828:	f090 0f00 	teq	r0, #0
   d782c:	bf04      	itt	eq
   d782e:	2100      	moveq	r1, #0
   d7830:	4770      	bxeq	lr
   d7832:	b530      	push	{r4, r5, lr}
   d7834:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7838:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d783c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7840:	bf48      	it	mi
   d7842:	4240      	negmi	r0, r0
   d7844:	f04f 0100 	mov.w	r1, #0
   d7848:	e73e      	b.n	d76c8 <__adddf3+0x138>
   d784a:	bf00      	nop

000d784c <__aeabi_f2d>:
   d784c:	0042      	lsls	r2, r0, #1
   d784e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7852:	ea4f 0131 	mov.w	r1, r1, rrx
   d7856:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d785a:	bf1f      	itttt	ne
   d785c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7860:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7864:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7868:	4770      	bxne	lr
   d786a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d786e:	bf08      	it	eq
   d7870:	4770      	bxeq	lr
   d7872:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7876:	bf04      	itt	eq
   d7878:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d787c:	4770      	bxeq	lr
   d787e:	b530      	push	{r4, r5, lr}
   d7880:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d788c:	e71c      	b.n	d76c8 <__adddf3+0x138>
   d788e:	bf00      	nop

000d7890 <__aeabi_ul2d>:
   d7890:	ea50 0201 	orrs.w	r2, r0, r1
   d7894:	bf08      	it	eq
   d7896:	4770      	bxeq	lr
   d7898:	b530      	push	{r4, r5, lr}
   d789a:	f04f 0500 	mov.w	r5, #0
   d789e:	e00a      	b.n	d78b6 <__aeabi_l2d+0x16>

000d78a0 <__aeabi_l2d>:
   d78a0:	ea50 0201 	orrs.w	r2, r0, r1
   d78a4:	bf08      	it	eq
   d78a6:	4770      	bxeq	lr
   d78a8:	b530      	push	{r4, r5, lr}
   d78aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d78ae:	d502      	bpl.n	d78b6 <__aeabi_l2d+0x16>
   d78b0:	4240      	negs	r0, r0
   d78b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d78b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d78c2:	f43f aed8 	beq.w	d7676 <__adddf3+0xe6>
   d78c6:	f04f 0203 	mov.w	r2, #3
   d78ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78ce:	bf18      	it	ne
   d78d0:	3203      	addne	r2, #3
   d78d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78d6:	bf18      	it	ne
   d78d8:	3203      	addne	r2, #3
   d78da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d78de:	f1c2 0320 	rsb	r3, r2, #32
   d78e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d78e6:	fa20 f002 	lsr.w	r0, r0, r2
   d78ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d78ee:	ea40 000e 	orr.w	r0, r0, lr
   d78f2:	fa21 f102 	lsr.w	r1, r1, r2
   d78f6:	4414      	add	r4, r2
   d78f8:	e6bd      	b.n	d7676 <__adddf3+0xe6>
   d78fa:	bf00      	nop

000d78fc <__aeabi_dmul>:
   d78fc:	b570      	push	{r4, r5, r6, lr}
   d78fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d790a:	bf1d      	ittte	ne
   d790c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7910:	ea94 0f0c 	teqne	r4, ip
   d7914:	ea95 0f0c 	teqne	r5, ip
   d7918:	f000 f8de 	bleq	d7ad8 <__aeabi_dmul+0x1dc>
   d791c:	442c      	add	r4, r5
   d791e:	ea81 0603 	eor.w	r6, r1, r3
   d7922:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7926:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d792a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d792e:	bf18      	it	ne
   d7930:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d793c:	d038      	beq.n	d79b0 <__aeabi_dmul+0xb4>
   d793e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7942:	f04f 0500 	mov.w	r5, #0
   d7946:	fbe1 e502 	umlal	lr, r5, r1, r2
   d794a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d794e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7952:	f04f 0600 	mov.w	r6, #0
   d7956:	fbe1 5603 	umlal	r5, r6, r1, r3
   d795a:	f09c 0f00 	teq	ip, #0
   d795e:	bf18      	it	ne
   d7960:	f04e 0e01 	orrne.w	lr, lr, #1
   d7964:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7968:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d796c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7970:	d204      	bcs.n	d797c <__aeabi_dmul+0x80>
   d7972:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7976:	416d      	adcs	r5, r5
   d7978:	eb46 0606 	adc.w	r6, r6, r6
   d797c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7980:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7984:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7988:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d798c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7990:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7994:	bf88      	it	hi
   d7996:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d799a:	d81e      	bhi.n	d79da <__aeabi_dmul+0xde>
   d799c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d79a0:	bf08      	it	eq
   d79a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d79a6:	f150 0000 	adcs.w	r0, r0, #0
   d79aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d79ae:	bd70      	pop	{r4, r5, r6, pc}
   d79b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d79b4:	ea46 0101 	orr.w	r1, r6, r1
   d79b8:	ea40 0002 	orr.w	r0, r0, r2
   d79bc:	ea81 0103 	eor.w	r1, r1, r3
   d79c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d79c4:	bfc2      	ittt	gt
   d79c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d79ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d79ce:	bd70      	popgt	{r4, r5, r6, pc}
   d79d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79d4:	f04f 0e00 	mov.w	lr, #0
   d79d8:	3c01      	subs	r4, #1
   d79da:	f300 80ab 	bgt.w	d7b34 <__aeabi_dmul+0x238>
   d79de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d79e2:	bfde      	ittt	le
   d79e4:	2000      	movle	r0, #0
   d79e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d79ea:	bd70      	pople	{r4, r5, r6, pc}
   d79ec:	f1c4 0400 	rsb	r4, r4, #0
   d79f0:	3c20      	subs	r4, #32
   d79f2:	da35      	bge.n	d7a60 <__aeabi_dmul+0x164>
   d79f4:	340c      	adds	r4, #12
   d79f6:	dc1b      	bgt.n	d7a30 <__aeabi_dmul+0x134>
   d79f8:	f104 0414 	add.w	r4, r4, #20
   d79fc:	f1c4 0520 	rsb	r5, r4, #32
   d7a00:	fa00 f305 	lsl.w	r3, r0, r5
   d7a04:	fa20 f004 	lsr.w	r0, r0, r4
   d7a08:	fa01 f205 	lsl.w	r2, r1, r5
   d7a0c:	ea40 0002 	orr.w	r0, r0, r2
   d7a10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7a14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a1c:	fa21 f604 	lsr.w	r6, r1, r4
   d7a20:	eb42 0106 	adc.w	r1, r2, r6
   d7a24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a28:	bf08      	it	eq
   d7a2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a2e:	bd70      	pop	{r4, r5, r6, pc}
   d7a30:	f1c4 040c 	rsb	r4, r4, #12
   d7a34:	f1c4 0520 	rsb	r5, r4, #32
   d7a38:	fa00 f304 	lsl.w	r3, r0, r4
   d7a3c:	fa20 f005 	lsr.w	r0, r0, r5
   d7a40:	fa01 f204 	lsl.w	r2, r1, r4
   d7a44:	ea40 0002 	orr.w	r0, r0, r2
   d7a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a50:	f141 0100 	adc.w	r1, r1, #0
   d7a54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a58:	bf08      	it	eq
   d7a5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a5e:	bd70      	pop	{r4, r5, r6, pc}
   d7a60:	f1c4 0520 	rsb	r5, r4, #32
   d7a64:	fa00 f205 	lsl.w	r2, r0, r5
   d7a68:	ea4e 0e02 	orr.w	lr, lr, r2
   d7a6c:	fa20 f304 	lsr.w	r3, r0, r4
   d7a70:	fa01 f205 	lsl.w	r2, r1, r5
   d7a74:	ea43 0302 	orr.w	r3, r3, r2
   d7a78:	fa21 f004 	lsr.w	r0, r1, r4
   d7a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a80:	fa21 f204 	lsr.w	r2, r1, r4
   d7a84:	ea20 0002 	bic.w	r0, r0, r2
   d7a88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a90:	bf08      	it	eq
   d7a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a96:	bd70      	pop	{r4, r5, r6, pc}
   d7a98:	f094 0f00 	teq	r4, #0
   d7a9c:	d10f      	bne.n	d7abe <__aeabi_dmul+0x1c2>
   d7a9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7aa2:	0040      	lsls	r0, r0, #1
   d7aa4:	eb41 0101 	adc.w	r1, r1, r1
   d7aa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7aac:	bf08      	it	eq
   d7aae:	3c01      	subeq	r4, #1
   d7ab0:	d0f7      	beq.n	d7aa2 <__aeabi_dmul+0x1a6>
   d7ab2:	ea41 0106 	orr.w	r1, r1, r6
   d7ab6:	f095 0f00 	teq	r5, #0
   d7aba:	bf18      	it	ne
   d7abc:	4770      	bxne	lr
   d7abe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7ac2:	0052      	lsls	r2, r2, #1
   d7ac4:	eb43 0303 	adc.w	r3, r3, r3
   d7ac8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7acc:	bf08      	it	eq
   d7ace:	3d01      	subeq	r5, #1
   d7ad0:	d0f7      	beq.n	d7ac2 <__aeabi_dmul+0x1c6>
   d7ad2:	ea43 0306 	orr.w	r3, r3, r6
   d7ad6:	4770      	bx	lr
   d7ad8:	ea94 0f0c 	teq	r4, ip
   d7adc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ae0:	bf18      	it	ne
   d7ae2:	ea95 0f0c 	teqne	r5, ip
   d7ae6:	d00c      	beq.n	d7b02 <__aeabi_dmul+0x206>
   d7ae8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7aec:	bf18      	it	ne
   d7aee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7af2:	d1d1      	bne.n	d7a98 <__aeabi_dmul+0x19c>
   d7af4:	ea81 0103 	eor.w	r1, r1, r3
   d7af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7afc:	f04f 0000 	mov.w	r0, #0
   d7b00:	bd70      	pop	{r4, r5, r6, pc}
   d7b02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b06:	bf06      	itte	eq
   d7b08:	4610      	moveq	r0, r2
   d7b0a:	4619      	moveq	r1, r3
   d7b0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b10:	d019      	beq.n	d7b46 <__aeabi_dmul+0x24a>
   d7b12:	ea94 0f0c 	teq	r4, ip
   d7b16:	d102      	bne.n	d7b1e <__aeabi_dmul+0x222>
   d7b18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7b1c:	d113      	bne.n	d7b46 <__aeabi_dmul+0x24a>
   d7b1e:	ea95 0f0c 	teq	r5, ip
   d7b22:	d105      	bne.n	d7b30 <__aeabi_dmul+0x234>
   d7b24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7b28:	bf1c      	itt	ne
   d7b2a:	4610      	movne	r0, r2
   d7b2c:	4619      	movne	r1, r3
   d7b2e:	d10a      	bne.n	d7b46 <__aeabi_dmul+0x24a>
   d7b30:	ea81 0103 	eor.w	r1, r1, r3
   d7b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b40:	f04f 0000 	mov.w	r0, #0
   d7b44:	bd70      	pop	{r4, r5, r6, pc}
   d7b46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7b4e:	bd70      	pop	{r4, r5, r6, pc}

000d7b50 <__aeabi_ddiv>:
   d7b50:	b570      	push	{r4, r5, r6, lr}
   d7b52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7b56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7b5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7b5e:	bf1d      	ittte	ne
   d7b60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7b64:	ea94 0f0c 	teqne	r4, ip
   d7b68:	ea95 0f0c 	teqne	r5, ip
   d7b6c:	f000 f8a7 	bleq	d7cbe <__aeabi_ddiv+0x16e>
   d7b70:	eba4 0405 	sub.w	r4, r4, r5
   d7b74:	ea81 0e03 	eor.w	lr, r1, r3
   d7b78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b80:	f000 8088 	beq.w	d7c94 <__aeabi_ddiv+0x144>
   d7b84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7b8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7b90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7b94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7b98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7b9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7ba0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7ba4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7ba8:	429d      	cmp	r5, r3
   d7baa:	bf08      	it	eq
   d7bac:	4296      	cmpeq	r6, r2
   d7bae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7bb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7bb6:	d202      	bcs.n	d7bbe <__aeabi_ddiv+0x6e>
   d7bb8:	085b      	lsrs	r3, r3, #1
   d7bba:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bbe:	1ab6      	subs	r6, r6, r2
   d7bc0:	eb65 0503 	sbc.w	r5, r5, r3
   d7bc4:	085b      	lsrs	r3, r3, #1
   d7bc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7bce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7bd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bda:	bf22      	ittt	cs
   d7bdc:	1ab6      	subcs	r6, r6, r2
   d7bde:	4675      	movcs	r5, lr
   d7be0:	ea40 000c 	orrcs.w	r0, r0, ip
   d7be4:	085b      	lsrs	r3, r3, #1
   d7be6:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bea:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bf2:	bf22      	ittt	cs
   d7bf4:	1ab6      	subcs	r6, r6, r2
   d7bf6:	4675      	movcs	r5, lr
   d7bf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7bfc:	085b      	lsrs	r3, r3, #1
   d7bfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c02:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c0a:	bf22      	ittt	cs
   d7c0c:	1ab6      	subcs	r6, r6, r2
   d7c0e:	4675      	movcs	r5, lr
   d7c10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7c14:	085b      	lsrs	r3, r3, #1
   d7c16:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c22:	bf22      	ittt	cs
   d7c24:	1ab6      	subcs	r6, r6, r2
   d7c26:	4675      	movcs	r5, lr
   d7c28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7c2c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7c30:	d018      	beq.n	d7c64 <__aeabi_ddiv+0x114>
   d7c32:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7c36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7c3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7c3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7c42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7c46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7c4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7c4e:	d1c0      	bne.n	d7bd2 <__aeabi_ddiv+0x82>
   d7c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c54:	d10b      	bne.n	d7c6e <__aeabi_ddiv+0x11e>
   d7c56:	ea41 0100 	orr.w	r1, r1, r0
   d7c5a:	f04f 0000 	mov.w	r0, #0
   d7c5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7c62:	e7b6      	b.n	d7bd2 <__aeabi_ddiv+0x82>
   d7c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c68:	bf04      	itt	eq
   d7c6a:	4301      	orreq	r1, r0
   d7c6c:	2000      	moveq	r0, #0
   d7c6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c72:	bf88      	it	hi
   d7c74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c78:	f63f aeaf 	bhi.w	d79da <__aeabi_dmul+0xde>
   d7c7c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7c80:	bf04      	itt	eq
   d7c82:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7c86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c8a:	f150 0000 	adcs.w	r0, r0, #0
   d7c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c92:	bd70      	pop	{r4, r5, r6, pc}
   d7c94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7c98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7c9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7ca0:	bfc2      	ittt	gt
   d7ca2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7ca6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7caa:	bd70      	popgt	{r4, r5, r6, pc}
   d7cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7cb0:	f04f 0e00 	mov.w	lr, #0
   d7cb4:	3c01      	subs	r4, #1
   d7cb6:	e690      	b.n	d79da <__aeabi_dmul+0xde>
   d7cb8:	ea45 0e06 	orr.w	lr, r5, r6
   d7cbc:	e68d      	b.n	d79da <__aeabi_dmul+0xde>
   d7cbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7cc2:	ea94 0f0c 	teq	r4, ip
   d7cc6:	bf08      	it	eq
   d7cc8:	ea95 0f0c 	teqeq	r5, ip
   d7ccc:	f43f af3b 	beq.w	d7b46 <__aeabi_dmul+0x24a>
   d7cd0:	ea94 0f0c 	teq	r4, ip
   d7cd4:	d10a      	bne.n	d7cec <__aeabi_ddiv+0x19c>
   d7cd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7cda:	f47f af34 	bne.w	d7b46 <__aeabi_dmul+0x24a>
   d7cde:	ea95 0f0c 	teq	r5, ip
   d7ce2:	f47f af25 	bne.w	d7b30 <__aeabi_dmul+0x234>
   d7ce6:	4610      	mov	r0, r2
   d7ce8:	4619      	mov	r1, r3
   d7cea:	e72c      	b.n	d7b46 <__aeabi_dmul+0x24a>
   d7cec:	ea95 0f0c 	teq	r5, ip
   d7cf0:	d106      	bne.n	d7d00 <__aeabi_ddiv+0x1b0>
   d7cf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7cf6:	f43f aefd 	beq.w	d7af4 <__aeabi_dmul+0x1f8>
   d7cfa:	4610      	mov	r0, r2
   d7cfc:	4619      	mov	r1, r3
   d7cfe:	e722      	b.n	d7b46 <__aeabi_dmul+0x24a>
   d7d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7d04:	bf18      	it	ne
   d7d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7d0a:	f47f aec5 	bne.w	d7a98 <__aeabi_dmul+0x19c>
   d7d0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7d12:	f47f af0d 	bne.w	d7b30 <__aeabi_dmul+0x234>
   d7d16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7d1a:	f47f aeeb 	bne.w	d7af4 <__aeabi_dmul+0x1f8>
   d7d1e:	e712      	b.n	d7b46 <__aeabi_dmul+0x24a>

000d7d20 <__gedf2>:
   d7d20:	f04f 3cff 	mov.w	ip, #4294967295
   d7d24:	e006      	b.n	d7d34 <__cmpdf2+0x4>
   d7d26:	bf00      	nop

000d7d28 <__ledf2>:
   d7d28:	f04f 0c01 	mov.w	ip, #1
   d7d2c:	e002      	b.n	d7d34 <__cmpdf2+0x4>
   d7d2e:	bf00      	nop

000d7d30 <__cmpdf2>:
   d7d30:	f04f 0c01 	mov.w	ip, #1
   d7d34:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7d38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d44:	bf18      	it	ne
   d7d46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7d4a:	d01b      	beq.n	d7d84 <__cmpdf2+0x54>
   d7d4c:	b001      	add	sp, #4
   d7d4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7d52:	bf0c      	ite	eq
   d7d54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7d58:	ea91 0f03 	teqne	r1, r3
   d7d5c:	bf02      	ittt	eq
   d7d5e:	ea90 0f02 	teqeq	r0, r2
   d7d62:	2000      	moveq	r0, #0
   d7d64:	4770      	bxeq	lr
   d7d66:	f110 0f00 	cmn.w	r0, #0
   d7d6a:	ea91 0f03 	teq	r1, r3
   d7d6e:	bf58      	it	pl
   d7d70:	4299      	cmppl	r1, r3
   d7d72:	bf08      	it	eq
   d7d74:	4290      	cmpeq	r0, r2
   d7d76:	bf2c      	ite	cs
   d7d78:	17d8      	asrcs	r0, r3, #31
   d7d7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7d7e:	f040 0001 	orr.w	r0, r0, #1
   d7d82:	4770      	bx	lr
   d7d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d8c:	d102      	bne.n	d7d94 <__cmpdf2+0x64>
   d7d8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7d92:	d107      	bne.n	d7da4 <__cmpdf2+0x74>
   d7d94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7d98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7d9c:	d1d6      	bne.n	d7d4c <__cmpdf2+0x1c>
   d7d9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7da2:	d0d3      	beq.n	d7d4c <__cmpdf2+0x1c>
   d7da4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7da8:	4770      	bx	lr
   d7daa:	bf00      	nop

000d7dac <__aeabi_cdrcmple>:
   d7dac:	4684      	mov	ip, r0
   d7dae:	4610      	mov	r0, r2
   d7db0:	4662      	mov	r2, ip
   d7db2:	468c      	mov	ip, r1
   d7db4:	4619      	mov	r1, r3
   d7db6:	4663      	mov	r3, ip
   d7db8:	e000      	b.n	d7dbc <__aeabi_cdcmpeq>
   d7dba:	bf00      	nop

000d7dbc <__aeabi_cdcmpeq>:
   d7dbc:	b501      	push	{r0, lr}
   d7dbe:	f7ff ffb7 	bl	d7d30 <__cmpdf2>
   d7dc2:	2800      	cmp	r0, #0
   d7dc4:	bf48      	it	mi
   d7dc6:	f110 0f00 	cmnmi.w	r0, #0
   d7dca:	bd01      	pop	{r0, pc}

000d7dcc <__aeabi_dcmpeq>:
   d7dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7dd0:	f7ff fff4 	bl	d7dbc <__aeabi_cdcmpeq>
   d7dd4:	bf0c      	ite	eq
   d7dd6:	2001      	moveq	r0, #1
   d7dd8:	2000      	movne	r0, #0
   d7dda:	f85d fb08 	ldr.w	pc, [sp], #8
   d7dde:	bf00      	nop

000d7de0 <__aeabi_dcmplt>:
   d7de0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7de4:	f7ff ffea 	bl	d7dbc <__aeabi_cdcmpeq>
   d7de8:	bf34      	ite	cc
   d7dea:	2001      	movcc	r0, #1
   d7dec:	2000      	movcs	r0, #0
   d7dee:	f85d fb08 	ldr.w	pc, [sp], #8
   d7df2:	bf00      	nop

000d7df4 <__aeabi_dcmple>:
   d7df4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7df8:	f7ff ffe0 	bl	d7dbc <__aeabi_cdcmpeq>
   d7dfc:	bf94      	ite	ls
   d7dfe:	2001      	movls	r0, #1
   d7e00:	2000      	movhi	r0, #0
   d7e02:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e06:	bf00      	nop

000d7e08 <__aeabi_dcmpge>:
   d7e08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e0c:	f7ff ffce 	bl	d7dac <__aeabi_cdrcmple>
   d7e10:	bf94      	ite	ls
   d7e12:	2001      	movls	r0, #1
   d7e14:	2000      	movhi	r0, #0
   d7e16:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e1a:	bf00      	nop

000d7e1c <__aeabi_dcmpgt>:
   d7e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7e20:	f7ff ffc4 	bl	d7dac <__aeabi_cdrcmple>
   d7e24:	bf34      	ite	cc
   d7e26:	2001      	movcc	r0, #1
   d7e28:	2000      	movcs	r0, #0
   d7e2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7e2e:	bf00      	nop

000d7e30 <__aeabi_dcmpun>:
   d7e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7e38:	d102      	bne.n	d7e40 <__aeabi_dcmpun+0x10>
   d7e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7e3e:	d10a      	bne.n	d7e56 <__aeabi_dcmpun+0x26>
   d7e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7e48:	d102      	bne.n	d7e50 <__aeabi_dcmpun+0x20>
   d7e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7e4e:	d102      	bne.n	d7e56 <__aeabi_dcmpun+0x26>
   d7e50:	f04f 0000 	mov.w	r0, #0
   d7e54:	4770      	bx	lr
   d7e56:	f04f 0001 	mov.w	r0, #1
   d7e5a:	4770      	bx	lr

000d7e5c <__aeabi_d2iz>:
   d7e5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7e60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7e64:	d215      	bcs.n	d7e92 <__aeabi_d2iz+0x36>
   d7e66:	d511      	bpl.n	d7e8c <__aeabi_d2iz+0x30>
   d7e68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7e6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7e70:	d912      	bls.n	d7e98 <__aeabi_d2iz+0x3c>
   d7e72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7e7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7e7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7e82:	fa23 f002 	lsr.w	r0, r3, r2
   d7e86:	bf18      	it	ne
   d7e88:	4240      	negne	r0, r0
   d7e8a:	4770      	bx	lr
   d7e8c:	f04f 0000 	mov.w	r0, #0
   d7e90:	4770      	bx	lr
   d7e92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7e96:	d105      	bne.n	d7ea4 <__aeabi_d2iz+0x48>
   d7e98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7e9c:	bf08      	it	eq
   d7e9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7ea2:	4770      	bx	lr
   d7ea4:	f04f 0000 	mov.w	r0, #0
   d7ea8:	4770      	bx	lr
   d7eaa:	bf00      	nop

000d7eac <__aeabi_d2uiz>:
   d7eac:	004a      	lsls	r2, r1, #1
   d7eae:	d211      	bcs.n	d7ed4 <__aeabi_d2uiz+0x28>
   d7eb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7eb4:	d211      	bcs.n	d7eda <__aeabi_d2uiz+0x2e>
   d7eb6:	d50d      	bpl.n	d7ed4 <__aeabi_d2uiz+0x28>
   d7eb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7ebc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7ec0:	d40e      	bmi.n	d7ee0 <__aeabi_d2uiz+0x34>
   d7ec2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7ec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7eca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7ece:	fa23 f002 	lsr.w	r0, r3, r2
   d7ed2:	4770      	bx	lr
   d7ed4:	f04f 0000 	mov.w	r0, #0
   d7ed8:	4770      	bx	lr
   d7eda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7ede:	d102      	bne.n	d7ee6 <__aeabi_d2uiz+0x3a>
   d7ee0:	f04f 30ff 	mov.w	r0, #4294967295
   d7ee4:	4770      	bx	lr
   d7ee6:	f04f 0000 	mov.w	r0, #0
   d7eea:	4770      	bx	lr

000d7eec <__aeabi_d2f>:
   d7eec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7ef0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7ef4:	bf24      	itt	cs
   d7ef6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7efa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7efe:	d90d      	bls.n	d7f1c <__aeabi_d2f+0x30>
   d7f00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7f04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7f08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7f0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7f10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7f14:	bf08      	it	eq
   d7f16:	f020 0001 	biceq.w	r0, r0, #1
   d7f1a:	4770      	bx	lr
   d7f1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7f20:	d121      	bne.n	d7f66 <__aeabi_d2f+0x7a>
   d7f22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7f26:	bfbc      	itt	lt
   d7f28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7f2c:	4770      	bxlt	lr
   d7f2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f32:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7f36:	f1c2 0218 	rsb	r2, r2, #24
   d7f3a:	f1c2 0c20 	rsb	ip, r2, #32
   d7f3e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7f42:	fa20 f002 	lsr.w	r0, r0, r2
   d7f46:	bf18      	it	ne
   d7f48:	f040 0001 	orrne.w	r0, r0, #1
   d7f4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7f50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7f54:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7f58:	ea40 000c 	orr.w	r0, r0, ip
   d7f5c:	fa23 f302 	lsr.w	r3, r3, r2
   d7f60:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7f64:	e7cc      	b.n	d7f00 <__aeabi_d2f+0x14>
   d7f66:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7f6a:	d107      	bne.n	d7f7c <__aeabi_d2f+0x90>
   d7f6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7f70:	bf1e      	ittt	ne
   d7f72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7f76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7f7a:	4770      	bxne	lr
   d7f7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7f80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7f84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7f88:	4770      	bx	lr
   d7f8a:	bf00      	nop

000d7f8c <atoi>:
   d7f8c:	220a      	movs	r2, #10
   d7f8e:	2100      	movs	r1, #0
   d7f90:	f000 b914 	b.w	d81bc <strtol>

000d7f94 <__cxa_atexit>:
   d7f94:	b510      	push	{r4, lr}
   d7f96:	4c05      	ldr	r4, [pc, #20]	; (d7fac <__cxa_atexit+0x18>)
   d7f98:	4613      	mov	r3, r2
   d7f9a:	b12c      	cbz	r4, d7fa8 <__cxa_atexit+0x14>
   d7f9c:	460a      	mov	r2, r1
   d7f9e:	4601      	mov	r1, r0
   d7fa0:	2002      	movs	r0, #2
   d7fa2:	f3af 8000 	nop.w
   d7fa6:	bd10      	pop	{r4, pc}
   d7fa8:	4620      	mov	r0, r4
   d7faa:	e7fc      	b.n	d7fa6 <__cxa_atexit+0x12>
   d7fac:	00000000 	.word	0x00000000

000d7fb0 <memcpy>:
   d7fb0:	440a      	add	r2, r1
   d7fb2:	4291      	cmp	r1, r2
   d7fb4:	f100 33ff 	add.w	r3, r0, #4294967295
   d7fb8:	d100      	bne.n	d7fbc <memcpy+0xc>
   d7fba:	4770      	bx	lr
   d7fbc:	b510      	push	{r4, lr}
   d7fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7fc6:	4291      	cmp	r1, r2
   d7fc8:	d1f9      	bne.n	d7fbe <memcpy+0xe>
   d7fca:	bd10      	pop	{r4, pc}

000d7fcc <memmove>:
   d7fcc:	4288      	cmp	r0, r1
   d7fce:	b510      	push	{r4, lr}
   d7fd0:	eb01 0402 	add.w	r4, r1, r2
   d7fd4:	d902      	bls.n	d7fdc <memmove+0x10>
   d7fd6:	4284      	cmp	r4, r0
   d7fd8:	4623      	mov	r3, r4
   d7fda:	d807      	bhi.n	d7fec <memmove+0x20>
   d7fdc:	1e43      	subs	r3, r0, #1
   d7fde:	42a1      	cmp	r1, r4
   d7fe0:	d008      	beq.n	d7ff4 <memmove+0x28>
   d7fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7fea:	e7f8      	b.n	d7fde <memmove+0x12>
   d7fec:	4402      	add	r2, r0
   d7fee:	4601      	mov	r1, r0
   d7ff0:	428a      	cmp	r2, r1
   d7ff2:	d100      	bne.n	d7ff6 <memmove+0x2a>
   d7ff4:	bd10      	pop	{r4, pc}
   d7ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7ffe:	e7f7      	b.n	d7ff0 <memmove+0x24>

000d8000 <memset>:
   d8000:	4402      	add	r2, r0
   d8002:	4603      	mov	r3, r0
   d8004:	4293      	cmp	r3, r2
   d8006:	d100      	bne.n	d800a <memset+0xa>
   d8008:	4770      	bx	lr
   d800a:	f803 1b01 	strb.w	r1, [r3], #1
   d800e:	e7f9      	b.n	d8004 <memset+0x4>

000d8010 <srand>:
   d8010:	b538      	push	{r3, r4, r5, lr}
   d8012:	4b0d      	ldr	r3, [pc, #52]	; (d8048 <srand+0x38>)
   d8014:	681d      	ldr	r5, [r3, #0]
   d8016:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8018:	4604      	mov	r4, r0
   d801a:	b97b      	cbnz	r3, d803c <srand+0x2c>
   d801c:	2018      	movs	r0, #24
   d801e:	f7fd fc37 	bl	d5890 <malloc>
   d8022:	4a0a      	ldr	r2, [pc, #40]	; (d804c <srand+0x3c>)
   d8024:	4b0a      	ldr	r3, [pc, #40]	; (d8050 <srand+0x40>)
   d8026:	63a8      	str	r0, [r5, #56]	; 0x38
   d8028:	e9c0 2300 	strd	r2, r3, [r0]
   d802c:	4b09      	ldr	r3, [pc, #36]	; (d8054 <srand+0x44>)
   d802e:	6083      	str	r3, [r0, #8]
   d8030:	230b      	movs	r3, #11
   d8032:	8183      	strh	r3, [r0, #12]
   d8034:	2201      	movs	r2, #1
   d8036:	2300      	movs	r3, #0
   d8038:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d803c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d803e:	2200      	movs	r2, #0
   d8040:	611c      	str	r4, [r3, #16]
   d8042:	615a      	str	r2, [r3, #20]
   d8044:	bd38      	pop	{r3, r4, r5, pc}
   d8046:	bf00      	nop
   d8048:	2003e42c 	.word	0x2003e42c
   d804c:	abcd330e 	.word	0xabcd330e
   d8050:	e66d1234 	.word	0xe66d1234
   d8054:	0005deec 	.word	0x0005deec

000d8058 <strdup>:
   d8058:	4b02      	ldr	r3, [pc, #8]	; (d8064 <strdup+0xc>)
   d805a:	4601      	mov	r1, r0
   d805c:	6818      	ldr	r0, [r3, #0]
   d805e:	f000 b803 	b.w	d8068 <_strdup_r>
   d8062:	bf00      	nop
   d8064:	2003e42c 	.word	0x2003e42c

000d8068 <_strdup_r>:
   d8068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d806a:	4604      	mov	r4, r0
   d806c:	4608      	mov	r0, r1
   d806e:	460d      	mov	r5, r1
   d8070:	f000 f80f 	bl	d8092 <strlen>
   d8074:	1c42      	adds	r2, r0, #1
   d8076:	4611      	mov	r1, r2
   d8078:	4620      	mov	r0, r4
   d807a:	9201      	str	r2, [sp, #4]
   d807c:	f7fd fc30 	bl	d58e0 <_malloc_r>
   d8080:	4604      	mov	r4, r0
   d8082:	b118      	cbz	r0, d808c <_strdup_r+0x24>
   d8084:	9a01      	ldr	r2, [sp, #4]
   d8086:	4629      	mov	r1, r5
   d8088:	f7ff ff92 	bl	d7fb0 <memcpy>
   d808c:	4620      	mov	r0, r4
   d808e:	b003      	add	sp, #12
   d8090:	bd30      	pop	{r4, r5, pc}

000d8092 <strlen>:
   d8092:	4603      	mov	r3, r0
   d8094:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8098:	2a00      	cmp	r2, #0
   d809a:	d1fb      	bne.n	d8094 <strlen+0x2>
   d809c:	1a18      	subs	r0, r3, r0
   d809e:	3801      	subs	r0, #1
   d80a0:	4770      	bx	lr

000d80a2 <strncpy>:
   d80a2:	b510      	push	{r4, lr}
   d80a4:	3901      	subs	r1, #1
   d80a6:	4603      	mov	r3, r0
   d80a8:	b132      	cbz	r2, d80b8 <strncpy+0x16>
   d80aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d80ae:	f803 4b01 	strb.w	r4, [r3], #1
   d80b2:	3a01      	subs	r2, #1
   d80b4:	2c00      	cmp	r4, #0
   d80b6:	d1f7      	bne.n	d80a8 <strncpy+0x6>
   d80b8:	441a      	add	r2, r3
   d80ba:	2100      	movs	r1, #0
   d80bc:	4293      	cmp	r3, r2
   d80be:	d100      	bne.n	d80c2 <strncpy+0x20>
   d80c0:	bd10      	pop	{r4, pc}
   d80c2:	f803 1b01 	strb.w	r1, [r3], #1
   d80c6:	e7f9      	b.n	d80bc <strncpy+0x1a>

000d80c8 <_strtol_l.isra.0>:
   d80c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d80cc:	4e3a      	ldr	r6, [pc, #232]	; (d81b8 <_strtol_l.isra.0+0xf0>)
   d80ce:	4686      	mov	lr, r0
   d80d0:	468c      	mov	ip, r1
   d80d2:	4660      	mov	r0, ip
   d80d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d80d8:	5da5      	ldrb	r5, [r4, r6]
   d80da:	f015 0508 	ands.w	r5, r5, #8
   d80de:	d1f8      	bne.n	d80d2 <_strtol_l.isra.0+0xa>
   d80e0:	2c2d      	cmp	r4, #45	; 0x2d
   d80e2:	d133      	bne.n	d814c <_strtol_l.isra.0+0x84>
   d80e4:	f89c 4000 	ldrb.w	r4, [ip]
   d80e8:	f04f 0801 	mov.w	r8, #1
   d80ec:	f100 0c02 	add.w	ip, r0, #2
   d80f0:	2b00      	cmp	r3, #0
   d80f2:	d05c      	beq.n	d81ae <_strtol_l.isra.0+0xe6>
   d80f4:	2b10      	cmp	r3, #16
   d80f6:	d10c      	bne.n	d8112 <_strtol_l.isra.0+0x4a>
   d80f8:	2c30      	cmp	r4, #48	; 0x30
   d80fa:	d10a      	bne.n	d8112 <_strtol_l.isra.0+0x4a>
   d80fc:	f89c 0000 	ldrb.w	r0, [ip]
   d8100:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8104:	2858      	cmp	r0, #88	; 0x58
   d8106:	d14d      	bne.n	d81a4 <_strtol_l.isra.0+0xdc>
   d8108:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d810c:	2310      	movs	r3, #16
   d810e:	f10c 0c02 	add.w	ip, ip, #2
   d8112:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8116:	3f01      	subs	r7, #1
   d8118:	2600      	movs	r6, #0
   d811a:	fbb7 f9f3 	udiv	r9, r7, r3
   d811e:	4630      	mov	r0, r6
   d8120:	fb03 7a19 	mls	sl, r3, r9, r7
   d8124:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8128:	2d09      	cmp	r5, #9
   d812a:	d818      	bhi.n	d815e <_strtol_l.isra.0+0x96>
   d812c:	462c      	mov	r4, r5
   d812e:	42a3      	cmp	r3, r4
   d8130:	dd24      	ble.n	d817c <_strtol_l.isra.0+0xb4>
   d8132:	1c75      	adds	r5, r6, #1
   d8134:	d007      	beq.n	d8146 <_strtol_l.isra.0+0x7e>
   d8136:	4581      	cmp	r9, r0
   d8138:	d31d      	bcc.n	d8176 <_strtol_l.isra.0+0xae>
   d813a:	d101      	bne.n	d8140 <_strtol_l.isra.0+0x78>
   d813c:	45a2      	cmp	sl, r4
   d813e:	db1a      	blt.n	d8176 <_strtol_l.isra.0+0xae>
   d8140:	fb00 4003 	mla	r0, r0, r3, r4
   d8144:	2601      	movs	r6, #1
   d8146:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d814a:	e7eb      	b.n	d8124 <_strtol_l.isra.0+0x5c>
   d814c:	2c2b      	cmp	r4, #43	; 0x2b
   d814e:	bf08      	it	eq
   d8150:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8154:	46a8      	mov	r8, r5
   d8156:	bf08      	it	eq
   d8158:	f100 0c02 	addeq.w	ip, r0, #2
   d815c:	e7c8      	b.n	d80f0 <_strtol_l.isra.0+0x28>
   d815e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8162:	2d19      	cmp	r5, #25
   d8164:	d801      	bhi.n	d816a <_strtol_l.isra.0+0xa2>
   d8166:	3c37      	subs	r4, #55	; 0x37
   d8168:	e7e1      	b.n	d812e <_strtol_l.isra.0+0x66>
   d816a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d816e:	2d19      	cmp	r5, #25
   d8170:	d804      	bhi.n	d817c <_strtol_l.isra.0+0xb4>
   d8172:	3c57      	subs	r4, #87	; 0x57
   d8174:	e7db      	b.n	d812e <_strtol_l.isra.0+0x66>
   d8176:	f04f 36ff 	mov.w	r6, #4294967295
   d817a:	e7e4      	b.n	d8146 <_strtol_l.isra.0+0x7e>
   d817c:	1c73      	adds	r3, r6, #1
   d817e:	d106      	bne.n	d818e <_strtol_l.isra.0+0xc6>
   d8180:	2322      	movs	r3, #34	; 0x22
   d8182:	f8ce 3000 	str.w	r3, [lr]
   d8186:	4638      	mov	r0, r7
   d8188:	b942      	cbnz	r2, d819c <_strtol_l.isra.0+0xd4>
   d818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d818e:	f1b8 0f00 	cmp.w	r8, #0
   d8192:	d000      	beq.n	d8196 <_strtol_l.isra.0+0xce>
   d8194:	4240      	negs	r0, r0
   d8196:	2a00      	cmp	r2, #0
   d8198:	d0f7      	beq.n	d818a <_strtol_l.isra.0+0xc2>
   d819a:	b10e      	cbz	r6, d81a0 <_strtol_l.isra.0+0xd8>
   d819c:	f10c 31ff 	add.w	r1, ip, #4294967295
   d81a0:	6011      	str	r1, [r2, #0]
   d81a2:	e7f2      	b.n	d818a <_strtol_l.isra.0+0xc2>
   d81a4:	2430      	movs	r4, #48	; 0x30
   d81a6:	2b00      	cmp	r3, #0
   d81a8:	d1b3      	bne.n	d8112 <_strtol_l.isra.0+0x4a>
   d81aa:	2308      	movs	r3, #8
   d81ac:	e7b1      	b.n	d8112 <_strtol_l.isra.0+0x4a>
   d81ae:	2c30      	cmp	r4, #48	; 0x30
   d81b0:	d0a4      	beq.n	d80fc <_strtol_l.isra.0+0x34>
   d81b2:	230a      	movs	r3, #10
   d81b4:	e7ad      	b.n	d8112 <_strtol_l.isra.0+0x4a>
   d81b6:	bf00      	nop
   d81b8:	000d85ea 	.word	0x000d85ea

000d81bc <strtol>:
   d81bc:	4613      	mov	r3, r2
   d81be:	460a      	mov	r2, r1
   d81c0:	4601      	mov	r1, r0
   d81c2:	4802      	ldr	r0, [pc, #8]	; (d81cc <strtol+0x10>)
   d81c4:	6800      	ldr	r0, [r0, #0]
   d81c6:	f7ff bf7f 	b.w	d80c8 <_strtol_l.isra.0>
   d81ca:	bf00      	nop
   d81cc:	2003e42c 	.word	0x2003e42c

000d81d0 <dynalib_user>:
   d81d0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d81e0:	00000000                                ....

000d81e4 <_ZTV16UltrasonicSensor>:
	...
   d81ec:	000d40b5 000d40d5 63006d63 20766e6f     .@...@..cm.conv 
   d81fc:	6100203d 3d20566e 566d0020 00203d20     = .anV = .mV = .
   d820c:	706d6574 3d204320 65740020 6620706d     temp C = .temp f
   d821c:	00203d20 6c616e41 4920676f 203a206e      = .Analog In : 
   d822c:	616e4100 20676f6c 61206e49 3a646776     .Analog In avgd:
   d823c:	65530020 6c616972 74754f20 20747570      .Serial Output 
   d824c:	7b00203a 6c772220 203a2231 352e3025     : .{ "wl1": %0.5
   d825c:	22202c66 22326c77 3025203a 2c66352e     f, "wl2": %0.5f,
   d826c:	6c772220 203a2233 322e3025 22202c66      "wl3": %0.2f, "
   d827c:	706d6574 25203a22 66322e30 6222202c     temp": %0.2f, "b
   d828c:	25203a22 66322e30 6576007d 726f7463     ": %0.2f}.vector
   d829c:	4d5f3a3a 6e61725f 635f6567 6b636568     ::_M_range_check
   d82ac:	5f5f203a 7728206e 68636968 20736920     : __n (which is 
   d82bc:	29757a25 203d3e20 73696874 69733e2d     %zu) >= this->si
   d82cc:	2928657a 68772820 20686369 25207369     ze() (which is %
   d82dc:	0029757a 74636576 3a3a726f 725f4d5f     zu).vector::_M_r
   d82ec:	6c6c6165 695f636f 7265736e 61640074     ealloc_insert.da
   d82fc:	3d206174 61440020 41206174 203a6776     ta = .Data Avg: 
   d830c:	73655400 68630074 69677261 4600676e     .Test.charging.F
   d831c:	746c7561 69614d00 6961746e 2065636e     ault.Maintaince 
   d832c:	65646f4d 61747320 64657472 726f6620     Mode started for
   d833c:	00732520 72656c61 54007374 6d6d6972      %s.alerts.Trimm
   d834c:	00676e69 6e646944 72742074 316d6d69     ing.Didnt trimm1
   d835c:	654d5500 6968706d 52425f73 0041394e     .UMemphis_BRN9A.

000d836c <_ZTV6Sensor>:
	...
   d8374:	000d4245 000d5199 000d425d 000d4263     EB...Q..]B..cB..

000d8384 <_ZTVN10StatsTools10StatsArrayIfEE>:
	...
   d838c:	000d4269 000d428f                       iB...B..

000d8394 <_ZTV22AnalogUltrasonicSensor>:
	...
   d839c:	000d42b5 000d5199 000d426b 000d4263     .B...Q..kB..cB..

000d83ac <_ZTVN5spark13EthernetClassE>:
	...
   d83b4:	000d5c4d 000d5c43 000d5c39 000d5c2f     M\..C\..9\../\..
   d83c4:	000d5c23 000d5c17 000d70db 000d70e3     #\...\...p...p..
   d83d4:	000d5c0b 000d5c03 000d5bf9 000d5bef     .\...\...[...[..
   d83e4:	000d7113 69726977 5300676e 65747379     .q..wiring.Syste
   d83f4:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   d8404:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   d8414:	616e002e 6e69006e 766f0066 70610066     ..nan.inf.ovf.ap
   d8424:	59250070 2d6d252d 25546425 4d253a48     p.%Y-%m-%dT%H:%M
   d8434:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d8444 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d844c:	000d6659 000d665f 000d669d 000d666d     Yf.._f...f..mf..
   d845c:	000d665b                                [f..

000d8460 <_ZTV9IPAddress>:
	...
   d8468:	000d6bd5 000d6bc5 000d6bc7              .k...k...k..

000d8474 <_ZTV9USBSerial>:
	...
   d847c:	000d6cab 000d6d13 000d6ce9 000d5fad     .l...m...l..._..
   d848c:	000d6cdb 000d6cad 000d6cbd 000d6d0d     .l...l...l...m..
   d849c:	000d6ccd 000d6ca7                       .l...l..

000d84a4 <_ZTVN5spark13CellularClassE>:
	...
   d84ac:	000d6e13 000d6e09 000d6dff 000d6db5     .n...n...m...m..
   d84bc:	000d6df3 000d6de7 000d70db 000d70e3     .m...m...p...p..
   d84cc:	000d6ddb 000d6dd3 000d6dc9 000d6dbf     .m...m...m...m..
   d84dc:	000d7113                                .q..

000d84e0 <_ZTV11USARTSerial>:
	...
   d84e8:	000d6e4d 000d6eb9 000d6e91 000d5fad     Mn...n...n..._..
   d84f8:	000d6e61 000d6e7d 000d6e6f 000d6e8b     an..}n..on...n..
   d8508:	000d6e4f 000d6e53                       On..Sn..

000d8510 <_ZTV7TwoWire>:
	...
   d8518:	000d6f81 000d6fcb 000d6fa3 000d6f83     .o...o...o...o..
   d8528:	000d6fab 000d6fb3 000d6fbb 000d6fc3     .o...o...o...o..

000d8538 <_ZTVN5spark12NetworkClassE>:
	...
   d8540:	000d709b 000d70a5 000d70af 000d70b9     .p...p...p...p..
   d8550:	000d70c3 000d70cf 000d70db 000d70e3     .p...p...p...p..
   d8560:	000d70eb 000d70f7 000d70ff 000d7109     .p...p...p...q..
   d8570:	000d7113                                .q..

000d8574 <_ZSt7nothrow>:
   d8574:	746f6e00 6f6e6520 20686775 63617073     .not enough spac
   d8584:	6f662065 6f662072 74616d72 70786520     e for format exp
   d8594:	69736e61 28206e6f 61656c50 73206573     ansion (Please s
   d85a4:	696d6275 75662074 62206c6c 72206775     ubmit full bug r
   d85b4:	726f7065 74612074 74746820 2f3a7370     eport at https:/
   d85c4:	6363672f 756e672e 67726f2e 6775622f     /gcc.gnu.org/bug
   d85d4:	3a292f73 2020200a 31300020 35343332     s/):.    .012345
   d85e4:	39383736                                 6789.

000d85e9 <_ctype_>:
   d85e9:	20202000 20202020 28282020 20282828     .         ((((( 
   d85f9:	20202020 20202020 20202020 20202020                     
   d8609:	10108820 10101010 10101010 10101010      ...............
   d8619:	04040410 04040404 10040404 10101010     ................
   d8629:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8639:	01010101 01010101 01010101 10101010     ................
   d8649:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8659:	02020202 02020202 02020202 10101010     ................
   d8669:	00000020 00000000 00000000 00000000      ...............
	...

000d86ea <link_const_variable_data_end>:
	...

000d86ec <link_constructors_location>:
   d86ec:	000d5259 	.word	0x000d5259
   d86f0:	000d5c59 	.word	0x000d5c59
   d86f4:	000d5db5 	.word	0x000d5db5
   d86f8:	000d5f85 	.word	0x000d5f85
   d86fc:	000d6285 	.word	0x000d6285
   d8700:	000d63a5 	.word	0x000d63a5
   d8704:	000d6401 	.word	0x000d6401
   d8708:	000d6e1d 	.word	0x000d6e1d
   d870c:	000d71e5 	.word	0x000d71e5
