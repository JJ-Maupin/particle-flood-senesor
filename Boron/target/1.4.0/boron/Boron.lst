
c:/Users/phisu/Desktop/Boron/Boron/target/1.4.0/boron/Boron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d97e0  000d97e0  000097e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  000198d0  2**0
                  CONTENTS
  5 .data         000000bc  2003e154  000d97e8  0000e154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005e0  2003e210  2003e210  0001e210  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d98a4  000d98a4  000198a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d98cc  000d98cc  000198cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000fa62f  00000000  00000000  000198d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013c55  00000000  00000000  00113eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023eea  00000000  00000000  00127b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002aa0  00000000  00000000  0014ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000050b8  00000000  00000000  0014e4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00039e2b  00000000  00000000  00153596  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00030ccf  00000000  00000000  0018d3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010a2ab  00000000  00000000  001be090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e358  00000000  00000000  002c833c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fb07 	bl	d8644 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fb27 	bl	d8690 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e154 	.word	0x2003e154
   d404c:	000d97e8 	.word	0x000d97e8
   d4050:	2003e210 	.word	0x2003e210
   d4054:	2003e210 	.word	0x2003e210
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f9bb 	bl	d63d8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d97dc 	.word	0x000d97dc
   d4084:	000d979c 	.word	0x000d979c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bd0c 	b.w	d4aa4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 ff6b 	bl	d4f68 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b96d 	b.w	d6374 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bb87 	b.w	d57ac <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f001 bb85 	b.w	d57ac <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f001 bb8b 	b.w	d57bc <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f001 bb89 	b.w	d57bc <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_ZN16UltrasonicSensorD1Ev>:
        break;
    }
}

//! Set the only possible output to high impedance mode for safety
UltrasonicSensor::~UltrasonicSensor()
   d40bc:	b510      	push	{r4, lr}
   d40be:	4b06      	ldr	r3, [pc, #24]	; (d40d8 <_ZN16UltrasonicSensorD1Ev+0x1c>)
   d40c0:	6003      	str	r3, [r0, #0]
   d40c2:	4604      	mov	r4, r0
{
    pinMode(triggerPin_, INPUT);
   d40c4:	2100      	movs	r1, #0
   d40c6:	8880      	ldrh	r0, [r0, #4]
   d40c8:	f003 f832 	bl	d7130 <pinMode>
        break;
    }
}

//! Set the only possible output to high impedance mode for safety
UltrasonicSensor::~UltrasonicSensor()
   d40cc:	f104 0010 	add.w	r0, r4, #16
   d40d0:	f001 fda4 	bl	d5c1c <_ZN6StringD1Ev>
{
    pinMode(triggerPin_, INPUT);
}
   d40d4:	4620      	mov	r0, r4
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d901c 	.word	0x000d901c

000d40dc <_ZN16UltrasonicSensorD0Ev>:
        break;
    }
}

//! Set the only possible output to high impedance mode for safety
UltrasonicSensor::~UltrasonicSensor()
   d40dc:	b510      	push	{r4, lr}
   d40de:	4604      	mov	r4, r0
{
    pinMode(triggerPin_, INPUT);
}
   d40e0:	f7ff ffec 	bl	d40bc <_ZN16UltrasonicSensorD1Ev>
   d40e4:	4620      	mov	r0, r4
   d40e6:	212c      	movs	r1, #44	; 0x2c
   d40e8:	f003 f8cd 	bl	d7286 <_ZdlPvj>
   d40ec:	4620      	mov	r0, r4
   d40ee:	bd10      	pop	{r4, pc}

000d40f0 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String>:
// CONSTANTS
const float SPEED_OF_SOUND_cm_per_us = 0.0343;

//! Configure a 3-pin ultrasonic distance sensor
// in: pin = Arduino pin to trigger the sensor and to read the distance from the sensor
UltrasonicSensor::UltrasonicSensor(SensorStyle style, const int pinRx, const int pinTx, String name) :
   d40f0:	b538      	push	{r3, r4, r5, lr}
   d40f2:	4604      	mov	r4, r0
    sensorStyle_(style),
    enabled_(true),
    analogScale_cmpV_(500.0),
    analogDivs_(1024),
    analogReference_V_(3.3),
    name_(name)
   d40f4:	4819      	ldr	r0, [pc, #100]	; (d415c <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x6c>)
   d40f6:	7361      	strb	r1, [r4, #13]
   d40f8:	2501      	movs	r5, #1
   d40fa:	e884 0009 	stmia.w	r4, {r0, r3}
   d40fe:	9904      	ldr	r1, [sp, #16]
   d4100:	60a2      	str	r2, [r4, #8]
   d4102:	7325      	strb	r5, [r4, #12]
   d4104:	f104 0010 	add.w	r0, r4, #16
   d4108:	f001 fdf1 	bl	d5cee <_ZN6StringC1ERKS_>
   d410c:	4b14      	ldr	r3, [pc, #80]	; (d4160 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x70>)
{
    switch (sensorStyle_)
   d410e:	7b61      	ldrb	r1, [r4, #13]
    sensorStyle_(style),
    enabled_(true),
    analogScale_cmpV_(500.0),
    analogDivs_(1024),
    analogReference_V_(3.3),
    name_(name)
   d4110:	6223      	str	r3, [r4, #32]
   d4112:	4b14      	ldr	r3, [pc, #80]	; (d4164 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x74>)
   d4114:	6263      	str	r3, [r4, #36]	; 0x24
{
    switch (sensorStyle_)
   d4116:	42a9      	cmp	r1, r5
    sensorStyle_(style),
    enabled_(true),
    analogScale_cmpV_(500.0),
    analogDivs_(1024),
    analogReference_V_(3.3),
    name_(name)
   d4118:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d411c:	62a3      	str	r3, [r4, #40]	; 0x28
{
    switch (sensorStyle_)
   d411e:	d00a      	beq.n	d4136 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x46>
   d4120:	d302      	bcc.n	d4128 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x38>
   d4122:	2902      	cmp	r1, #2
   d4124:	d00b      	beq.n	d413e <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x4e>
   d4126:	e016      	b.n	d4156 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x66>
    {
    case SensorStyle::FourPin:
        pinMode(triggerPin_, OUTPUT);
   d4128:	4629      	mov	r1, r5
   d412a:	88a0      	ldrh	r0, [r4, #4]
   d412c:	f003 f800 	bl	d7130 <pinMode>
        pinMode(receivePin_, INPUT);
   d4130:	2100      	movs	r1, #0
   d4132:	8920      	ldrh	r0, [r4, #8]
   d4134:	e000      	b.n	d4138 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x48>
        break;

    case SensorStyle::ThreePin:
        pinMode(triggerPin_, OUTPUT);
   d4136:	88a0      	ldrh	r0, [r4, #4]
   d4138:	f002 fffa 	bl	d7130 <pinMode>
        break;
   d413c:	e00b      	b.n	d4156 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x66>
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
            if (INVALID_PIN != triggerPin_)
   d413e:	6860      	ldr	r0, [r4, #4]
            }
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
   d4140:	7325      	strb	r5, [r4, #12]
            if (INVALID_PIN != triggerPin_)
   d4142:	1c43      	adds	r3, r0, #1
   d4144:	d007      	beq.n	d4156 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String+0x66>
            {
                pinMode(triggerPin_, OUTPUT);
   d4146:	4629      	mov	r1, r5
   d4148:	b280      	uxth	r0, r0
   d414a:	f002 fff1 	bl	d7130 <pinMode>
                digitalWrite(triggerPin_, startReading);
   d414e:	4629      	mov	r1, r5
   d4150:	88a0      	ldrh	r0, [r4, #4]
   d4152:	f002 fffe 	bl	d7152 <digitalWrite>

    case SensorStyle::Analog:
        Enable(true); // Enable sensor and start continuous readings
        break;
    }
}
   d4156:	4620      	mov	r0, r4
   d4158:	bd38      	pop	{r3, r4, r5, pc}
   d415a:	bf00      	nop
   d415c:	000d901c 	.word	0x000d901c
   d4160:	43fa0000 	.word	0x43fa0000
   d4164:	40533333 	.word	0x40533333

000d4168 <_ZN16UltrasonicSensor12GetReading_VEv>:
    TriggerSensor();
    return pulseIn(receivePin_, HIGH);
}

float UltrasonicSensor::GetReading_V()
{
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
    return (analogRead(receivePin_) * analogReference_V_) / analogDivs_;
   d416c:	8900      	ldrh	r0, [r0, #8]
   d416e:	f003 f809 	bl	d7184 <analogRead>
   d4172:	ee07 0a90 	vmov	s15, r0
   d4176:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
   d417a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d417e:	ee67 7a80 	vmul.f32	s15, s15, s0
   d4182:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
   d4186:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d418a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d418e:	bd10      	pop	{r4, pc}

000d4190 <_ZN16UltrasonicSensor13TriggerSensorEv>:
    return dist_cm;
}

//! Trigger the distance reading from the sensor according to its pin layout
void UltrasonicSensor::TriggerSensor()
{
   d4190:	b538      	push	{r3, r4, r5, lr}
    switch(sensorStyle_)
   d4192:	7b45      	ldrb	r5, [r0, #13]
   d4194:	2d01      	cmp	r5, #1
    return dist_cm;
}

//! Trigger the distance reading from the sensor according to its pin layout
void UltrasonicSensor::TriggerSensor()
{
   d4196:	4604      	mov	r4, r0
    switch(sensorStyle_)
   d4198:	d003      	beq.n	d41a2 <_ZN16UltrasonicSensor13TriggerSensorEv+0x12>
   d419a:	d317      	bcc.n	d41cc <_ZN16UltrasonicSensor13TriggerSensorEv+0x3c>
   d419c:	2d02      	cmp	r5, #2
   d419e:	d01f      	beq.n	d41e0 <_ZN16UltrasonicSensor13TriggerSensorEv+0x50>
   d41a0:	bd38      	pop	{r3, r4, r5, pc}
    {
    case ThreePin:
        pinMode(triggerPin_, OUTPUT); // Prepare the pin to send the pulse
   d41a2:	4629      	mov	r1, r5
   d41a4:	8880      	ldrh	r0, [r0, #4]
   d41a6:	f002 ffc3 	bl	d7130 <pinMode>
        digitalWrite(triggerPin_, HIGH); // Send the pulse
   d41aa:	4629      	mov	r1, r5
   d41ac:	88a0      	ldrh	r0, [r4, #4]
   d41ae:	f002 ffd0 	bl	d7152 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d41b2:	200a      	movs	r0, #10
   d41b4:	f001 f8cc 	bl	d5350 <HAL_Delay_Microseconds>
        delayMicroseconds(10);
        digitalWrite(triggerPin_, LOW);
   d41b8:	88a0      	ldrh	r0, [r4, #4]
   d41ba:	2100      	movs	r1, #0
   d41bc:	f002 ffc9 	bl	d7152 <digitalWrite>
        pinMode(triggerPin_, INPUT); // Prepare the pin to read data
   d41c0:	88a0      	ldrh	r0, [r4, #4]
   d41c2:	2100      	movs	r1, #0
        {
            digitalWrite(triggerPin_, HIGH);
        }
        break;
    }
}
   d41c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    case ThreePin:
        pinMode(triggerPin_, OUTPUT); // Prepare the pin to send the pulse
        digitalWrite(triggerPin_, HIGH); // Send the pulse
        delayMicroseconds(10);
        digitalWrite(triggerPin_, LOW);
        pinMode(triggerPin_, INPUT); // Prepare the pin to read data
   d41c8:	f002 bfb2 	b.w	d7130 <pinMode>
        break;

    case FourPin:
        digitalWrite(triggerPin_, HIGH); // Just send the pulse
   d41cc:	2101      	movs	r1, #1
   d41ce:	8880      	ldrh	r0, [r0, #4]
   d41d0:	f002 ffbf 	bl	d7152 <digitalWrite>
   d41d4:	200a      	movs	r0, #10
   d41d6:	f001 f8bb 	bl	d5350 <HAL_Delay_Microseconds>
        delayMicroseconds(10);
        digitalWrite(triggerPin_, LOW);
   d41da:	2100      	movs	r1, #0
   d41dc:	88a0      	ldrh	r0, [r4, #4]
   d41de:	e004      	b.n	d41ea <_ZN16UltrasonicSensor13TriggerSensorEv+0x5a>
        break;

    case Analog:
        if (INVALID_PIN != triggerPin_)
   d41e0:	6840      	ldr	r0, [r0, #4]
   d41e2:	1c43      	adds	r3, r0, #1
   d41e4:	d005      	beq.n	d41f2 <_ZN16UltrasonicSensor13TriggerSensorEv+0x62>
        {
            digitalWrite(triggerPin_, HIGH);
   d41e6:	2101      	movs	r1, #1
   d41e8:	b280      	uxth	r0, r0
        }
        break;
    }
}
   d41ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        break;

    case Analog:
        if (INVALID_PIN != triggerPin_)
        {
            digitalWrite(triggerPin_, HIGH);
   d41ee:	f002 bfb0 	b.w	d7152 <digitalWrite>
   d41f2:	bd38      	pop	{r3, r4, r5, pc}

000d41f4 <_ZN16UltrasonicSensor13GetReading_usEv>:

//! Get the raw time value from the distance sensor. This will be double the time
//     representing to the distance to the object.
// out: Duration of pulse from sensor in Microseconds.
unsigned int UltrasonicSensor::GetReading_us()
{
   d41f4:	b510      	push	{r4, lr}
   d41f6:	4604      	mov	r4, r0
    TriggerSensor();
   d41f8:	f7ff ffca 	bl	d4190 <_ZN16UltrasonicSensor13TriggerSensorEv>
    return pulseIn(receivePin_, HIGH);
   d41fc:	8920      	ldrh	r0, [r4, #8]
   d41fe:	2101      	movs	r1, #1
}
   d4200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//     representing to the distance to the object.
// out: Duration of pulse from sensor in Microseconds.
unsigned int UltrasonicSensor::GetReading_us()
{
    TriggerSensor();
    return pulseIn(receivePin_, HIGH);
   d4204:	f002 bfd5 	b.w	d71b2 <pulseIn>

000d4208 <_ZN16UltrasonicSensor14GetDistance_cmEv>:
}

//! Get the distance reading from the sensor
// out: Distance reported by sensor in Centimeters.
float UltrasonicSensor::GetDistance_cm()
{
   d4208:	b510      	push	{r4, lr}
    float dist_cm = 0.0;

    switch(sensorStyle_)
   d420a:	7b43      	ldrb	r3, [r0, #13]
   d420c:	2b01      	cmp	r3, #1
}

//! Get the distance reading from the sensor
// out: Distance reported by sensor in Centimeters.
float UltrasonicSensor::GetDistance_cm()
{
   d420e:	4604      	mov	r4, r0
    float dist_cm = 0.0;

    switch(sensorStyle_)
   d4210:	d906      	bls.n	d4220 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x18>
   d4212:	2b02      	cmp	r3, #2
   d4214:	d113      	bne.n	d423e <_ZN16UltrasonicSensor14GetDistance_cmEv+0x36>
        // it needs to be cut in half to get the actual distance.
        dist_cm = (GetReading_us() * SPEED_OF_SOUND_cm_per_us) / 2.0;
        break;

    case SensorStyle::Analog:
        dist_cm = GetReading_V() * analogScale_cmpV_;
   d4216:	f7ff ffa7 	bl	d4168 <_ZN16UltrasonicSensor12GetReading_VEv>
   d421a:	edd4 7a08 	vldr	s15, [r4, #32]
   d421e:	e00b      	b.n	d4238 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x30>
    {
    case SensorStyle::ThreePin:
    case SensorStyle::FourPin:
        //   The time read from the sensor is a round-trip time;
        // it needs to be cut in half to get the actual distance.
        dist_cm = (GetReading_us() * SPEED_OF_SOUND_cm_per_us) / 2.0;
   d4220:	f7ff ffe8 	bl	d41f4 <_ZN16UltrasonicSensor13GetReading_usEv>
   d4224:	ee07 0a90 	vmov	s15, r0
   d4228:	ed9f 0a06 	vldr	s0, [pc, #24]	; d4244 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x3c>
   d422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4230:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4234:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
        break;

    case SensorStyle::Analog:
        dist_cm = GetReading_V() * analogScale_cmpV_;
   d4238:	ee20 0a27 	vmul.f32	s0, s0, s15
        break;
   d423c:	bd10      	pop	{r4, pc}

//! Get the distance reading from the sensor
// out: Distance reported by sensor in Centimeters.
float UltrasonicSensor::GetDistance_cm()
{
    float dist_cm = 0.0;
   d423e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4248 <_ZN16UltrasonicSensor14GetDistance_cmEv+0x40>
    case SensorStyle::Analog:
        dist_cm = GetReading_V() * analogScale_cmpV_;
        break;
    }
    return dist_cm;
}
   d4242:	bd10      	pop	{r4, pc}
   d4244:	3d0c7e28 	.word	0x3d0c7e28
   d4248:	00000000 	.word	0x00000000

000d424c <_GLOBAL__sub_I__ZN16UltrasonicSensorC2ENS_11SensorStyleEii6String>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d424c:	f001 b830 	b.w	d52b0 <HAL_Pin_Map>

000d4250 <_ZN6Sensor9GetSampleEv>:
  ~Sensor() {
    delete[] name_; // Free up name memory
  }

  // Overload with custom sensor sampling code
  virtual float GetSample() { return (enabled_) ? 0 : -1; }
   d4250:	7903      	ldrb	r3, [r0, #4]
   d4252:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4264 <_ZN6Sensor9GetSampleEv+0x14>
   d4256:	2b00      	cmp	r3, #0
   d4258:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d425c:	bf08      	it	eq
   d425e:	eeb0 0a67 	vmoveq.f32	s0, s15
   d4262:	4770      	bx	lr
   d4264:	00000000 	.word	0x00000000

000d4268 <_ZN6Sensor6EnableEv>:
      Serial.println("Didnt trimm1");
      return -1;
    }
  }

  virtual void Enable() { enabled_ = true; }
   d4268:	2301      	movs	r3, #1
   d426a:	7103      	strb	r3, [r0, #4]
   d426c:	4770      	bx	lr

000d426e <_ZN6Sensor7DisableEv>:

  virtual void Disable() { enabled_ = false; }
   d426e:	2300      	movs	r3, #0
   d4270:	7103      	strb	r3, [r0, #4]
   d4272:	4770      	bx	lr

000d4274 <_ZN10StatsTools10StatsArrayIfED1Ev>:
    StatsArray(unsigned int startingSize) :
        size_(startingSize),
        values_(new T[size_]),
        count_(0) {}

    virtual ~StatsArray(){}
   d4274:	4770      	bx	lr

000d4276 <_ZN22AnalogUltrasonicSensor6EnableEv>:
	float GetSample()
	{
		return sensor_->GetDistance_cm();
	}

	void Enable()
   d4276:	b538      	push	{r3, r4, r5, lr}
	{
		sensor_->Enable(true); // For the maxbotix sensor "true" here tells it to start taking samples
   d4278:	6904      	ldr	r4, [r0, #16]
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
            if (INVALID_PIN != triggerPin_)
   d427a:	6860      	ldr	r0, [r4, #4]
            }
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
   d427c:	2501      	movs	r5, #1
            if (INVALID_PIN != triggerPin_)
   d427e:	1c43      	adds	r3, r0, #1
            }
        }

        void Enable(bool startReading = false)
        {
            enabled_ = true;
   d4280:	7325      	strb	r5, [r4, #12]
            if (INVALID_PIN != triggerPin_)
   d4282:	d009      	beq.n	d4298 <_ZN22AnalogUltrasonicSensor6EnableEv+0x22>
            {
                pinMode(triggerPin_, OUTPUT);
   d4284:	4629      	mov	r1, r5
   d4286:	b280      	uxth	r0, r0
   d4288:	f002 ff52 	bl	d7130 <pinMode>
                digitalWrite(triggerPin_, startReading);
   d428c:	4629      	mov	r1, r5
   d428e:	88a0      	ldrh	r0, [r4, #4]
	}
   d4290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4294:	f002 bf5d 	b.w	d7152 <digitalWrite>
   d4298:	bd38      	pop	{r3, r4, r5, pc}

000d429a <_ZN10StatsTools10StatsArrayIfED0Ev>:
   d429a:	b510      	push	{r4, lr}
   d429c:	2110      	movs	r1, #16
   d429e:	4604      	mov	r4, r0
   d42a0:	f002 fff1 	bl	d7286 <_ZdlPvj>
   d42a4:	4620      	mov	r0, r4
   d42a6:	bd10      	pop	{r4, pc}

000d42a8 <_ZN22AnalogUltrasonicSensor9GetSampleEv>:
		sensor_->SetAnalogDivs(4095);
	}

	float GetSample()
	{
		return sensor_->GetDistance_cm();
   d42a8:	6900      	ldr	r0, [r0, #16]
   d42aa:	f7ff bfad 	b.w	d4208 <_ZN16UltrasonicSensor14GetDistance_cmEv>

000d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>:

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d42ae:	b108      	cbz	r0, d42b4 <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32+0x6>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d42b0:	f7ff bef7 	b.w	d40a2 <_ZdlPv>
   d42b4:	4770      	bx	lr

000d42b6 <_ZNSt6vectorI12SensorConfigSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42b6:	b510      	push	{r4, lr}
   d42b8:	4604      	mov	r4, r0
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
   d42ba:	6800      	ldr	r0, [r0, #0]
   d42bc:	f7ff fff7 	bl	d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d42c0:	4620      	mov	r0, r4
   d42c2:	bd10      	pop	{r4, pc}

000d42c4 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42c4:	b570      	push	{r4, r5, r6, lr}
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d42c6:	e890 0050 	ldmia.w	r0, {r4, r6}
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42ca:	4605      	mov	r5, r0
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d42cc:	42a6      	cmp	r6, r4
   d42ce:	d008      	beq.n	d42e2 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x1e>
  uint8_t netSync = 0xC;
};

#include "Sensor.h"

struct SensorData {
   d42d0:	f104 001c 	add.w	r0, r4, #28
   d42d4:	f001 fca2 	bl	d5c1c <_ZN6StringD1Ev>
   d42d8:	4620      	mov	r0, r4
   d42da:	f001 fc9f 	bl	d5c1c <_ZN6StringD1Ev>
   d42de:	342c      	adds	r4, #44	; 0x2c
   d42e0:	e7f4      	b.n	d42cc <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x8>
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
   d42e2:	6828      	ldr	r0, [r5, #0]
   d42e4:	f7ff ffe3 	bl	d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d42e8:	4628      	mov	r0, r5
   d42ea:	bd70      	pop	{r4, r5, r6, pc}

000d42ec <_ZNSt6vectorI6StringSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42ec:	b570      	push	{r4, r5, r6, lr}
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d42ee:	e890 0060 	ldmia.w	r0, {r5, r6}
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d42f2:	4604      	mov	r4, r0
   d42f4:	42ae      	cmp	r6, r5
   d42f6:	d004      	beq.n	d4302 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x16>
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }
   d42f8:	4628      	mov	r0, r5
   d42fa:	f001 fc8f 	bl	d5c1c <_ZN6StringD1Ev>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d42fe:	3510      	adds	r5, #16
   d4300:	e7f8      	b.n	d42f4 <_ZNSt6vectorI6StringSaIS0_EED1Ev+0x8>
	  }
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
   d4302:	6820      	ldr	r0, [r4, #0]
   d4304:	f7ff ffd3 	bl	d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4308:	4620      	mov	r0, r4
   d430a:	bd70      	pop	{r4, r5, r6, pc}

000d430c <_ZN22AnalogUltrasonicSensorC1E6Stringii>:

class AnalogUltrasonicSensor
	: public Sensor
{
public:
	AnalogUltrasonicSensor(String name, const int inputPin, const int enablePin = UltrasonicSensor::INVALID_PIN):
   d430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4310:	b08a      	sub	sp, #40	; 0x28
   d4312:	4604      	mov	r4, r0
		Sensor(name, String("cm"))
   d4314:	ad06      	add	r5, sp, #24
   d4316:	a802      	add	r0, sp, #8

class AnalogUltrasonicSensor
	: public Sensor
{
public:
	AnalogUltrasonicSensor(String name, const int inputPin, const int enablePin = UltrasonicSensor::INVALID_PIN):
   d4318:	4617      	mov	r7, r2
   d431a:	4698      	mov	r8, r3
		Sensor(name, String("cm"))
   d431c:	f001 fce7 	bl	d5cee <_ZN6StringC1ERKS_>
   d4320:	4922      	ldr	r1, [pc, #136]	; (d43ac <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa0>)
   d4322:	4628      	mov	r0, r5
   d4324:	f001 fcc1 	bl	d5caa <_ZN6StringC1EPK19__FlashStringHelper>
#include "StatsArray.h"

class Sensor {
public:
  Sensor(String name, String units) {
    name_ = new char[name.length() + 2];        // Make space for the name
   d4328:	9804      	ldr	r0, [sp, #16]
// edited on 6/8/18 by dakota aaron for arudino compatiability
#include "StatsArray.h"

class Sensor {
public:
  Sensor(String name, String units) {
   d432a:	4b21      	ldr	r3, [pc, #132]	; (d43b0 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa4>)
   d432c:	6023      	str	r3, [r4, #0]
    name_ = new char[name.length() + 2];        // Make space for the name
   d432e:	3002      	adds	r0, #2
   d4330:	f7ff feb5 	bl	d409e <_Znaj>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4334:	9a04      	ldr	r2, [sp, #16]
   d4336:	60a0      	str	r0, [r4, #8]
   d4338:	4601      	mov	r1, r0
   d433a:	2300      	movs	r3, #0
   d433c:	3201      	adds	r2, #1
   d433e:	a802      	add	r0, sp, #8
   d4340:	f001 fce0 	bl	d5d04 <_ZNK6String8getBytesEPhjj>
    name.toCharArray(name_, name.length() + 1); // Copy name to memory
    name_[name.length() + 1] = 0;               // Add in Null Terminator
   d4344:	68a2      	ldr	r2, [r4, #8]
   d4346:	9b04      	ldr	r3, [sp, #16]
   d4348:	4413      	add	r3, r2
   d434a:	2600      	movs	r6, #0
   d434c:	705e      	strb	r6, [r3, #1]

    units_ = new char[units.length() + 2];         // Make space for the name
   d434e:	9808      	ldr	r0, [sp, #32]
   d4350:	3002      	adds	r0, #2
   d4352:	f7ff fea4 	bl	d409e <_Znaj>
   d4356:	9a08      	ldr	r2, [sp, #32]
   d4358:	60e0      	str	r0, [r4, #12]
   d435a:	4601      	mov	r1, r0
   d435c:	4633      	mov	r3, r6
   d435e:	3201      	adds	r2, #1
   d4360:	4628      	mov	r0, r5
   d4362:	f001 fccf 	bl	d5d04 <_ZNK6String8getBytesEPhjj>
    units.toCharArray(units_, units.length() + 1); // Copy name to memory
    units_[units.length() + 1] = 0;                // Add in Null Terminator
   d4366:	68e2      	ldr	r2, [r4, #12]
   d4368:	9b08      	ldr	r3, [sp, #32]
   d436a:	4413      	add	r3, r2
   d436c:	4628      	mov	r0, r5
   d436e:	705e      	strb	r6, [r3, #1]
   d4370:	f001 fc54 	bl	d5c1c <_ZN6StringD1Ev>
   d4374:	a802      	add	r0, sp, #8
   d4376:	f001 fc51 	bl	d5c1c <_ZN6StringD1Ev>
   d437a:	4b0e      	ldr	r3, [pc, #56]	; (d43b4 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xa8>)
   d437c:	6023      	str	r3, [r4, #0]
	{
		sensor_ = new UltrasonicSensor(UltrasonicSensor::Analog, inputPin, enablePin);
   d437e:	490e      	ldr	r1, [pc, #56]	; (d43b8 <_ZN22AnalogUltrasonicSensorC1E6Stringii+0xac>)
   d4380:	4628      	mov	r0, r5
   d4382:	f001 fc92 	bl	d5caa <_ZN6StringC1EPK19__FlashStringHelper>
   d4386:	202c      	movs	r0, #44	; 0x2c
   d4388:	f7ff fe87 	bl	d409a <_Znwj>
   d438c:	4606      	mov	r6, r0
   d438e:	b128      	cbz	r0, d439c <_ZN22AnalogUltrasonicSensorC1E6Stringii+0x90>
   d4390:	9500      	str	r5, [sp, #0]
   d4392:	4643      	mov	r3, r8
   d4394:	463a      	mov	r2, r7
   d4396:	2102      	movs	r1, #2
   d4398:	f7ff feaa 	bl	d40f0 <_ZN16UltrasonicSensorC1ENS_11SensorStyleEii6String>
   d439c:	6126      	str	r6, [r4, #16]
   d439e:	4628      	mov	r0, r5
   d43a0:	f001 fc3c 	bl	d5c1c <_ZN6StringD1Ev>
	}
   d43a4:	4620      	mov	r0, r4
   d43a6:	b00a      	add	sp, #40	; 0x28
   d43a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d43ac:	000d9064 	.word	0x000d9064
   d43b0:	000d902c 	.word	0x000d902c
   d43b4:	000d9054 	.word	0x000d9054
   d43b8:	000d92fd 	.word	0x000d92fd
   d43bc:	00000000 	.word	0x00000000

000d43c0 <_Z11processTempv>:
    //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
  }


}
float processTemp() {
   d43c0:	b570      	push	{r4, r5, r6, lr}
  // TEMP_INPUT_PIN
  const int anVolt = analogRead(TEMP_INPUT_PIN);
   d43c2:	2011      	movs	r0, #17
    //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
  }


}
float processTemp() {
   d43c4:	ed2d 8b02 	vpush	{d8}
  // TEMP_INPUT_PIN
  const int anVolt = analogRead(TEMP_INPUT_PIN);
   d43c8:	f002 fedc 	bl	d7184 <analogRead>
   d43cc:	4604      	mov	r4, r0
  double convert = 0.8056640625;
  float mV = anVolt * convert;
   d43ce:	f003 faf5 	bl	d79bc <__aeabi_i2d>
   d43d2:	a339      	add	r3, pc, #228	; (adr r3, d44b8 <_Z11processTempv+0xf8>)
   d43d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d8:	f003 fb56 	bl	d7a88 <__aeabi_dmul>
   d43dc:	f003 fe4c 	bl	d8078 <__aeabi_d2f>
   d43e0:	ee08 0a10 	vmov	s16, r0
  Serial.print("conv = ");
   d43e4:	f002 fbaa 	bl	d6b3c <_Z16_fetch_usbserialv>
   d43e8:	4937      	ldr	r1, [pc, #220]	; (d44c8 <_Z11processTempv+0x108>)
   d43ea:	f001 fd01 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(convert);
   d43ee:	f002 fba5 	bl	d6b3c <_Z16_fetch_usbserialv>
   d43f2:	ed9f 0b31 	vldr	d0, [pc, #196]	; d44b8 <_Z11processTempv+0xf8>
   d43f6:	2102      	movs	r1, #2
   d43f8:	f001 fe2e 	bl	d6058 <_ZN5Print7printlnEdi>
  Serial.print("anV = ");
   d43fc:	f002 fb9e 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4400:	4932      	ldr	r1, [pc, #200]	; (d44cc <_Z11processTempv+0x10c>)
   d4402:	f001 fcf5 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(anVolt);
   d4406:	f002 fb99 	bl	d6b3c <_Z16_fetch_usbserialv>
   d440a:	220a      	movs	r2, #10
   d440c:	4621      	mov	r1, r4
   d440e:	f001 fd67 	bl	d5ee0 <_ZN5Print7printlnEii>
  Serial.print("mV = ");
   d4412:	f002 fb93 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4416:	492e      	ldr	r1, [pc, #184]	; (d44d0 <_Z11processTempv+0x110>)
   d4418:	f001 fcea 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(mV);
   d441c:	f002 fb8e 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4420:	4604      	mov	r4, r0
   d4422:	ee18 0a10 	vmov	r0, s16
   d4426:	f003 fadb 	bl	d79e0 <__aeabi_f2d>
   d442a:	ec41 0b10 	vmov	d0, r0, r1
   d442e:	2102      	movs	r1, #2
   d4430:	4620      	mov	r0, r4
   d4432:	f001 fe11 	bl	d6058 <_ZN5Print7printlnEdi>
  // degree C
  float tc = ((mV - 500) / 10);
  Serial.print("temp C = ");
   d4436:	f002 fb81 	bl	d6b3c <_Z16_fetch_usbserialv>
   d443a:	4926      	ldr	r1, [pc, #152]	; (d44d4 <_Z11processTempv+0x114>)
   d443c:	f001 fcd8 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(tc);
   d4440:	f002 fb7c 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4444:	eddf 7a24 	vldr	s15, [pc, #144]	; d44d8 <_Z11processTempv+0x118>
   d4448:	ee38 8a67 	vsub.f32	s16, s16, s15
   d444c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d4450:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4454:	4606      	mov	r6, r0
   d4456:	ee17 0a10 	vmov	r0, s14
   d445a:	f003 fac1 	bl	d79e0 <__aeabi_f2d>
   d445e:	4604      	mov	r4, r0
   d4460:	460d      	mov	r5, r1
   d4462:	ec45 4b10 	vmov	d0, r4, r5
   d4466:	2102      	movs	r1, #2
   d4468:	4630      	mov	r0, r6
   d446a:	f001 fdf5 	bl	d6058 <_ZN5Print7printlnEdi>
  // degree F
  float tf = (tc * 1.8) + 32;
   d446e:	a314      	add	r3, pc, #80	; (adr r3, d44c0 <_Z11processTempv+0x100>)
   d4470:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4474:	4620      	mov	r0, r4
   d4476:	4629      	mov	r1, r5
   d4478:	f003 fb06 	bl	d7a88 <__aeabi_dmul>
   d447c:	2200      	movs	r2, #0
   d447e:	4b17      	ldr	r3, [pc, #92]	; (d44dc <_Z11processTempv+0x11c>)
   d4480:	f003 f950 	bl	d7724 <__adddf3>
   d4484:	f003 fdf8 	bl	d8078 <__aeabi_d2f>
   d4488:	4604      	mov	r4, r0
  Serial.print("temp f = ");
   d448a:	f002 fb57 	bl	d6b3c <_Z16_fetch_usbserialv>
   d448e:	4914      	ldr	r1, [pc, #80]	; (d44e0 <_Z11processTempv+0x120>)
   d4490:	f001 fcae 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(tf);
   d4494:	f002 fb52 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4498:	4605      	mov	r5, r0
   d449a:	4620      	mov	r0, r4
   d449c:	f003 faa0 	bl	d79e0 <__aeabi_f2d>
   d44a0:	ec41 0b10 	vmov	d0, r0, r1
   d44a4:	2102      	movs	r1, #2
   d44a6:	4628      	mov	r0, r5
   d44a8:	f001 fdd6 	bl	d6058 <_ZN5Print7printlnEdi>
  return tf;
}
   d44ac:	ecbd 8b02 	vpop	{d8}
   d44b0:	ee00 4a10 	vmov	s0, r4
   d44b4:	bd70      	pop	{r4, r5, r6, pc}
   d44b6:	bf00      	nop
   d44b8:	00000000 	.word	0x00000000
   d44bc:	3fe9c800 	.word	0x3fe9c800
   d44c0:	cccccccd 	.word	0xcccccccd
   d44c4:	3ffccccc 	.word	0x3ffccccc
   d44c8:	000d90b2 	.word	0x000d90b2
   d44cc:	000d90ba 	.word	0x000d90ba
   d44d0:	000d90c1 	.word	0x000d90c1
   d44d4:	000d90c7 	.word	0x000d90c7
   d44d8:	43fa0000 	.word	0x43fa0000
   d44dc:	40400000 	.word	0x40400000
   d44e0:	000d90d1 	.word	0x000d90d1
   d44e4:	00000000 	.word	0x00000000

000d44e8 <_Z17ProccessNewAnalogv>:
    return (inchesavg2);
  }
  return 0;
}

float ProccessNewAnalog() {
   d44e8:	b570      	push	{r4, r5, r6, lr}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d44ea:	2012      	movs	r0, #18
    return (inchesavg2);
  }
  return 0;
}

float ProccessNewAnalog() {
   d44ec:	ed2d 8b02 	vpush	{d8}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d44f0:	f002 fe48 	bl	d7184 <analogRead>
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
  float inches = cm * 0.393701;
   d44f4:	2404      	movs	r4, #4
   d44f6:	fb90 f0f4 	sdiv	r0, r0, r4
   d44fa:	ee07 0a90 	vmov	s15, r0
   d44fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Serial.print("Analog In : ");
  Serial.println(inches);
  float cm2 = 0;
   d4502:	ed9f 8a2d 	vldr	s16, [pc, #180]	; d45b8 <_Z17ProccessNewAnalogv+0xd0>
float ProccessNewAnalog() {
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
  float inches = cm * 0.393701;
   d4506:	ee17 0a90 	vmov	r0, s15
   d450a:	f003 fa69 	bl	d79e0 <__aeabi_f2d>
   d450e:	a328      	add	r3, pc, #160	; (adr r3, d45b0 <_Z17ProccessNewAnalogv+0xc8>)
   d4510:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4514:	f003 fab8 	bl	d7a88 <__aeabi_dmul>
   d4518:	f003 fdae 	bl	d8078 <__aeabi_d2f>
   d451c:	4606      	mov	r6, r0
  Serial.print("Analog In : ");
   d451e:	f002 fb0d 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4522:	4926      	ldr	r1, [pc, #152]	; (d45bc <_Z17ProccessNewAnalogv+0xd4>)
   d4524:	f001 fc64 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(inches);
   d4528:	f002 fb08 	bl	d6b3c <_Z16_fetch_usbserialv>
   d452c:	4605      	mov	r5, r0
   d452e:	4630      	mov	r0, r6
   d4530:	f003 fa56 	bl	d79e0 <__aeabi_f2d>
   d4534:	ec41 0b10 	vmov	d0, r0, r1
   d4538:	4628      	mov	r0, r5
   d453a:	2102      	movs	r1, #2
   d453c:	f001 fd8c 	bl	d6058 <_ZN5Print7printlnEdi>
   d4540:	250a      	movs	r5, #10
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < 10; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d4542:	2012      	movs	r0, #18
   d4544:	f002 fe1e 	bl	d7184 <analogRead>
   d4548:	fb90 f0f4 	sdiv	r0, r0, r4
   d454c:	ee07 0a90 	vmov	s15, r0
   d4550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // wait one second and take another reading
    delay(100);
   d4554:	2064      	movs	r0, #100	; 0x64
  Serial.println(inches);
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < 10; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d4556:	ee38 8a27 	vadd.f32	s16, s16, s15
    // wait one second and take another reading
    delay(100);
   d455a:	f001 fe4b 	bl	d61f4 <delay>
  float inches = cm * 0.393701;
  Serial.print("Analog In : ");
  Serial.println(inches);
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < 10; i++) {
   d455e:	3d01      	subs	r5, #1
   d4560:	d1ef      	bne.n	d4542 <_Z17ProccessNewAnalogv+0x5a>
  }

  // average our reading
  float cmavg = cm2 / 10;
  float inchesavg = cmavg * 0.393701;
  Serial.print("Analog In avgd: ");
   d4562:	f002 faeb 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4566:	4916      	ldr	r1, [pc, #88]	; (d45c0 <_Z17ProccessNewAnalogv+0xd8>)
   d4568:	f001 fc42 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(inchesavg);
   d456c:	f002 fae6 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4570:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d4574:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4578:	4604      	mov	r4, r0
   d457a:	ee17 0a10 	vmov	r0, s14
   d457e:	f003 fa2f 	bl	d79e0 <__aeabi_f2d>
   d4582:	a30b      	add	r3, pc, #44	; (adr r3, d45b0 <_Z17ProccessNewAnalogv+0xc8>)
   d4584:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4588:	f003 fa7e 	bl	d7a88 <__aeabi_dmul>
   d458c:	f003 fd74 	bl	d8078 <__aeabi_d2f>
   d4590:	f003 fa26 	bl	d79e0 <__aeabi_f2d>
   d4594:	ec41 0b10 	vmov	d0, r0, r1
   d4598:	2102      	movs	r1, #2
   d459a:	4620      	mov	r0, r4
   d459c:	f001 fd5c 	bl	d6058 <_ZN5Print7printlnEdi>
  return (inches);
}
   d45a0:	ecbd 8b02 	vpop	{d8}
   d45a4:	ee00 6a10 	vmov	s0, r6
   d45a8:	bd70      	pop	{r4, r5, r6, pc}
   d45aa:	bf00      	nop
   d45ac:	f3af 8000 	nop.w
   d45b0:	add9c27f 	.word	0xadd9c27f
   d45b4:	3fd93265 	.word	0x3fd93265
   d45b8:	00000000 	.word	0x00000000
   d45bc:	000d90db 	.word	0x000d90db
   d45c0:	000d90e8 	.word	0x000d90e8
   d45c4:	00000000 	.word	0x00000000

000d45c8 <_Z20ProccessNewAnalogAvgv>:

float ProccessNewAnalogAvg() {
   d45c8:	b570      	push	{r4, r5, r6, lr}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d45ca:	2012      	movs	r0, #18
  Serial.print("Analog In avgd: ");
  Serial.println(inchesavg);
  return (inches);
}

float ProccessNewAnalogAvg() {
   d45cc:	ed2d 8b02 	vpush	{d8}
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
   d45d0:	f002 fdd8 	bl	d7184 <analogRead>
   d45d4:	4605      	mov	r5, r0
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
  float inches = cm * 0.393701;
  Serial.print("Analog In : ");
   d45d6:	f002 fab1 	bl	d6b3c <_Z16_fetch_usbserialv>
   d45da:	492f      	ldr	r1, [pc, #188]	; (d4698 <_Z20ProccessNewAnalogAvgv+0xd0>)
  Serial.println(inches);
  float cm2 = 0;
   d45dc:	ed9f 8a2f 	vldr	s16, [pc, #188]	; d469c <_Z20ProccessNewAnalogAvgv+0xd4>
  const int anVolt = analogRead(MAXBOTIX_INPUT_PIN);
  // maxbotix scale is Vcc/1024 V/cm, Particle reads at 4095
  // in order to get the correct scale we must divide by ~4
  float cm = anVolt / 4;
  float inches = cm * 0.393701;
  Serial.print("Analog In : ");
   d45e0:	f001 fc06 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(inches);
   d45e4:	f002 faaa 	bl	d6b3c <_Z16_fetch_usbserialv>
   d45e8:	2404      	movs	r4, #4
   d45ea:	4606      	mov	r6, r0
   d45ec:	fb95 f0f4 	sdiv	r0, r5, r4
   d45f0:	ee07 0a90 	vmov	s15, r0
   d45f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d45f8:	2514      	movs	r5, #20
   d45fa:	ee17 0a90 	vmov	r0, s15
   d45fe:	f003 f9ef 	bl	d79e0 <__aeabi_f2d>
   d4602:	a323      	add	r3, pc, #140	; (adr r3, d4690 <_Z20ProccessNewAnalogAvgv+0xc8>)
   d4604:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4608:	f003 fa3e 	bl	d7a88 <__aeabi_dmul>
   d460c:	f003 fd34 	bl	d8078 <__aeabi_d2f>
   d4610:	f003 f9e6 	bl	d79e0 <__aeabi_f2d>
   d4614:	ec41 0b10 	vmov	d0, r0, r1
   d4618:	2102      	movs	r1, #2
   d461a:	4630      	mov	r0, r6
   d461c:	f001 fd1c 	bl	d6058 <_ZN5Print7printlnEdi>
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < samples; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d4620:	2012      	movs	r0, #18
   d4622:	f002 fdaf 	bl	d7184 <analogRead>
   d4626:	fb90 f0f4 	sdiv	r0, r0, r4
   d462a:	ee07 0a90 	vmov	s15, r0
   d462e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    // wait one second and take another reading
    delay(100);
   d4632:	2064      	movs	r0, #100	; 0x64
  Serial.println(inches);
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < samples; i++) {
    // get our reading
    cm2 += analogRead(MAXBOTIX_INPUT_PIN) / 4;
   d4634:	ee38 8a27 	vadd.f32	s16, s16, s15
    // wait one second and take another reading
    delay(100);
   d4638:	f001 fddc 	bl	d61f4 <delay>
  float inches = cm * 0.393701;
  Serial.print("Analog In : ");
  Serial.println(inches);
  float cm2 = 0;
  // lets do a 10 measurement avg
  for (int i = 0; i < samples; i++) {
   d463c:	3d01      	subs	r5, #1
   d463e:	d1ef      	bne.n	d4620 <_Z20ProccessNewAnalogAvgv+0x58>
    delay(100);
  }

  // average our reading
  float cmavg = cm2 / samples;
  float inchesavg = cmavg * 0.393701;
   d4640:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4644:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4648:	ee17 0a10 	vmov	r0, s14
   d464c:	f003 f9c8 	bl	d79e0 <__aeabi_f2d>
   d4650:	a30f      	add	r3, pc, #60	; (adr r3, d4690 <_Z20ProccessNewAnalogAvgv+0xc8>)
   d4652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4656:	f003 fa17 	bl	d7a88 <__aeabi_dmul>
   d465a:	f003 fd0d 	bl	d8078 <__aeabi_d2f>
   d465e:	4604      	mov	r4, r0
  Serial.print("Analog In avgd: ");
   d4660:	f002 fa6c 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4664:	490e      	ldr	r1, [pc, #56]	; (d46a0 <_Z20ProccessNewAnalogAvgv+0xd8>)
   d4666:	f001 fbc3 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println(inchesavg);
   d466a:	f002 fa67 	bl	d6b3c <_Z16_fetch_usbserialv>
   d466e:	4605      	mov	r5, r0
   d4670:	4620      	mov	r0, r4
   d4672:	f003 f9b5 	bl	d79e0 <__aeabi_f2d>
   d4676:	ec41 0b10 	vmov	d0, r0, r1
   d467a:	2102      	movs	r1, #2
   d467c:	4628      	mov	r0, r5
   d467e:	f001 fceb 	bl	d6058 <_ZN5Print7printlnEdi>
  return (inchesavg);
}
   d4682:	ecbd 8b02 	vpop	{d8}
   d4686:	ee00 4a10 	vmov	s0, r4
   d468a:	bd70      	pop	{r4, r5, r6, pc}
   d468c:	f3af 8000 	nop.w
   d4690:	add9c27f 	.word	0xadd9c27f
   d4694:	3fd93265 	.word	0x3fd93265
   d4698:	000d90db 	.word	0x000d90db
   d469c:	00000000 	.word	0x00000000
   d46a0:	000d90e8 	.word	0x000d90e8
   d46a4:	00000000 	.word	0x00000000

000d46a8 <_Z13ProcessSerialv>:

float ProcessSerial() {
   d46a8:	b570      	push	{r4, r5, r6, lr}
   d46aa:	ed2d 8b02 	vpush	{d8}
  static uint32_t msTimeout = 0; // timestamp of recently found R
                                 // persists between calls of function
  float distanceToWaterMM = 0;
  while (Serial1.available()) {
    if ('R' == Serial1.peek()) {
      if (!msTimeout) {
   d46ae:	4c38      	ldr	r4, [pc, #224]	; (d4790 <_Z13ProcessSerialv+0xe8>)

float ProcessSerial() {
  char buf[7];
  static uint32_t msTimeout = 0; // timestamp of recently found R
                                 // persists between calls of function
  float distanceToWaterMM = 0;
   d46b0:	ed9f 8a38 	vldr	s16, [pc, #224]	; d4794 <_Z13ProcessSerialv+0xec>
  Serial.print("Analog In avgd: ");
  Serial.println(inchesavg);
  return (inchesavg);
}

float ProcessSerial() {
   d46b4:	b082      	sub	sp, #8
   d46b6:	4626      	mov	r6, r4
        Serial1.readBytes(buf, 6);            // read the packet
        distanceToWaterMM = atoi(&buf[1]);    // convert string following the R to integer
        msTimeout = 0;                        // prepare for next incoming R
      } else if (millis() - msTimeout > 50) { // current R is outdated
        Serial1.read();                       // flush R and move on
        msTimeout = 0;                        // prepare for next incoming R
   d46b8:	2500      	movs	r5, #0
float ProcessSerial() {
  char buf[7];
  static uint32_t msTimeout = 0; // timestamp of recently found R
                                 // persists between calls of function
  float distanceToWaterMM = 0;
  while (Serial1.available()) {
   d46ba:	f002 fb13 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d46be:	6803      	ldr	r3, [r0, #0]
   d46c0:	691b      	ldr	r3, [r3, #16]
   d46c2:	4798      	blx	r3
   d46c4:	2800      	cmp	r0, #0
   d46c6:	d038      	beq.n	d473a <_Z13ProcessSerialv+0x92>
    if ('R' == Serial1.peek()) {
   d46c8:	f002 fb0c 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d46cc:	6803      	ldr	r3, [r0, #0]
   d46ce:	699b      	ldr	r3, [r3, #24]
   d46d0:	4798      	blx	r3
   d46d2:	2852      	cmp	r0, #82	; 0x52
   d46d4:	d12b      	bne.n	d472e <_Z13ProcessSerialv+0x86>
      if (!msTimeout) {
   d46d6:	6823      	ldr	r3, [r4, #0]
   d46d8:	b913      	cbnz	r3, d46e0 <_Z13ProcessSerialv+0x38>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46da:	f000 fe41 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
        msTimeout = millis(); // when new R found - store timestamp
   d46de:	6020      	str	r0, [r4, #0]
      }
      if (Serial1.available() >= 5) { // already received a complete packet?
   d46e0:	f002 fb00 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d46e4:	6803      	ldr	r3, [r0, #0]
   d46e6:	691b      	ldr	r3, [r3, #16]
   d46e8:	4798      	blx	r3
   d46ea:	2804      	cmp	r0, #4
   d46ec:	dd12      	ble.n	d4714 <_Z13ProcessSerialv+0x6c>
        memset(buf, 0x00,
               sizeof(buf));                  // ensure properly terminated string
   d46ee:	9500      	str	r5, [sp, #0]
   d46f0:	f8cd 5003 	str.w	r5, [sp, #3]
        Serial1.readBytes(buf, 6);            // read the packet
   d46f4:	f002 faf6 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d46f8:	2206      	movs	r2, #6
   d46fa:	4669      	mov	r1, sp
   d46fc:	f001 fccc 	bl	d6098 <_ZN6Stream9readBytesEPcj>
        distanceToWaterMM = atoi(&buf[1]);    // convert string following the R to integer
   d4700:	f10d 0001 	add.w	r0, sp, #1
   d4704:	f003 fe94 	bl	d8430 <atoi>
   d4708:	ee07 0a90 	vmov	s15, r0
        msTimeout = 0;                        // prepare for next incoming R
   d470c:	6035      	str	r5, [r6, #0]
      }
      if (Serial1.available() >= 5) { // already received a complete packet?
        memset(buf, 0x00,
               sizeof(buf));                  // ensure properly terminated string
        Serial1.readBytes(buf, 6);            // read the packet
        distanceToWaterMM = atoi(&buf[1]);    // convert string following the R to integer
   d470e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4712:	e7d2      	b.n	d46ba <_Z13ProcessSerialv+0x12>
   d4714:	f000 fe24 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
        msTimeout = 0;                        // prepare for next incoming R
      } else if (millis() - msTimeout > 50) { // current R is outdated
   d4718:	6833      	ldr	r3, [r6, #0]
   d471a:	1ac0      	subs	r0, r0, r3
   d471c:	2832      	cmp	r0, #50	; 0x32
   d471e:	d9cc      	bls.n	d46ba <_Z13ProcessSerialv+0x12>
        Serial1.read();                       // flush R and move on
   d4720:	f002 fae0 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d4724:	6803      	ldr	r3, [r0, #0]
   d4726:	695b      	ldr	r3, [r3, #20]
   d4728:	4798      	blx	r3
        msTimeout = 0;                        // prepare for next incoming R
   d472a:	6025      	str	r5, [r4, #0]
   d472c:	e7c5      	b.n	d46ba <_Z13ProcessSerialv+0x12>
      }
    } else {
      Serial1.read();
   d472e:	f002 fad9 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d4732:	6803      	ldr	r3, [r0, #0]
   d4734:	695b      	ldr	r3, [r3, #20]
   d4736:	4798      	blx	r3
   d4738:	e7bf      	b.n	d46ba <_Z13ProcessSerialv+0x12>
      // Serial1.read(); // flush "orphaned" bytes
    }
  }
  Serial.print("Serial Output : ");
   d473a:	f002 f9ff 	bl	d6b3c <_Z16_fetch_usbserialv>
   d473e:	4916      	ldr	r1, [pc, #88]	; (d4798 <_Z13ProcessSerialv+0xf0>)
   d4740:	f001 fb56 	bl	d5df0 <_ZN5Print5printEPKc>
  Serial.println((distanceToWaterMM * 0.393701) / 10);
   d4744:	f002 f9fa 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4748:	4606      	mov	r6, r0
   d474a:	ee18 0a10 	vmov	r0, s16
   d474e:	f003 f947 	bl	d79e0 <__aeabi_f2d>
   d4752:	a30d      	add	r3, pc, #52	; (adr r3, d4788 <_Z13ProcessSerialv+0xe0>)
   d4754:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4758:	f003 f996 	bl	d7a88 <__aeabi_dmul>
   d475c:	2200      	movs	r2, #0
   d475e:	4b0f      	ldr	r3, [pc, #60]	; (d479c <_Z13ProcessSerialv+0xf4>)
   d4760:	f003 fabc 	bl	d7cdc <__aeabi_ddiv>
   d4764:	4604      	mov	r4, r0
   d4766:	460d      	mov	r5, r1
   d4768:	ec45 4b10 	vmov	d0, r4, r5
   d476c:	2102      	movs	r1, #2
   d476e:	4630      	mov	r0, r6
   d4770:	f001 fc72 	bl	d6058 <_ZN5Print7printlnEdi>
  return ((distanceToWaterMM * 0.393701) / 10);
   d4774:	4620      	mov	r0, r4
   d4776:	4629      	mov	r1, r5
   d4778:	f003 fc7e 	bl	d8078 <__aeabi_d2f>
}
   d477c:	ee00 0a10 	vmov	s0, r0
   d4780:	b002      	add	sp, #8
   d4782:	ecbd 8b02 	vpop	{d8}
   d4786:	bd70      	pop	{r4, r5, r6, pc}
   d4788:	add9c27f 	.word	0xadd9c27f
   d478c:	3fd93265 	.word	0x3fd93265
   d4790:	2003e218 	.word	0x2003e218
   d4794:	00000000 	.word	0x00000000
   d4798:	000d90f9 	.word	0x000d90f9
   d479c:	40240000 	.word	0x40240000

000d47a0 <_Z26calculateSleepCycleSecondsv>:
  return Particle.publish(unitName, msg, PRIVATE);
}

// retuns the number of seconds to sleep on the 15th minute schedual
// this is only going to trigger on successfully communicated network
long calculateSleepCycleSeconds() {
   d47a0:	b510      	push	{r4, lr}
  long mins = 0;
  // this will be constant
  long secs = 60 - Time.second();
   d47a2:	f001 fd13 	bl	d61cc <_ZN9TimeClass6secondEv>
   d47a6:	f1c0 043c 	rsb	r4, r0, #60	; 0x3c
  // so we need to calculate if we are between the interval we want
  if (Time.minute() >= 0 && Time.minute() <= 15) {
   d47aa:	f001 fd05 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47ae:	2800      	cmp	r0, #0
   d47b0:	db03      	blt.n	d47ba <_Z26calculateSleepCycleSecondsv+0x1a>
   d47b2:	f001 fd01 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47b6:	280f      	cmp	r0, #15
   d47b8:	dd0c      	ble.n	d47d4 <_Z26calculateSleepCycleSecondsv+0x34>
    mins = 15 - Time.minute();
  } else if (Time.minute() >= 16 && Time.minute() <= 30) {
   d47ba:	f001 fcfd 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47be:	280f      	cmp	r0, #15
   d47c0:	dd0d      	ble.n	d47de <_Z26calculateSleepCycleSecondsv+0x3e>
   d47c2:	f001 fcf9 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47c6:	281e      	cmp	r0, #30
   d47c8:	dc09      	bgt.n	d47de <_Z26calculateSleepCycleSecondsv+0x3e>
    mins = 30 - Time.minute();
   d47ca:	f001 fcf5 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47ce:	f1c0 001e 	rsb	r0, r0, #30
   d47d2:	e01f      	b.n	d4814 <_Z26calculateSleepCycleSecondsv+0x74>
  long mins = 0;
  // this will be constant
  long secs = 60 - Time.second();
  // so we need to calculate if we are between the interval we want
  if (Time.minute() >= 0 && Time.minute() <= 15) {
    mins = 15 - Time.minute();
   d47d4:	f001 fcf0 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47d8:	f1c0 000f 	rsb	r0, r0, #15
   d47dc:	e01a      	b.n	d4814 <_Z26calculateSleepCycleSecondsv+0x74>
  } else if (Time.minute() >= 16 && Time.minute() <= 30) {
    mins = 30 - Time.minute();
  } else if (Time.minute() >= 31 && Time.minute() <= 45) {
   d47de:	f001 fceb 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47e2:	281e      	cmp	r0, #30
   d47e4:	dd08      	ble.n	d47f8 <_Z26calculateSleepCycleSecondsv+0x58>
   d47e6:	f001 fce7 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47ea:	282d      	cmp	r0, #45	; 0x2d
   d47ec:	dc04      	bgt.n	d47f8 <_Z26calculateSleepCycleSecondsv+0x58>
    mins = 45 - Time.minute();
   d47ee:	f001 fce3 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47f2:	f1c0 002d 	rsb	r0, r0, #45	; 0x2d
   d47f6:	e00d      	b.n	d4814 <_Z26calculateSleepCycleSecondsv+0x74>
  } else if (Time.minute() >= 46 && Time.minute() <= 60) {
   d47f8:	f001 fcde 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d47fc:	282d      	cmp	r0, #45	; 0x2d
   d47fe:	dd08      	ble.n	d4812 <_Z26calculateSleepCycleSecondsv+0x72>
   d4800:	f001 fcda 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d4804:	283c      	cmp	r0, #60	; 0x3c
   d4806:	dc04      	bgt.n	d4812 <_Z26calculateSleepCycleSecondsv+0x72>
    mins = 60 - Time.minute();
   d4808:	f001 fcd6 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d480c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   d4810:	e000      	b.n	d4814 <_Z26calculateSleepCycleSecondsv+0x74>
}

// retuns the number of seconds to sleep on the 15th minute schedual
// this is only going to trigger on successfully communicated network
long calculateSleepCycleSeconds() {
  long mins = 0;
   d4812:	2000      	movs	r0, #0
  } else {
    // figure out somthing to do if this gets wonky
  }

  // on return convert it to seconds
  return (mins * 60) + secs;
   d4814:	233c      	movs	r3, #60	; 0x3c
   d4816:	fb03 4000 	mla	r0, r3, r0, r4
} // end function
   d481a:	bd10      	pop	{r4, pc}

000d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d481c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d481e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4820:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4822:	b17c      	cbz	r4, d4844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4824:	6863      	ldr	r3, [r4, #4]
   d4826:	3b01      	subs	r3, #1
   d4828:	6063      	str	r3, [r4, #4]
   d482a:	b95b      	cbnz	r3, d4844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d482c:	6823      	ldr	r3, [r4, #0]
   d482e:	4620      	mov	r0, r4
   d4830:	689b      	ldr	r3, [r3, #8]
   d4832:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4834:	68a3      	ldr	r3, [r4, #8]
   d4836:	3b01      	subs	r3, #1
   d4838:	60a3      	str	r3, [r4, #8]
   d483a:	b91b      	cbnz	r3, d4844 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d483c:	6823      	ldr	r3, [r4, #0]
   d483e:	4620      	mov	r0, r4
   d4840:	68db      	ldr	r3, [r3, #12]
   d4842:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4844:	4628      	mov	r0, r5
   d4846:	bd38      	pop	{r3, r4, r5, pc}

000d4848 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d484c:	6843      	ldr	r3, [r0, #4]
   d484e:	6804      	ldr	r4, [r0, #0]
   d4850:	1b1c      	subs	r4, r3, r4
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d4852:	1124      	asrs	r4, r4, #4
   d4854:	bf14      	ite	ne
   d4856:	4623      	movne	r3, r4
   d4858:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d485a:	18e4      	adds	r4, r4, r3
   d485c:	4605      	mov	r5, r0
   d485e:	460f      	mov	r7, r1
   d4860:	d202      	bcs.n	d4868 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x20>
   d4862:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   d4866:	d32e      	bcc.n	d48c6 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x7e>
   d4868:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d486c:	0120      	lsls	r0, r4, #4
   d486e:	f7ff fc14 	bl	d409a <_Znwj>
   d4872:	4606      	mov	r6, r0
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
   d4874:	e895 0009 	ldmia.w	r5, {r0, r3}
   d4878:	1a18      	subs	r0, r3, r0

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d487a:	1830      	adds	r0, r6, r0
   d487c:	d002      	beq.n	d4884 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x3c>
   d487e:	4639      	mov	r1, r7
   d4880:	f001 fa35 	bl	d5cee <_ZN6StringC1ERKS_>
				     std::forward<_Args>(__args)...);
	    __new_finish = pointer();

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
   d4884:	e895 0280 	ldmia.w	r5, {r7, r9}
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d4888:	4630      	mov	r0, r6
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
   d488a:	45b9      	cmp	r9, r7
   d488c:	f100 0810 	add.w	r8, r0, #16
   d4890:	d006      	beq.n	d48a0 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x58>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d4892:	b110      	cbz	r0, d489a <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x52>
   d4894:	4639      	mov	r1, r7
   d4896:	f001 fa2a 	bl	d5cee <_ZN6StringC1ERKS_>
   d489a:	3710      	adds	r7, #16
   d489c:	4640      	mov	r0, r8
   d489e:	e7f4      	b.n	d488a <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x42>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   d48a0:	e895 0280 	ldmia.w	r5, {r7, r9}
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d48a4:	45b9      	cmp	r9, r7
   d48a6:	d004      	beq.n	d48b2 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x6a>
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }
   d48a8:	4638      	mov	r0, r7
   d48aa:	f001 f9b7 	bl	d5c1c <_ZN6StringD1Ev>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d48ae:	3710      	adds	r7, #16
   d48b0:	e7f8      	b.n	d48a4 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x5c>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
   d48b2:	6828      	ldr	r0, [r5, #0]
   d48b4:	f7ff fcfb 	bl	d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
   d48b8:	e885 0140 	stmia.w	r5, {r6, r8}
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d48bc:	eb06 1404 	add.w	r4, r6, r4, lsl #4
   d48c0:	60ac      	str	r4, [r5, #8]
      }
   d48c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d48c6:	2c00      	cmp	r4, #0
   d48c8:	d1d0      	bne.n	d486c <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d48ca:	4626      	mov	r6, r4
   d48cc:	e7d2      	b.n	d4874 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2c>
	...

000d48d0 <_ZN9Buffering18RegisterSensorNameE6String>:
// so it can have an Id assigned to it. Do not register the same name twice.
// This could be called automatically if a name is unregistered in NameToId, but
// calling
// it separately enforces more effectively that the ordering must be the same
// after a reset.
void RegisterSensorName(String name) { SensorNames.push_back(name); }
   d48d0:	b510      	push	{r4, lr}
   d48d2:	4601      	mov	r1, r0
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d48d4:	4808      	ldr	r0, [pc, #32]	; (d48f8 <_ZN9Buffering18RegisterSensorNameE6String+0x28>)
   d48d6:	6842      	ldr	r2, [r0, #4]
   d48d8:	6883      	ldr	r3, [r0, #8]
   d48da:	429a      	cmp	r2, r3
   d48dc:	4604      	mov	r4, r0
   d48de:	d007      	beq.n	d48f0 <_ZN9Buffering18RegisterSensorNameE6String+0x20>
   d48e0:	b112      	cbz	r2, d48e8 <_ZN9Buffering18RegisterSensorNameE6String+0x18>
   d48e2:	4610      	mov	r0, r2
   d48e4:	f001 fa03 	bl	d5cee <_ZN6StringC1ERKS_>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d48e8:	6863      	ldr	r3, [r4, #4]
   d48ea:	3310      	adds	r3, #16
   d48ec:	6063      	str	r3, [r4, #4]
   d48ee:	bd10      	pop	{r4, pc}
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d48f0:	f7ff ffaa 	bl	d4848 <_ZNSt6vectorI6StringSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
   d48f4:	bd10      	pop	{r4, pc}
   d48f6:	bf00      	nop
   d48f8:	2003e2ec 	.word	0x2003e2ec

000d48fc <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d48fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4900:	6804      	ldr	r4, [r0, #0]
   d4902:	6843      	ldr	r3, [r0, #4]
   d4904:	1b1b      	subs	r3, r3, r4
   d4906:	4c1c      	ldr	r4, [pc, #112]	; (d4978 <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x7c>)
   d4908:	109b      	asrs	r3, r3, #2
   d490a:	435c      	muls	r4, r3
   d490c:	bf14      	ite	ne
   d490e:	4623      	movne	r3, r4
   d4910:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4912:	18e3      	adds	r3, r4, r3
   d4914:	4606      	mov	r6, r0
   d4916:	4688      	mov	r8, r1
   d4918:	4c18      	ldr	r4, [pc, #96]	; (d497c <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x80>)
   d491a:	d201      	bcs.n	d4920 <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d491c:	42a3      	cmp	r3, r4
   d491e:	d925      	bls.n	d496c <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x70>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4920:	200c      	movs	r0, #12
   d4922:	4360      	muls	r0, r4
   d4924:	f7ff fbb9 	bl	d409a <_Znwj>
   d4928:	4607      	mov	r7, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d492a:	f8d6 9000 	ldr.w	r9, [r6]
   d492e:	6875      	ldr	r5, [r6, #4]
   d4930:	ebc9 0505 	rsb	r5, r9, r5

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4934:	197b      	adds	r3, r7, r5
   d4936:	bf1c      	itt	ne
   d4938:	e898 0007 	ldmiane.w	r8, {r0, r1, r2}
   d493c:	e883 0007 	stmiane.w	r3, {r0, r1, r2}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4940:	4a0d      	ldr	r2, [pc, #52]	; (d4978 <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x7c>)
   d4942:	10ab      	asrs	r3, r5, #2
   d4944:	435a      	muls	r2, r3
   d4946:	d004      	beq.n	d4952 <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4948:	462a      	mov	r2, r5
   d494a:	4649      	mov	r1, r9
   d494c:	4638      	mov	r0, r7
   d494e:	f003 fe84 	bl	d865a <memmove>
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
   d4952:	4648      	mov	r0, r9
   d4954:	f7ff fcab 	bl	d42ae <_ZNSt12_Vector_baseI10SensorDataSaIS0_EE13_M_deallocateEPS0_j.isra.32>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4958:	350c      	adds	r5, #12
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d495a:	230c      	movs	r3, #12
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d495c:	443d      	add	r5, r7
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d495e:	fb03 7404 	mla	r4, r3, r4, r7
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4962:	6037      	str	r7, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
   d4964:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4966:	60b4      	str	r4, [r6, #8]
      }
   d4968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d496c:	461c      	mov	r4, r3
   d496e:	2b00      	cmp	r3, #0
   d4970:	d1d6      	bne.n	d4920 <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x24>
   d4972:	461f      	mov	r7, r3
   d4974:	e7d9      	b.n	d492a <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2e>
   d4976:	bf00      	nop
   d4978:	aaaaaaab 	.word	0xaaaaaaab
   d497c:	15555555 	.word	0x15555555

000d4980 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>:
      { return *(this->_M_impl._M_start + __n); }

    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
   d4980:	b508      	push	{r3, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4982:	e890 000c 	ldmia.w	r0, {r2, r3}
   d4986:	1a9b      	subs	r3, r3, r2
   d4988:	4a04      	ldr	r2, [pc, #16]	; (d499c <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x1c>)
   d498a:	109b      	asrs	r3, r3, #2
   d498c:	435a      	muls	r2, r3
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
   d498e:	4291      	cmp	r1, r2
   d4990:	d302      	bcc.n	d4998 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   d4992:	4803      	ldr	r0, [pc, #12]	; (d49a0 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj+0x20>)
   d4994:	f002 fc7c 	bl	d7290 <_ZSt24__throw_out_of_range_fmtPKcz>
   d4998:	bd08      	pop	{r3, pc}
   d499a:	bf00      	nop
   d499c:	aaaaaaab 	.word	0xaaaaaaab
   d49a0:	000d910a 	.word	0x000d910a
   d49a4:	00000000 	.word	0x00000000

000d49a8 <_Z19ProcessOldAnalogAvgv>:
    return (s->GetSample() * 0.393701);
  }
  return 0;
}

float ProcessOldAnalogAvg() {
   d49a8:	b530      	push	{r4, r5, lr}
   d49aa:	ed2d 8b02 	vpush	{d8}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d49ae:	4838      	ldr	r0, [pc, #224]	; (d4a90 <_Z19ProcessOldAnalogAvgv+0xe8>)
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d49b0:	4a38      	ldr	r2, [pc, #224]	; (d4a94 <_Z19ProcessOldAnalogAvgv+0xec>)
   d49b2:	6804      	ldr	r4, [r0, #0]
   d49b4:	6843      	ldr	r3, [r0, #4]
   d49b6:	1b1b      	subs	r3, r3, r4
   d49b8:	109b      	asrs	r3, r3, #2
   d49ba:	435a      	muls	r2, r3
    return (s->GetSample() * 0.393701);
  }
  return 0;
}

float ProcessOldAnalogAvg() {
   d49bc:	b083      	sub	sp, #12
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d49be:	d05a      	beq.n	d4a76 <_Z19ProcessOldAnalogAvgv+0xce>
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
      {
	_M_range_check(__n);
   d49c0:	2100      	movs	r1, #0
   d49c2:	f7ff ffdd 	bl	d4980 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    SensorConfig sc = sensors.at(i);
   d49c6:	6824      	ldr	r4, [r4, #0]
    Sensor *s = sc.SensorPtr;
    time_t startTime = Time.now();
    // 0.393701 * cm = reading in inches
    float sensorOutput = s->GetSample() * 0.393701;
    float data2 = 0;
   d49c8:	ed9f 8a33 	vldr	s16, [pc, #204]	; d4a98 <_Z19ProcessOldAnalogAvgv+0xf0>

float ProcessOldAnalogAvg() {
  for (unsigned int i = 0; i < sensors.size(); ++i) {
    SensorConfig sc = sensors.at(i);
    Sensor *s = sc.SensorPtr;
    time_t startTime = Time.now();
   d49cc:	f001 fbe2 	bl	d6194 <_ZN9TimeClass3nowEv>
    // 0.393701 * cm = reading in inches
    float sensorOutput = s->GetSample() * 0.393701;
   d49d0:	6823      	ldr	r3, [r4, #0]
   d49d2:	4620      	mov	r0, r4
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	4798      	blx	r3
   d49d8:	ed8d 0a01 	vstr	s0, [sp, #4]
    float data2 = 0;
    Serial.print("data = ");
   d49dc:	f002 f8ae 	bl	d6b3c <_Z16_fetch_usbserialv>
   d49e0:	492e      	ldr	r1, [pc, #184]	; (d4a9c <_Z19ProcessOldAnalogAvgv+0xf4>)
   d49e2:	f001 fa05 	bl	d5df0 <_ZN5Print5printEPKc>
    Serial.println(sensorOutput);
   d49e6:	f002 f8a9 	bl	d6b3c <_Z16_fetch_usbserialv>
   d49ea:	ed9d 0a01 	vldr	s0, [sp, #4]
   d49ee:	4605      	mov	r5, r0
   d49f0:	ee10 0a10 	vmov	r0, s0
   d49f4:	f002 fff4 	bl	d79e0 <__aeabi_f2d>
   d49f8:	a323      	add	r3, pc, #140	; (adr r3, d4a88 <_Z19ProcessOldAnalogAvgv+0xe0>)
   d49fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49fe:	f003 f843 	bl	d7a88 <__aeabi_dmul>
   d4a02:	f003 fb39 	bl	d8078 <__aeabi_d2f>
   d4a06:	f002 ffeb 	bl	d79e0 <__aeabi_f2d>
   d4a0a:	ec41 0b10 	vmov	d0, r0, r1
   d4a0e:	4628      	mov	r0, r5
   d4a10:	2102      	movs	r1, #2
   d4a12:	f001 fb21 	bl	d6058 <_ZN5Print7printlnEdi>
   d4a16:	2514      	movs	r5, #20
    for (int i = 0; i < samples; i++) {
      // get our reading
      data2 += s->GetSample();
   d4a18:	6823      	ldr	r3, [r4, #0]
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	4798      	blx	r3
      // wait one second and take another reading
      delay(100);
   d4a20:	2064      	movs	r0, #100	; 0x64
    float data2 = 0;
    Serial.print("data = ");
    Serial.println(sensorOutput);
    for (int i = 0; i < samples; i++) {
      // get our reading
      data2 += s->GetSample();
   d4a22:	ee38 8a00 	vadd.f32	s16, s16, s0
      // wait one second and take another reading
      delay(100);
   d4a26:	f001 fbe5 	bl	d61f4 <delay>
    // 0.393701 * cm = reading in inches
    float sensorOutput = s->GetSample() * 0.393701;
    float data2 = 0;
    Serial.print("data = ");
    Serial.println(sensorOutput);
    for (int i = 0; i < samples; i++) {
   d4a2a:	3d01      	subs	r5, #1
   d4a2c:	d1f4      	bne.n	d4a18 <_Z19ProcessOldAnalogAvgv+0x70>
      delay(100);
    }

    // average our reading
    float data2avg = data2 / samples;
    float inchesavg2 = data2avg * 0.393701;
   d4a2e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d4a32:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4a36:	ee17 0a10 	vmov	r0, s14
   d4a3a:	f002 ffd1 	bl	d79e0 <__aeabi_f2d>
   d4a3e:	a312      	add	r3, pc, #72	; (adr r3, d4a88 <_Z19ProcessOldAnalogAvgv+0xe0>)
   d4a40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4a44:	f003 f820 	bl	d7a88 <__aeabi_dmul>
   d4a48:	f003 fb16 	bl	d8078 <__aeabi_d2f>
   d4a4c:	4604      	mov	r4, r0
    Serial.print("Data Avg: ");
   d4a4e:	f002 f875 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4a52:	4913      	ldr	r1, [pc, #76]	; (d4aa0 <_Z19ProcessOldAnalogAvgv+0xf8>)
   d4a54:	f001 f9cc 	bl	d5df0 <_ZN5Print5printEPKc>
    Serial.println(inchesavg2);
   d4a58:	f002 f870 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4a5c:	4605      	mov	r5, r0
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f002 ffbe 	bl	d79e0 <__aeabi_f2d>
   d4a64:	ec41 0b10 	vmov	d0, r0, r1
   d4a68:	2102      	movs	r1, #2
   d4a6a:	4628      	mov	r0, r5
   d4a6c:	f001 faf4 	bl	d6058 <_ZN5Print7printlnEdi>
   d4a70:	ee00 4a10 	vmov	s0, r4
   d4a74:	e001      	b.n	d4a7a <_Z19ProcessOldAnalogAvgv+0xd2>
    return (inchesavg2);
  }
  return 0;
   d4a76:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4a98 <_Z19ProcessOldAnalogAvgv+0xf0>
}
   d4a7a:	b003      	add	sp, #12
   d4a7c:	ecbd 8b02 	vpop	{d8}
   d4a80:	bd30      	pop	{r4, r5, pc}
   d4a82:	bf00      	nop
   d4a84:	f3af 8000 	nop.w
   d4a88:	add9c27f 	.word	0xadd9c27f
   d4a8c:	3fd93265 	.word	0x3fd93265
   d4a90:	2003e31c 	.word	0x2003e31c
   d4a94:	aaaaaaab 	.word	0xaaaaaaab
   d4a98:	00000000 	.word	0x00000000
   d4a9c:	000d9154 	.word	0x000d9154
   d4aa0:	000d915c 	.word	0x000d915c

000d4aa4 <setup>:
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float Serial);
// Battery protection function
void checkBattery(bool debug);
PMIC pmic;
// setup() runs once, when the device is first turned on.
void setup() {
   d4aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4aa8:	b08c      	sub	sp, #48	; 0x30
  // Put initialization like pinMode and begin functions here.
   Serial.begin(9600);
   d4aaa:	f002 f847 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4aae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ab2:	f002 f837 	bl	d6b24 <_ZN9USBSerial5beginEl>
  // for the maxbotix
  Serial1.begin(9600);
   d4ab6:	f002 f915 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d4aba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4abe:	f002 f90b 	bl	d6cd8 <_ZN11USARTSerial5beginEm>
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4ac2:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4ac4:	2208      	movs	r2, #8
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
   d4ac6:	9308      	str	r3, [sp, #32]
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4ac8:	4618      	mov	r0, r3
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4aca:	2401      	movs	r4, #1

#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4acc:	f8ad 2020 	strh.w	r2, [sp, #32]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4ad0:	f247 5130 	movw	r1, #30000	; 0x7530
   d4ad4:	aa08      	add	r2, sp, #32
#if HAL_PLATFORM_CLOUD_UDP
    static void keepAlive(unsigned sec)
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4ad6:	9409      	str	r4, [sp, #36]	; 0x24
        CLOUD_FN(spark_set_connection_property(particle::protocol::Connection::PING,
                                               sec * 1000, &conn_prop, nullptr),
                 (void)0);
   d4ad8:	f000 fe58 	bl	d578c <spark_set_connection_property>
  Particle.keepAlive(30); // Needed for AT&T Network

  pinMode(PERIPHERAL_ENABLE_PIN, OUTPUT);
   d4adc:	4621      	mov	r1, r4
   d4ade:	2003      	movs	r0, #3
   d4ae0:	f002 fb26 	bl	d7130 <pinMode>
  // cannot call Configure() in the maxbotix sensor after storing it into a
  // SensorConfig.  If you can still access the underlying object, like with
  // the BMP280 sensors and FuelGauge, this does not matter so much.

  // Maxbotix Sensor
  AnalogUltrasonicSensor *maxbotixSensor = new AnalogUltrasonicSensor(String(unitName), MAXBOTIX_INPUT_PIN);
   d4ae4:	4934      	ldr	r1, [pc, #208]	; (d4bb8 <setup+0x114>)
   d4ae6:	a808      	add	r0, sp, #32
   d4ae8:	f001 f901 	bl	d5cee <_ZN6StringC1ERKS_>
   d4aec:	2014      	movs	r0, #20
   d4aee:	f7ff fad4 	bl	d409a <_Znwj>
   d4af2:	4604      	mov	r4, r0
   d4af4:	b128      	cbz	r0, d4b02 <setup+0x5e>
   d4af6:	f04f 33ff 	mov.w	r3, #4294967295
   d4afa:	2212      	movs	r2, #18
   d4afc:	a908      	add	r1, sp, #32
   d4afe:	f7ff fc05 	bl	d430c <_ZN22AnalogUltrasonicSensorC1E6Stringii>
   d4b02:	a808      	add	r0, sp, #32
   d4b04:	f001 f88a 	bl	d5c1c <_ZN6StringD1Ev>
		delete sensor_;
	}

	void Configure(const float vRef_V, const float scale_cm_p_V, const int divs)
	{
		sensor_->SetAnalogRef_V(vRef_V);
   d4b08:	6923      	ldr	r3, [r4, #16]
            analogDivs_ = divs;
        }

        void SetAnalogRef_V(const float voltage)
        {
            analogReference_V_ = voltage;
   d4b0a:	4a2c      	ldr	r2, [pc, #176]	; (d4bbc <setup+0x118>)
   d4b0c:	625a      	str	r2, [r3, #36]	; 0x24
		sensor_->SetAnalogScale_cmpV(scale_cm_p_V);
   d4b0e:	6923      	ldr	r3, [r4, #16]

        float GetDistance_cm();

        void SetAnalogScale_cmpV(const float scale)
        {
            analogScale_cmpV_ = scale;
   d4b10:	4a2b      	ldr	r2, [pc, #172]	; (d4bc0 <setup+0x11c>)
   d4b12:	621a      	str	r2, [r3, #32]
		sensor_->SetAnalogDivs(4095);
   d4b14:	6923      	ldr	r3, [r4, #16]
  maxbotixSensor->Configure(3.3, 120 * 2.54, 4096); // 12 bit, 3.3V ADC.  Sensor is ~0.1V per foot.
  workingConfig.SensorPtr = maxbotixSensor;
   d4b16:	9405      	str	r4, [sp, #20]
        }

        void SetAnalogDivs(const unsigned int divs)
        {
            analogDivs_ = divs;
   d4b18:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4b1c:	629a      	str	r2, [r3, #40]	; 0x28
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4b1e:	4c29      	ldr	r4, [pc, #164]	; (d4bc4 <setup+0x120>)
  workingConfig.NumSamples = 10;
   d4b20:	230a      	movs	r3, #10
   d4b22:	9306      	str	r3, [sp, #24]
  workingConfig.SamplePeriod_ms = 100;
   d4b24:	2364      	movs	r3, #100	; 0x64
   d4b26:	9307      	str	r3, [sp, #28]
   d4b28:	68a2      	ldr	r2, [r4, #8]
   d4b2a:	6863      	ldr	r3, [r4, #4]
   d4b2c:	4293      	cmp	r3, r2
   d4b2e:	d008      	beq.n	d4b42 <setup+0x9e>
   d4b30:	b11b      	cbz	r3, d4b3a <setup+0x96>
   d4b32:	aa05      	add	r2, sp, #20
   d4b34:	ca07      	ldmia	r2, {r0, r1, r2}
   d4b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
   d4b3a:	6863      	ldr	r3, [r4, #4]
   d4b3c:	330c      	adds	r3, #12
   d4b3e:	6063      	str	r3, [r4, #4]
   d4b40:	e003      	b.n	d4b4a <setup+0xa6>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
   d4b42:	a905      	add	r1, sp, #20
   d4b44:	4620      	mov	r0, r4
   d4b46:	f7ff fed9 	bl	d48fc <_ZNSt6vectorI12SensorConfigSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>
  sensors.push_back(workingConfig);

  // Register sensors names with the buffer
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4b4a:	f8df 8080 	ldr.w	r8, [pc, #128]	; d4bcc <setup+0x128>
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float Serial);
// Battery protection function
void checkBattery(bool debug);
PMIC pmic;
// setup() runs once, when the device is first turned on.
void setup() {
   d4b4e:	2500      	movs	r5, #0
  workingConfig.SamplePeriod_ms = 100;
  sensors.push_back(workingConfig);

  // Register sensors names with the buffer
  for (unsigned int i = 0; i < sensors.size(); ++i) {
    Buffering::RegisterSensorName(sensors.at(i).SensorPtr->GetName());
   d4b50:	270c      	movs	r7, #12

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4b52:	6826      	ldr	r6, [r4, #0]
  workingConfig.NumSamples = 10;
  workingConfig.SamplePeriod_ms = 100;
  sensors.push_back(workingConfig);

  // Register sensors names with the buffer
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4b54:	6863      	ldr	r3, [r4, #4]
   d4b56:	1b9b      	subs	r3, r3, r6
   d4b58:	109b      	asrs	r3, r3, #2
   d4b5a:	fb08 f303 	mul.w	r3, r8, r3
   d4b5e:	429d      	cmp	r5, r3
   d4b60:	d212      	bcs.n	d4b88 <setup+0xe4>
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
      {
	_M_range_check(__n);
   d4b62:	4629      	mov	r1, r5
   d4b64:	4817      	ldr	r0, [pc, #92]	; (d4bc4 <setup+0x120>)
   d4b66:	f7ff ff0b 	bl	d4980 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    Buffering::RegisterSensorName(sensors.at(i).SensorPtr->GetName());
   d4b6a:	fb07 f305 	mul.w	r3, r7, r5

  virtual void Enable() { enabled_ = true; }

  virtual void Disable() { enabled_ = false; }

  String GetName() { return String(name_); }
   d4b6e:	a808      	add	r0, sp, #32
   d4b70:	58f3      	ldr	r3, [r6, r3]
   d4b72:	6899      	ldr	r1, [r3, #8]
   d4b74:	f001 f899 	bl	d5caa <_ZN6StringC1EPK19__FlashStringHelper>
   d4b78:	a808      	add	r0, sp, #32
   d4b7a:	f7ff fea9 	bl	d48d0 <_ZN9Buffering18RegisterSensorNameE6String>
   d4b7e:	a808      	add	r0, sp, #32
   d4b80:	f001 f84c 	bl	d5c1c <_ZN6StringD1Ev>
  workingConfig.NumSamples = 10;
  workingConfig.SamplePeriod_ms = 100;
  sensors.push_back(workingConfig);

  // Register sensors names with the buffer
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4b84:	3501      	adds	r5, #1
   d4b86:	e7e4      	b.n	d4b52 <setup+0xae>
    Buffering::RegisterSensorName(sensors.at(i).SensorPtr->GetName());
  }

  // PMIC settings for charging
  // setting up PMIC for optimum charging
  pmic.begin();
   d4b88:	480f      	ldr	r0, [pc, #60]	; (d4bc8 <setup+0x124>)
   d4b8a:	f000 fe47 	bl	d581c <_ZN4PMIC5beginEv>
  pmic.setChargeCurrent(0, 0, 1, 0, 0, 0); // Set charging current to 1024mA (512 + 512 offset)
   d4b8e:	2200      	movs	r2, #0
   d4b90:	4611      	mov	r1, r2
   d4b92:	9202      	str	r2, [sp, #8]
   d4b94:	9201      	str	r2, [sp, #4]
   d4b96:	9200      	str	r2, [sp, #0]
   d4b98:	2301      	movs	r3, #1
   d4b9a:	480b      	ldr	r0, [pc, #44]	; (d4bc8 <setup+0x124>)
   d4b9c:	f000 ff64 	bl	d5a68 <_ZN4PMIC16setChargeCurrentEbbbbbb>
  pmic.setInputVoltageLimit(4840);         // Set the lowest input voltage to 4.84 volts. This keeps my 5v
   d4ba0:	f241 21e8 	movw	r1, #4840	; 0x12e8
   d4ba4:	4808      	ldr	r0, [pc, #32]	; (d4bc8 <setup+0x124>)
   d4ba6:	f000 febe 	bl	d5926 <_ZN4PMIC20setInputVoltageLimitEt>
                                           // solar panel from operating below 4.84 volts.
  pmic.enableBuck();
   d4baa:	4807      	ldr	r0, [pc, #28]	; (d4bc8 <setup+0x124>)
   d4bac:	f000 ff45 	bl	d5a3a <_ZN4PMIC10enableBuckEv>

}
   d4bb0:	b00c      	add	sp, #48	; 0x30
   d4bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4bb6:	bf00      	nop
   d4bb8:	2003e2f8 	.word	0x2003e2f8
   d4bbc:	40533333 	.word	0x40533333
   d4bc0:	43986666 	.word	0x43986666
   d4bc4:	2003e31c 	.word	0x2003e31c
   d4bc8:	2003e214 	.word	0x2003e214
   d4bcc:	aaaaaaab 	.word	0xaaaaaaab

000d4bd0 <_Z16ProcessOldAnalogv>:
  Serial.print("temp f = ");
  Serial.println(tf);
  return tf;
}

float ProcessOldAnalog() {
   d4bd0:	b510      	push	{r4, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4bd2:	4813      	ldr	r0, [pc, #76]	; (d4c20 <_Z16ProcessOldAnalogv+0x50>)
  for (unsigned int i = 0; i < sensors.size(); ++i) {
   d4bd4:	4a13      	ldr	r2, [pc, #76]	; (d4c24 <_Z16ProcessOldAnalogv+0x54>)
   d4bd6:	6804      	ldr	r4, [r0, #0]
   d4bd8:	6843      	ldr	r3, [r0, #4]
   d4bda:	1b1b      	subs	r3, r3, r4
   d4bdc:	109b      	asrs	r3, r3, #2
   d4bde:	435a      	muls	r2, r3
   d4be0:	d015      	beq.n	d4c0e <_Z16ProcessOldAnalogv+0x3e>
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
      {
	_M_range_check(__n);
   d4be2:	2100      	movs	r1, #0
   d4be4:	f7ff fecc 	bl	d4980 <_ZNKSt6vectorI12SensorConfigSaIS0_EE14_M_range_checkEj>
    SensorConfig sc = sensors.at(i);
   d4be8:	6824      	ldr	r4, [r4, #0]
    Sensor *s = sc.SensorPtr;
    time_t startTime = Time.now();
   d4bea:	f001 fad3 	bl	d6194 <_ZN9TimeClass3nowEv>
    // sensor returns cm , multiplu by 0.393701 for inches
    return (s->GetSample() * 0.393701);
   d4bee:	6823      	ldr	r3, [r4, #0]
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	681b      	ldr	r3, [r3, #0]
   d4bf4:	4798      	blx	r3
   d4bf6:	ee10 0a10 	vmov	r0, s0
   d4bfa:	f002 fef1 	bl	d79e0 <__aeabi_f2d>
   d4bfe:	a306      	add	r3, pc, #24	; (adr r3, d4c18 <_Z16ProcessOldAnalogv+0x48>)
   d4c00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c04:	f002 ff40 	bl	d7a88 <__aeabi_dmul>
   d4c08:	f003 fa36 	bl	d8078 <__aeabi_d2f>
   d4c0c:	e000      	b.n	d4c10 <_Z16ProcessOldAnalogv+0x40>
  }
  return 0;
   d4c0e:	2000      	movs	r0, #0
}
   d4c10:	ee00 0a10 	vmov	s0, r0
   d4c14:	bd10      	pop	{r4, pc}
   d4c16:	bf00      	nop
   d4c18:	add9c27f 	.word	0xadd9c27f
   d4c1c:	3fd93265 	.word	0x3fd93265
   d4c20:	2003e31c 	.word	0x2003e31c
   d4c24:	aaaaaaab 	.word	0xaaaaaaab

000d4c28 <_ZN10StatsTools13InsertionSortIfEEvPT_i>:
    {
        return (val < 0) ? -val : val;
    }

    template <typename T>
    void InsertionSort(T arr[], int count)
   d4c28:	b510      	push	{r4, lr}
    {
        for (int i = 1; i < count; ++i)
   d4c2a:	2301      	movs	r3, #1
   d4c2c:	428b      	cmp	r3, r1
   d4c2e:	da15      	bge.n	d4c5c <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x34>
   d4c30:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   d4c34:	461c      	mov	r4, r3
        {
            for (int j = i; j > 0; --j)
   d4c36:	2c00      	cmp	r4, #0
   d4c38:	dd0e      	ble.n	d4c58 <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x30>
            {
                if (arr[j] < arr[j-1])
   d4c3a:	edd2 7a00 	vldr	s15, [r2]
   d4c3e:	ed32 7a01 	vldmdb	r2!, {s14}
   d4c42:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4c4a:	d505      	bpl.n	d4c58 <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x30>
                {
                    T temp = arr[j];
                    arr[j] = arr[j-1];
   d4c4c:	ed82 7a01 	vstr	s14, [r2, #4]
                    arr[j-1] = temp;
   d4c50:	edc2 7a00 	vstr	s15, [r2]
    template <typename T>
    void InsertionSort(T arr[], int count)
    {
        for (int i = 1; i < count; ++i)
        {
            for (int j = i; j > 0; --j)
   d4c54:	3c01      	subs	r4, #1
   d4c56:	e7ee      	b.n	d4c36 <_ZN10StatsTools13InsertionSortIfEEvPT_i+0xe>
    }

    template <typename T>
    void InsertionSort(T arr[], int count)
    {
        for (int i = 1; i < count; ++i)
   d4c58:	3301      	adds	r3, #1
   d4c5a:	e7e7      	b.n	d4c2c <_ZN10StatsTools13InsertionSortIfEEvPT_i+0x4>
   d4c5c:	bd10      	pop	{r4, pc}
	...

000d4c60 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>:
            }
        }
    }

    template <typename T>
    T* SortedCopy(T arr[10], int count)
   d4c60:	b510      	push	{r4, lr}
   d4c62:	4a08      	ldr	r2, [pc, #32]	; (d4c84 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x24>)
   d4c64:	3004      	adds	r0, #4
    {
        T *sortedArr = reinterpret_cast<T*>(statsToolsAlloc);
        for (int j = 1; j < count; j++)
   d4c66:	2301      	movs	r3, #1
   d4c68:	428b      	cmp	r3, r1
   d4c6a:	da05      	bge.n	d4c78 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x18>
        {
            sortedArr[j] = arr[j];
   d4c6c:	f850 4b04 	ldr.w	r4, [r0], #4
   d4c70:	f842 4b04 	str.w	r4, [r2], #4

    template <typename T>
    T* SortedCopy(T arr[10], int count)
    {
        T *sortedArr = reinterpret_cast<T*>(statsToolsAlloc);
        for (int j = 1; j < count; j++)
   d4c74:	3301      	adds	r3, #1
   d4c76:	e7f7      	b.n	d4c68 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x8>
        {
            sortedArr[j] = arr[j];
        }
        InsertionSort(sortedArr, count);
   d4c78:	4803      	ldr	r0, [pc, #12]	; (d4c88 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x28>)
   d4c7a:	f7ff ffd5 	bl	d4c28 <_ZN10StatsTools13InsertionSortIfEEvPT_i>
        return sortedArr;
    }
   d4c7e:	4802      	ldr	r0, [pc, #8]	; (d4c88 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i+0x28>)
   d4c80:	bd10      	pop	{r4, pc}
   d4c82:	bf00      	nop
   d4c84:	2003e220 	.word	0x2003e220
   d4c88:	2003e21c 	.word	0x2003e21c
   d4c8c:	00000000 	.word	0x00000000

000d4c90 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj>:

        return MAD;
    }

    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
   d4c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c92:	ed2d 8b02 	vpush	{d8}
    {
        T mad = MAD(arr, count);
   d4c96:	680f      	ldr	r7, [r1, #0]

        return MAD;
    }

    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
   d4c98:	460d      	mov	r5, r1

    template <typename T>
    T MAD(T arr[], int count)
    {
        // Go ahead and get a copy of the array so it can be modified
        T *sortedArr = SortedCopy(arr, count);
   d4c9a:	4639      	mov	r1, r7

        return MAD;
    }

    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
   d4c9c:	4606      	mov	r6, r0

    template <typename T>
    T MAD(T arr[], int count)
    {
        // Go ahead and get a copy of the array so it can be modified
        T *sortedArr = SortedCopy(arr, count);
   d4c9e:	f7ff ffdf 	bl	d4c60 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>
    template <typename T>
    T Median(T arr[], int count, bool sorted = false)
    {
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);

        T retVal = sortedArr[count/2];
   d4ca2:	2402      	movs	r4, #2
   d4ca4:	fb97 f4f4 	sdiv	r4, r7, r4
   d4ca8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   d4cac:	ed94 7a00 	vldr	s14, [r4]
   d4cb0:	4603      	mov	r3, r0
        T *sortedArr = SortedCopy(arr, count);

        T median = Median(sortedArr, count, true);

        // Generate the deviations
        for (int i = 0; i < count; ++i)
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	4297      	cmp	r7, r2
   d4cb6:	dd0e      	ble.n	d4cd6 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0x46>
        {
            sortedArr[i] = sortedArr[i] - median;
   d4cb8:	ecf3 7a01 	vldmia	r3!, {s15}
   d4cbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        T *sortedArr = SortedCopy(arr, count);

        T median = Median(sortedArr, count, true);

        // Generate the deviations
        for (int i = 0; i < count; ++i)
   d4cc0:	3201      	adds	r2, #1
        {
            sortedArr[i] = sortedArr[i] - median;
            if (sortedArr[i] < 0) // Absolute Value
   d4cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                sortedArr[i] *= -1;
   d4cca:	bf48      	it	mi
   d4ccc:	eef1 7a67 	vnegmi.f32	s15, s15
   d4cd0:	ed43 7a01 	vstr	s15, [r3, #-4]
   d4cd4:	e7ee      	b.n	d4cb4 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0x24>
        }

        InsertionSort(sortedArr, count);
   d4cd6:	4639      	mov	r1, r7
   d4cd8:	f7ff ffa6 	bl	d4c28 <_ZN10StatsTools13InsertionSortIfEEvPT_i>
    template <typename T>
    T Median(T arr[], int count, bool sorted = false)
    {
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);

        T retVal = sortedArr[count/2];
   d4cdc:	ed94 8a00 	vldr	s16, [r4]
namespace StatsTools
{
    template <typename T>
    T fabs(T val)
    {
        return (val < 0) ? -val : val;
   d4ce0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d4ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ce8:	bf4c      	ite	mi
   d4cea:	eef1 7a48 	vnegmi.f32	s15, s16
   d4cee:	eef0 7a48 	vmovpl.f32	s15, s16

    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
    {
        T mad = MAD(arr, count);
        if (StatsTools::fabs(mad) < .1) // Remove divide by zero errors
   d4cf2:	ee17 0a90 	vmov	r0, s15
   d4cf6:	f002 fe73 	bl	d79e0 <__aeabi_f2d>
   d4cfa:	a323      	add	r3, pc, #140	; (adr r3, d4d88 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf8>)
   d4cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d00:	f003 f934 	bl	d7f6c <__aeabi_dcmplt>
            mad = .1;

        T median = Median(arr, count);
   d4d04:	682c      	ldr	r4, [r5, #0]
    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
    {
        T mad = MAD(arr, count);
        if (StatsTools::fabs(mad) < .1) // Remove divide by zero errors
            mad = .1;
   d4d06:	eddf 7a1e 	vldr	s15, [pc, #120]	; d4d80 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf0>
   d4d0a:	2800      	cmp	r0, #0
    }

    template <typename T>
    T Median(T arr[], int count, bool sorted = false)
    {
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);
   d4d0c:	4621      	mov	r1, r4
   d4d0e:	4630      	mov	r0, r6
    template <typename T>
    void TrimOutliers(T arr[], unsigned int &count)
    {
        T mad = MAD(arr, count);
        if (StatsTools::fabs(mad) < .1) // Remove divide by zero errors
            mad = .1;
   d4d10:	bf18      	it	ne
   d4d12:	eeb0 8a67 	vmovne.f32	s16, s15
    }

    template <typename T>
    T Median(T arr[], int count, bool sorted = false)
    {
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);
   d4d16:	f7ff ffa3 	bl	d4c60 <_ZN10StatsTools10SortedCopyIfEEPT_S2_i>

        T retVal = sortedArr[count/2];
   d4d1a:	2302      	movs	r3, #2
   d4d1c:	fb94 f4f3 	sdiv	r4, r4, r3
   d4d20:	eb00 0084 	add.w	r0, r0, r4, lsl #2
        T median = Median(arr, count);
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;

        for (int i = 0; i < count; ++i)
   d4d24:	2300      	movs	r3, #0
    template <typename T>
    T Median(T arr[], int count, bool sorted = false)
    {
        T *sortedArr = (sorted) ? arr : SortedCopy(arr, count);

        T retVal = sortedArr[count/2];
   d4d26:	edd0 6a00 	vldr	s13, [r0]
        for (int i = 0; i < count; ++i)
        {
            float devs = (arr[i] - median) / (float)mad;
            if (StatsTools::fabs(devs) < 3.5)
            {
                trimmedBuffer[countOut++] = arr[i];
   d4d2a:	4916      	ldr	r1, [pc, #88]	; (d4d84 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf4>)
   d4d2c:	4632      	mov	r2, r6
            mad = .1;

        T median = Median(arr, count);
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;
   d4d2e:	461c      	mov	r4, r3

        for (int i = 0; i < count; ++i)
        {
            float devs = (arr[i] - median) / (float)mad;
            if (StatsTools::fabs(devs) < 3.5)
   d4d30:	eeb0 6a0c 	vmov.f32	s12, #12	; 0x40600000  3.5
        T median = Median(arr, count);
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;

        for (int i = 0; i < count; ++i)
   d4d34:	6828      	ldr	r0, [r5, #0]
   d4d36:	4298      	cmp	r0, r3
   d4d38:	d918      	bls.n	d4d6c <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xdc>
        {
            float devs = (arr[i] - median) / (float)mad;
   d4d3a:	ecb2 7a01 	vldmia	r2!, {s14}
   d4d3e:	ee77 5a66 	vsub.f32	s11, s14, s13
        T median = Median(arr, count);
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;

        for (int i = 0; i < count; ++i)
   d4d42:	3301      	adds	r3, #1
        {
            float devs = (arr[i] - median) / (float)mad;
   d4d44:	eec5 7a88 	vdiv.f32	s15, s11, s16
namespace StatsTools
{
    template <typename T>
    T fabs(T val)
    {
        return (val < 0) ? -val : val;
   d4d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d50:	bf48      	it	mi
   d4d52:	eef1 7a67 	vnegmi.f32	s15, s15
        int countOut = 0;

        for (int i = 0; i < count; ++i)
        {
            float devs = (arr[i] - median) / (float)mad;
            if (StatsTools::fabs(devs) < 3.5)
   d4d56:	eef4 7ac6 	vcmpe.f32	s15, s12
   d4d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            {
                trimmedBuffer[countOut++] = arr[i];
   d4d5e:	bf42      	ittt	mi
   d4d60:	eb01 0084 	addmi.w	r0, r1, r4, lsl #2
   d4d64:	ed80 7a00 	vstrmi	s14, [r0]
   d4d68:	3401      	addmi	r4, #1
        T median = Median(arr, count);
        T *trimmedBuffer = reinterpret_cast<T*>(statsToolsAlloc);

        int countOut = 0;

        for (int i = 0; i < count; ++i)
   d4d6a:	e7e3      	b.n	d4d34 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xa4>
            {
                trimmedBuffer[countOut++] = arr[i];
            }
        }

        memcpy(arr, trimmedBuffer, countOut*sizeof(T));
   d4d6c:	00a2      	lsls	r2, r4, #2
   d4d6e:	4905      	ldr	r1, [pc, #20]	; (d4d84 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj+0xf4>)
   d4d70:	4630      	mov	r0, r6
   d4d72:	f003 fc67 	bl	d8644 <memcpy>
        count = countOut;
    }
   d4d76:	ecbd 8b02 	vpop	{d8}
                trimmedBuffer[countOut++] = arr[i];
            }
        }

        memcpy(arr, trimmedBuffer, countOut*sizeof(T));
        count = countOut;
   d4d7a:	602c      	str	r4, [r5, #0]
    }
   d4d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4d7e:	bf00      	nop
   d4d80:	3dcccccd 	.word	0x3dcccccd
   d4d84:	2003e21c 	.word	0x2003e21c
   d4d88:	9999999a 	.word	0x9999999a
   d4d8c:	3fb99999 	.word	0x3fb99999

000d4d90 <_ZN6Sensor15GetTrialAverageEiib>:

  // Overload with custom sensor sampling code
  virtual float GetSample() { return (enabled_) ? 0 : -1; }

  // Run a number of trials and average the results
  virtual float GetTrialAverage(const int numSamples, const int samplePeriod_ms, const bool trimOutliers = true) {
   d4d90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4d94:	461f      	mov	r7, r3
    if (enabled_) {
   d4d96:	7903      	ldrb	r3, [r0, #4]

  // Overload with custom sensor sampling code
  virtual float GetSample() { return (enabled_) ? 0 : -1; }

  // Run a number of trials and average the results
  virtual float GetTrialAverage(const int numSamples, const int samplePeriod_ms, const bool trimOutliers = true) {
   d4d98:	4605      	mov	r5, r0
   d4d9a:	460e      	mov	r6, r1
   d4d9c:	4690      	mov	r8, r2
    if (enabled_) {
   d4d9e:	2b00      	cmp	r3, #0
   d4da0:	d043      	beq.n	d4e2a <_ZN6Sensor15GetTrialAverageEiib+0x9a>
{
public:
    StatsArray(unsigned int startingSize) :
        size_(startingSize),
        values_(new T[size_]),
        count_(0) {}
   d4da2:	9802      	ldr	r0, [sp, #8]
   d4da4:	4b26      	ldr	r3, [pc, #152]	; (d4e40 <_ZN6Sensor15GetTrialAverageEiib+0xb0>)
   d4da6:	9300      	str	r3, [sp, #0]
   d4da8:	f1b0 5ffe 	cmp.w	r0, #532676608	; 0x1fc00000
   d4dac:	bf94      	ite	ls
   d4dae:	0080      	lslls	r0, r0, #2
   d4db0:	f04f 30ff 	movhi.w	r0, #4294967295
   d4db4:	f7ff f973 	bl	d409e <_Znaj>
   d4db8:	2400      	movs	r4, #0
   d4dba:	9001      	str	r0, [sp, #4]
   d4dbc:	9602      	str	r6, [sp, #8]
   d4dbe:	9403      	str	r4, [sp, #12]
      StatsTools::StatsArray<float> samples(numSamples);

      for (int i = 0; i < numSamples; ++i) {
   d4dc0:	42a6      	cmp	r6, r4
   d4dc2:	dd14      	ble.n	d4dee <_ZN6Sensor15GetTrialAverageEiib+0x5e>
        samples.Append(GetSample());
   d4dc4:	682b      	ldr	r3, [r5, #0]
   d4dc6:	4628      	mov	r0, r5
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	4798      	blx	r3
        return count_;
    }

    bool Append(const T value)
    {
        if (count_ < size_)
   d4dcc:	9a03      	ldr	r2, [sp, #12]
   d4dce:	9b02      	ldr	r3, [sp, #8]
   d4dd0:	429a      	cmp	r2, r3
   d4dd2:	d207      	bcs.n	d4de4 <_ZN6Sensor15GetTrialAverageEiib+0x54>
        {
            values_[count_] = value;
   d4dd4:	9b01      	ldr	r3, [sp, #4]
   d4dd6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   d4dda:	ed83 0a00 	vstr	s0, [r3]
            count_++;
   d4dde:	9b03      	ldr	r3, [sp, #12]
   d4de0:	3301      	adds	r3, #1
   d4de2:	9303      	str	r3, [sp, #12]
        delay(samplePeriod_ms);
   d4de4:	4640      	mov	r0, r8
   d4de6:	f001 fa05 	bl	d61f4 <delay>
  // Run a number of trials and average the results
  virtual float GetTrialAverage(const int numSamples, const int samplePeriod_ms, const bool trimOutliers = true) {
    if (enabled_) {
      StatsTools::StatsArray<float> samples(numSamples);

      for (int i = 0; i < numSamples; ++i) {
   d4dea:	3401      	adds	r4, #1
   d4dec:	e7e8      	b.n	d4dc0 <_ZN6Sensor15GetTrialAverageEiib+0x30>
        samples.Append(GetSample());
        delay(samplePeriod_ms);
      }
      if (trimOutliers) {
   d4dee:	b147      	cbz	r7, d4e02 <_ZN6Sensor15GetTrialAverageEiib+0x72>
        Serial.println("Trimming");
   d4df0:	f001 fea4 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4df4:	4913      	ldr	r1, [pc, #76]	; (d4e44 <_ZN6Sensor15GetTrialAverageEiib+0xb4>)
   d4df6:	f001 f80e 	bl	d5e16 <_ZN5Print7printlnEPKc>
    }

    void TrimOutliers()
    {
        // count will be copied into the function and also be modified
        StatsTools::TrimOutliers(values_, count_);
   d4dfa:	a903      	add	r1, sp, #12
   d4dfc:	9801      	ldr	r0, [sp, #4]
   d4dfe:	f7ff ff47 	bl	d4c90 <_ZN10StatsTools12TrimOutliersIfEEvPT_Rj>
        return false;
    }

    float Average()
    {
        return StatsTools::Average(values_, count_);
   d4e02:	9b03      	ldr	r3, [sp, #12]
   d4e04:	9901      	ldr	r1, [sp, #4]
    }

    template <typename T>
    float Average(T arr[], int count)
    {
        float total = 0.0;
   d4e06:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4e48 <_ZN6Sensor15GetTrialAverageEiib+0xb8>
        for (int i = 0; i < count; ++i) // Get the average of all readings
   d4e0a:	2200      	movs	r2, #0
   d4e0c:	4293      	cmp	r3, r2
   d4e0e:	dd05      	ble.n	d4e1c <_ZN6Sensor15GetTrialAverageEiib+0x8c>
        {
          total += arr[i];
   d4e10:	ecf1 7a01 	vldmia	r1!, {s15}

    template <typename T>
    float Average(T arr[], int count)
    {
        float total = 0.0;
        for (int i = 0; i < count; ++i) // Get the average of all readings
   d4e14:	3201      	adds	r2, #1
        {
          total += arr[i];
   d4e16:	ee37 7a27 	vadd.f32	s14, s14, s15
   d4e1a:	e7f7      	b.n	d4e0c <_ZN6Sensor15GetTrialAverageEiib+0x7c>
        }
        return total/count;
   d4e1c:	ee07 3a90 	vmov	s15, r3
   d4e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e24:	ee87 0a27 	vdiv.f32	s0, s14, s15
   d4e28:	e006      	b.n	d4e38 <_ZN6Sensor15GetTrialAverageEiib+0xa8>
        samples.TrimOutliers();
      }

      return samples.Average();
    } else {
      Serial.println("Didnt trimm1");
   d4e2a:	f001 fe87 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4e2e:	4907      	ldr	r1, [pc, #28]	; (d4e4c <_ZN6Sensor15GetTrialAverageEiib+0xbc>)
   d4e30:	f000 fff1 	bl	d5e16 <_ZN5Print7printlnEPKc>
      return -1;
   d4e34:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
  }
   d4e38:	b004      	add	sp, #16
   d4e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e3e:	bf00      	nop
   d4e40:	000d9044 	.word	0x000d9044
   d4e44:	000d9167 	.word	0x000d9167
   d4e48:	00000000 	.word	0x00000000
   d4e4c:	000d9170 	.word	0x000d9170

000d4e50 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>:
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d4e50:	b570      	push	{r4, r5, r6, lr}
   d4e52:	4606      	mov	r6, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e54:	2000      	movs	r0, #0
    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
   d4e56:	460c      	mov	r4, r1
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e58:	f000 fbda 	bl	d5610 <application_thread_current>
        delete onError_.load(std::memory_order_relaxed);
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
   d4e5c:	b908      	cbnz	r0, d4e62 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x12>
                    return false;
                }
                ContextT::processApplicationEvents();
            }
        }
        return false;
   d4e5e:	2000      	movs	r0, #0
   d4e60:	bd70      	pop	{r4, r5, r6, pc}
    }

    bool wait(int timeout = 0) const {
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
   d4e62:	2c00      	cmp	r4, #0
   d4e64:	dd03      	ble.n	d4e6e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x1e>
   d4e66:	f000 fa7b 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
   d4e6a:	4605      	mov	r5, r0
   d4e6c:	e000      	b.n	d4e70 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
   d4e6e:	2500      	movs	r5, #0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4e70:	7873      	ldrb	r3, [r6, #1]
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d4e72:	b93b      	cbnz	r3, d4e84 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x34>
                    return true;
                }
                if (timeout > 0 && millis() - t >= (system_tick_t)timeout) {
   d4e74:	2c00      	cmp	r4, #0
   d4e76:	dd07      	ble.n	d4e88 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d4e78:	f000 fa72 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
   d4e7c:	1b40      	subs	r0, r0, r5
   d4e7e:	42a0      	cmp	r0, r4
   d4e80:	d302      	bcc.n	d4e88 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x38>
   d4e82:	e7ec      	b.n	d4e5e <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0xe>
        // TODO: Waiting for a future in a non-default application thread is not supported
        if (ContextT::isApplicationThreadCurrent()) {
            const system_tick_t t = (timeout > 0) ? millis() : 0;
            for (;;) {
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
                    return true;
   d4e84:	2001      	movs	r0, #1
   d4e86:	bd70      	pop	{r4, r5, r6, pc}

// Event loop and threading abstraction. Used for unit testing
struct FutureContext {
    // Runs the application's event loop
    static void processApplicationEvents() {
        spark_process();
   d4e88:	f000 fc48 	bl	d571c <spark_process>
   d4e8c:	e7f0      	b.n	d4e70 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi+0x20>
	...

000d4e90 <_Z19allReadingsToServerffffff>:
  return ((distanceToWaterMM * 0.393701) / 10);
}

time_t GetMidTimeStamp(time_t startTime, time_t stopTime) { return startTime + (stopTime - startTime) / 2; }

bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float serialValue, float temp) {
   d4e90:	b530      	push	{r4, r5, lr}
  // we will recive all these readings and format them in a string and send
  // them over the network
  // Particle.Publish returns bool depending on if it publishes or not.
  String msg = String::format("{ \"wl1\": %0.5f, \"wl2\": %0.5f, \"wl3\": %0.2f, \"temp\": %0.2f, \"b\": %0.2f}",
                              oldAvg, newAnalog, newAnalogAvg, temp, fuelGauge.getSoC());
   d4e92:	4831      	ldr	r0, [pc, #196]	; (d4f58 <_Z19allReadingsToServerffffff+0xc8>)
  return ((distanceToWaterMM * 0.393701) / 10);
}

time_t GetMidTimeStamp(time_t startTime, time_t stopTime) { return startTime + (stopTime - startTime) / 2; }

bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float serialValue, float temp) {
   d4e94:	b095      	sub	sp, #84	; 0x54
   d4e96:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
   d4e9a:	edcd 1a0b 	vstr	s3, [sp, #44]	; 0x2c
   d4e9e:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
   d4ea2:	ed8d 1a0c 	vstr	s2, [sp, #48]	; 0x30
  // we will recive all these readings and format them in a string and send
  // them over the network
  // Particle.Publish returns bool depending on if it publishes or not.
  String msg = String::format("{ \"wl1\": %0.5f, \"wl2\": %0.5f, \"wl3\": %0.2f, \"temp\": %0.2f, \"b\": %0.2f}",
                              oldAvg, newAnalog, newAnalogAvg, temp, fuelGauge.getSoC());
   d4ea6:	f001 fa21 	bl	d62ec <_ZN9FuelGauge6getSoCEv>
   d4eaa:	ed9d 1a0c 	vldr	s2, [sp, #48]	; 0x30
   d4eae:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
   d4eb2:	ee11 0a10 	vmov	r0, s2
   d4eb6:	f002 fd93 	bl	d79e0 <__aeabi_f2d>
   d4eba:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4ebe:	4604      	mov	r4, r0
   d4ec0:	ee10 0a10 	vmov	r0, s0
   d4ec4:	460d      	mov	r5, r1
   d4ec6:	f002 fd8b 	bl	d79e0 <__aeabi_f2d>
   d4eca:	eddd 2a0a 	vldr	s5, [sp, #40]	; 0x28
   d4ece:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4ed2:	ee12 0a90 	vmov	r0, s5
   d4ed6:	f002 fd83 	bl	d79e0 <__aeabi_f2d>
   d4eda:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
   d4ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4ee2:	ee11 0a90 	vmov	r0, s3
   d4ee6:	f002 fd7b 	bl	d79e0 <__aeabi_f2d>
   d4eea:	eddd 0a0d 	vldr	s1, [sp, #52]	; 0x34
   d4eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4ef2:	ee10 0a90 	vmov	r0, s1
   d4ef6:	f002 fd73 	bl	d79e0 <__aeabi_f2d>
   d4efa:	4622      	mov	r2, r4
   d4efc:	e9cd 0100 	strd	r0, r1, [sp]
   d4f00:	462b      	mov	r3, r5
   d4f02:	4916      	ldr	r1, [pc, #88]	; (d4f5c <_Z19allReadingsToServerffffff+0xcc>)
   d4f04:	a810      	add	r0, sp, #64	; 0x40
   d4f06:	f000 ff15 	bl	d5d34 <_ZN6String6formatEPKcz>
   d4f0a:	4b15      	ldr	r3, [pc, #84]	; (d4f60 <_Z19allReadingsToServerffffff+0xd0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4f0e:	6819      	ldr	r1, [r3, #0]
   d4f10:	4b14      	ldr	r3, [pc, #80]	; (d4f64 <_Z19allReadingsToServerffffff+0xd4>)
   d4f12:	781b      	ldrb	r3, [r3, #0]
   d4f14:	f88d 3000 	strb.w	r3, [sp]
   d4f18:	a80e      	add	r0, sp, #56	; 0x38
   d4f1a:	233c      	movs	r3, #60	; 0x3c
   d4f1c:	f001 fbb8 	bl	d6690 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f20:	9c0e      	ldr	r4, [sp, #56]	; 0x38
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
   d4f22:	2100      	movs	r1, #0
   d4f24:	4620      	mov	r0, r4
   d4f26:	f7ff ff93 	bl	d4e50 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>
   d4f2a:	7863      	ldrb	r3, [r4, #1]
   d4f2c:	f3bf 8f5f 	dmb	sy
        if (this->acquireDone() && this->isSucceeded()) {
   d4f30:	b133      	cbz	r3, d4f40 <_Z19allReadingsToServerffffff+0xb0>
        }
        return false;
    }

    bool isSucceeded() const {
        wait();
   d4f32:	2100      	movs	r1, #0
   d4f34:	4620      	mov	r0, r4
   d4f36:	f7ff ff8b 	bl	d4e50 <_ZNK8particle6detail14FutureImplBaseIbNS0_13FutureContextEE4waitEi>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4f3a:	7823      	ldrb	r3, [r4, #0]
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
   d4f3c:	2b01      	cmp	r3, #1
   d4f3e:	d001      	beq.n	d4f44 <_Z19allReadingsToServerffffff+0xb4>
            return result_;
        }
        return std::move(defaultValue);
   d4f40:	2400      	movs	r4, #0
   d4f42:	e000      	b.n	d4f46 <_Z19allReadingsToServerffffff+0xb6>
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
        this->wait();
        if (this->acquireDone() && this->isSucceeded()) {
            return result_;
   d4f44:	7b24      	ldrb	r4, [r4, #12]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f46:	a80f      	add	r0, sp, #60	; 0x3c
   d4f48:	f7ff fc68 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f4c:	a810      	add	r0, sp, #64	; 0x40
   d4f4e:	f000 fe65 	bl	d5c1c <_ZN6StringD1Ev>

  return Particle.publish(unitName, msg, PRIVATE);
}
   d4f52:	4620      	mov	r0, r4
   d4f54:	b015      	add	sp, #84	; 0x54
   d4f56:	bd30      	pop	{r4, r5, pc}
   d4f58:	2003e328 	.word	0x2003e328
   d4f5c:	000d917d 	.word	0x000d917d
   d4f60:	2003e2f8 	.word	0x2003e2f8
   d4f64:	2003e308 	.word	0x2003e308

000d4f68 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
// Main program execution.  Note that, if this completes, it will shut down and
// restart at setup(). It will not loop.
void loop() {
   d4f68:	b530      	push	{r4, r5, lr}
   d4f6a:	ed2d 8b06 	vpush	{d8-d10}
   d4f6e:	b08b      	sub	sp, #44	; 0x2c
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4f70:	f000 fbdc 	bl	d572c <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f74:	f000 fbea 	bl	d574c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4f78:	b110      	cbz	r0, d4f80 <loop+0x18>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4f7a:	2000      	movs	r0, #0
   d4f7c:	f000 fbf6 	bl	d576c <spark_sync_time>
   d4f80:	f000 f9ee 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
  Particle.connect();
  // sync the clock`
  Particle.syncTime();
  unsigned long startTime = millis();
  // drive trigger pin low to turn on Maxbotix
  digitalWrite(PERIPHERAL_ENABLE_PIN, LOW);
   d4f84:	2100      	movs	r1, #0
   d4f86:	4604      	mov	r4, r0
   d4f88:	2003      	movs	r0, #3
   d4f8a:	f002 f8e2 	bl	d7152 <digitalWrite>
  delay(500);
   d4f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4f92:	f001 f92f 	bl	d61f4 <delay>
  // grab all of our data while we are connecting to the internet
  float oldAnalog = ProcessOldAnalog();
   d4f96:	f7ff fe1b 	bl	d4bd0 <_Z16ProcessOldAnalogv>
   d4f9a:	eeb0 8a40 	vmov.f32	s16, s0
  float oldAnalogAvg = ProcessOldAnalogAvg();
   d4f9e:	f7ff fd03 	bl	d49a8 <_Z19ProcessOldAnalogAvgv>
   d4fa2:	eef0 8a40 	vmov.f32	s17, s0
  float newAnalog = ProccessNewAnalog();
   d4fa6:	f7ff fa9f 	bl	d44e8 <_Z17ProccessNewAnalogv>
   d4faa:	eeb0 9a40 	vmov.f32	s18, s0
  float newAnalogAvg = ProccessNewAnalogAvg();
   d4fae:	f7ff fb0b 	bl	d45c8 <_Z20ProccessNewAnalogAvgv>
   d4fb2:	eef0 9a40 	vmov.f32	s19, s0
  float serialData = ProcessSerial();
   d4fb6:	f7ff fb77 	bl	d46a8 <_Z13ProcessSerialv>
   d4fba:	eeb0 aa40 	vmov.f32	s20, s0
  float tempData = processTemp();
   d4fbe:	f7ff f9ff 	bl	d43c0 <_Z11processTempv>
   d4fc2:	eef0 aa40 	vmov.f32	s21, s0
 /////////////////////////Get Charge Fault Register///////////
  byte a =0b11111111;
  Serial.println(a);
   d4fc6:	f001 fdb9 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4fca:	220a      	movs	r2, #10
   d4fcc:	21ff      	movs	r1, #255	; 0xff
   d4fce:	f000 ff5b 	bl	d5e88 <_ZN5Print7printlnEhi>
  a = pmic.getFault();
   d4fd2:	4865      	ldr	r0, [pc, #404]	; (d5168 <loop+0x200>)
   d4fd4:	f000 fc81 	bl	d58da <_ZN4PMIC8getFaultEv>
   d4fd8:	4605      	mov	r5, r0
  Serial.println("charging");
   d4fda:	f001 fdaf 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4fde:	4963      	ldr	r1, [pc, #396]	; (d516c <loop+0x204>)
   d4fe0:	f000 ff19 	bl	d5e16 <_ZN5Print7printlnEPKc>
  Serial.println(a);
   d4fe4:	f001 fdaa 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4fe8:	220a      	movs	r2, #10
   d4fea:	4629      	mov	r1, r5
   d4fec:	f000 ff4c 	bl	d5e88 <_ZN5Print7printlnEhi>
  Serial.println("Fault");
   d4ff0:	f001 fda4 	bl	d6b3c <_Z16_fetch_usbserialv>
   d4ff4:	495e      	ldr	r1, [pc, #376]	; (d5170 <loop+0x208>)
   d4ff6:	f000 ff0e 	bl	d5e16 <_ZN5Print7printlnEPKc>
////////////////////////////
  delay(500);
   d4ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4ffe:	f001 f8f9 	bl	d61f4 <delay>
  // drive trigger pin high to turn off maxbotix
  digitalWrite(PERIPHERAL_ENABLE_PIN, HIGH);
   d5002:	2101      	movs	r1, #1
   d5004:	2003      	movs	r0, #3
   d5006:	f002 f8a4 	bl	d7152 <digitalWrite>
   d500a:	f000 f9a9 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
  // This will for connection and make sure the time is valid, else it will time out
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && !Particle.connected() && Time.isValid()) {
   d500e:	1b00      	subs	r0, r0, r4
   d5010:	f002 fcc4 	bl	d799c <__aeabi_ui2d>
   d5014:	a352      	add	r3, pc, #328	; (adr r3, d5160 <loop+0x1f8>)
   d5016:	e9d3 2300 	ldrd	r2, r3, [r3]
   d501a:	f002 fe5f 	bl	d7cdc <__aeabi_ddiv>
   d501e:	2200      	movs	r2, #0
   d5020:	4b54      	ldr	r3, [pc, #336]	; (d5174 <loop+0x20c>)
   d5022:	f002 ffa3 	bl	d7f6c <__aeabi_dcmplt>
   d5026:	b130      	cbz	r0, d5036 <loop+0xce>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5028:	f000 fb90 	bl	d574c <spark_cloud_flag_connected>
   d502c:	b918      	cbnz	r0, d5036 <loop+0xce>
   d502e:	f001 f890 	bl	d6152 <_ZN9TimeClass7isValidEv>
   d5032:	2800      	cmp	r0, #0
   d5034:	d1e9      	bne.n	d500a <loop+0xa2>
    // do nothing
  }
  delay(10000);
   d5036:	f242 7010 	movw	r0, #10000	; 0x2710
   d503a:	f001 f8db 	bl	d61f4 <delay>
  // Attempt to publish data until the node times out
  bool allSent = false;
   d503e:	2500      	movs	r5, #0
   d5040:	f000 f98e 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && Particle.connected() && false == allSent) {
   d5044:	1b00      	subs	r0, r0, r4
   d5046:	f002 fca9 	bl	d799c <__aeabi_ui2d>
   d504a:	a345      	add	r3, pc, #276	; (adr r3, d5160 <loop+0x1f8>)
   d504c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5050:	f002 fe44 	bl	d7cdc <__aeabi_ddiv>
   d5054:	2200      	movs	r2, #0
   d5056:	4b47      	ldr	r3, [pc, #284]	; (d5174 <loop+0x20c>)
   d5058:	f002 ff88 	bl	d7f6c <__aeabi_dcmplt>
   d505c:	b1c8      	cbz	r0, d5092 <loop+0x12a>
   d505e:	f000 fb75 	bl	d574c <spark_cloud_flag_connected>
   d5062:	b1b0      	cbz	r0, d5092 <loop+0x12a>
   d5064:	b9ad      	cbnz	r5, d5092 <loop+0x12a>
    // currently no buffer, this will attempt to send the data until time out
    allSent |= allReadingsToServer(oldAnalog, oldAnalogAvg, newAnalog, newAnalogAvg, serialData, tempData);
   d5066:	eef0 2a6a 	vmov.f32	s5, s21
   d506a:	eeb0 2a4a 	vmov.f32	s4, s20
   d506e:	eef0 1a69 	vmov.f32	s3, s19
   d5072:	eeb0 1a49 	vmov.f32	s2, s18
   d5076:	eef0 0a68 	vmov.f32	s1, s17
   d507a:	eeb0 0a48 	vmov.f32	s0, s16
   d507e:	f7ff ff07 	bl	d4e90 <_Z19allReadingsToServerffffff>
   d5082:	4605      	mov	r5, r0
    Serial.println(allSent);
   d5084:	f001 fd5a 	bl	d6b3c <_Z16_fetch_usbserialv>
   d5088:	220a      	movs	r2, #10
   d508a:	4629      	mov	r1, r5
   d508c:	f000 ff28 	bl	d5ee0 <_ZN5Print7printlnEii>
    // do nothing
  }
  delay(10000);
  // Attempt to publish data until the node times out
  bool allSent = false;
  while (((millis() - startTime) / 60000.0 < MAX_ON_TIME_min) && Particle.connected() && false == allSent) {
   d5090:	e7d6      	b.n	d5040 <loop+0xd8>
  }
  

  // before sleep see if we are on our maint time interval
  // UTC is 6 hrs ahead of central so we must adjust our time
  if (Time.hour() == 17 && Time.minute() <= 10) {
   d5092:	f001 f887 	bl	d61a4 <_ZN9TimeClass4hourEv>
   d5096:	2811      	cmp	r0, #17
   d5098:	d139      	bne.n	d510e <loop+0x1a6>
   d509a:	f001 f88d 	bl	d61b8 <_ZN9TimeClass6minuteEv>
   d509e:	280a      	cmp	r0, #10
   d50a0:	dc35      	bgt.n	d510e <loop+0x1a6>
   d50a2:	f000 f95d 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
    // wait and do nothing for maint duration
    // NOTE this will cause us to miss 1 reading
    // send message that maintainces has started
    // send in battery reading
    unsigned long maintTimer = millis();
    String mainMess = String::format("Maintaince Mode started for %s", unitName);
   d50a6:	4a34      	ldr	r2, [pc, #208]	; (d5178 <loop+0x210>)
   d50a8:	4934      	ldr	r1, [pc, #208]	; (d517c <loop+0x214>)
   d50aa:	4605      	mov	r5, r0
   d50ac:	a806      	add	r0, sp, #24
   d50ae:	f000 fe41 	bl	d5d34 <_ZN6String6formatEPKcz>
   d50b2:	4b33      	ldr	r3, [pc, #204]	; (d5180 <loop+0x218>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d50b4:	9a06      	ldr	r2, [sp, #24]
   d50b6:	781b      	ldrb	r3, [r3, #0]
   d50b8:	f88d 3000 	strb.w	r3, [sp]
   d50bc:	a804      	add	r0, sp, #16
   d50be:	233c      	movs	r3, #60	; 0x3c
   d50c0:	4930      	ldr	r1, [pc, #192]	; (d5184 <loop+0x21c>)
   d50c2:	f001 fae5 	bl	d6690 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d50c6:	a805      	add	r0, sp, #20
   d50c8:	f7ff fba8 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50cc:	f000 f948 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
    Particle.publish("alerts", mainMess, PRIVATE);
    while (((millis() - maintTimer) / 1000.0) < MAINTENANCE_DURATION_min * 60) {
   d50d0:	1b40      	subs	r0, r0, r5
   d50d2:	f002 fc63 	bl	d799c <__aeabi_ui2d>
   d50d6:	2200      	movs	r2, #0
   d50d8:	4b2b      	ldr	r3, [pc, #172]	; (d5188 <loop+0x220>)
   d50da:	f002 fdff 	bl	d7cdc <__aeabi_ddiv>
   d50de:	2200      	movs	r2, #0
   d50e0:	4b2a      	ldr	r3, [pc, #168]	; (d518c <loop+0x224>)
   d50e2:	f002 ff43 	bl	d7f6c <__aeabi_dcmplt>
   d50e6:	4604      	mov	r4, r0
   d50e8:	2800      	cmp	r0, #0
   d50ea:	d1ef      	bne.n	d50cc <loop+0x164>
      // do nothing
    }
    System.sleep( {}, {}, calculateSleepCycleSeconds() );
   d50ec:	f7ff fb58 	bl	d47a0 <_Z26calculateSleepCycleSecondsv>
   d50f0:	4b27      	ldr	r3, [pc, #156]	; (d5190 <loop+0x228>)
     */
    inline static SleepResult sleep(std::initializer_list<pin_t> pins, std::initializer_list<InterruptMode> edgeTriggerMode, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) {
        // This will only work in C++14
        // static_assert(pins.size() > 0, "Provided pin list is empty");
        // static_assert(edgeTriggerMode.size() > 0, "Provided InterruptMode list is empty");
        return sleepPinImpl(pins.begin(), pins.size(), edgeTriggerMode.begin(), edgeTriggerMode.size(), seconds, flag);
   d50f2:	4928      	ldr	r1, [pc, #160]	; (d5194 <loop+0x22c>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	9302      	str	r3, [sp, #8]
   d50f8:	9001      	str	r0, [sp, #4]
   d50fa:	9400      	str	r4, [sp, #0]
   d50fc:	a804      	add	r0, sp, #16
   d50fe:	4b26      	ldr	r3, [pc, #152]	; (d5198 <loop+0x230>)
   d5100:	4622      	mov	r2, r4
   d5102:	f000 fd59 	bl	d5bb8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    // wait and do nothing for maint duration
    // NOTE this will cause us to miss 1 reading
    // send message that maintainces has started
    // send in battery reading
    unsigned long maintTimer = millis();
    String mainMess = String::format("Maintaince Mode started for %s", unitName);
   d5106:	a806      	add	r0, sp, #24
   d5108:	f000 fd88 	bl	d5c1c <_ZN6StringD1Ev>
   d510c:	e021      	b.n	d5152 <loop+0x1ea>
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d510e:	f000 fb15 	bl	d573c <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5112:	f000 fb1b 	bl	d574c <spark_cloud_flag_connected>
    System.sleep( {}, {}, calculateSleepCycleSeconds() );
    //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
  } else {
    // disconnect from particle cloud
    Particle.disconnect();
    while ((Particle.connected() && (millis() - startTime) / 60000.0 < MAX_ON_TIME_min)) {
   d5116:	b178      	cbz	r0, d5138 <loop+0x1d0>
   d5118:	f000 f922 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
   d511c:	1b00      	subs	r0, r0, r4
   d511e:	f002 fc3d 	bl	d799c <__aeabi_ui2d>
   d5122:	a30f      	add	r3, pc, #60	; (adr r3, d5160 <loop+0x1f8>)
   d5124:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5128:	f002 fdd8 	bl	d7cdc <__aeabi_ddiv>
   d512c:	2200      	movs	r2, #0
   d512e:	4b11      	ldr	r3, [pc, #68]	; (d5174 <loop+0x20c>)
   d5130:	f002 ff1c 	bl	d7f6c <__aeabi_dcmplt>
   d5134:	2800      	cmp	r0, #0
   d5136:	d1ec      	bne.n	d5112 <loop+0x1aa>
      // wait until cloud operations are done and disconnect
    }
    System.sleep( {}, {}, calculateSleepCycleSeconds() );
   d5138:	f7ff fb32 	bl	d47a0 <_Z26calculateSleepCycleSecondsv>
   d513c:	4b14      	ldr	r3, [pc, #80]	; (d5190 <loop+0x228>)
   d513e:	4917      	ldr	r1, [pc, #92]	; (d519c <loop+0x234>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	9302      	str	r3, [sp, #8]
   d5144:	2200      	movs	r2, #0
   d5146:	9001      	str	r0, [sp, #4]
   d5148:	9200      	str	r2, [sp, #0]
   d514a:	4b15      	ldr	r3, [pc, #84]	; (d51a0 <loop+0x238>)
   d514c:	a806      	add	r0, sp, #24
   d514e:	f000 fd33 	bl	d5bb8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
  }


}
   d5152:	b00b      	add	sp, #44	; 0x2c
   d5154:	ecbd 8b06 	vpop	{d8-d10}
   d5158:	bd30      	pop	{r4, r5, pc}
   d515a:	bf00      	nop
   d515c:	f3af 8000 	nop.w
   d5160:	00000000 	.word	0x00000000
   d5164:	40ed4c00 	.word	0x40ed4c00
   d5168:	2003e214 	.word	0x2003e214
   d516c:	000d91c4 	.word	0x000d91c4
   d5170:	000d91cd 	.word	0x000d91cd
   d5174:	40080000 	.word	0x40080000
   d5178:	2003e2f8 	.word	0x2003e2f8
   d517c:	000d91d3 	.word	0x000d91d3
   d5180:	2003e308 	.word	0x2003e308
   d5184:	000d91f2 	.word	0x000d91f2
   d5188:	408f4000 	.word	0x408f4000
   d518c:	4082c000 	.word	0x4082c000
   d5190:	2003e318 	.word	0x2003e318
   d5194:	000d9064 	.word	0x000d9064
   d5198:	000d9064 	.word	0x000d9064
   d519c:	000d9064 	.word	0x000d9064
   d51a0:	000d9064 	.word	0x000d9064

000d51a4 <_GLOBAL__sub_I_statsToolsAlloc>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d51a4:	4b29      	ldr	r3, [pc, #164]	; (d524c <_GLOBAL__sub_I_statsToolsAlloc+0xa8>)
      // go to sleep for the cycle time
      System.sleep( {}, {}, calculateSleepCycleSeconds() );
      //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
    }
  }
   d51a6:	b570      	push	{r4, r5, r6, lr}
   d51a8:	2400      	movs	r4, #0
   d51aa:	601c      	str	r4, [r3, #0]
   d51ac:	4b28      	ldr	r3, [pc, #160]	; (d5250 <_GLOBAL__sub_I_statsToolsAlloc+0xac>)
// and reading values you expect to be there.
retained int RetainedBufferEntries = 0;
retained RetainedData RetainedBuffer[MAX_ENTRIES];

// Holds registered sensor names. The index of each name is its Id
std::vector<String> SensorNames;
   d51ae:	4d29      	ldr	r5, [pc, #164]	; (d5254 <_GLOBAL__sub_I_statsToolsAlloc+0xb0>)
   d51b0:	2601      	movs	r6, #1
   d51b2:	701e      	strb	r6, [r3, #0]
   d51b4:	f000 f87c 	bl	d52b0 <HAL_Pin_Map>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d51b8:	4631      	mov	r1, r6
   d51ba:	4630      	mov	r0, r6
   d51bc:	f000 f8e8 	bl	d5390 <HAL_Feature_Set>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d51c0:	4825      	ldr	r0, [pc, #148]	; (d5258 <_GLOBAL__sub_I_statsToolsAlloc+0xb4>)
   d51c2:	4926      	ldr	r1, [pc, #152]	; (d525c <_GLOBAL__sub_I_statsToolsAlloc+0xb8>)
   d51c4:	6004      	str	r4, [r0, #0]
   d51c6:	462a      	mov	r2, r5
   d51c8:	6044      	str	r4, [r0, #4]
   d51ca:	6084      	str	r4, [r0, #8]
   d51cc:	f002 f856 	bl	d727c <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d51d0:	4b23      	ldr	r3, [pc, #140]	; (d5260 <_GLOBAL__sub_I_statsToolsAlloc+0xbc>)
   d51d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51d6:	701c      	strb	r4, [r3, #0]
   d51d8:	805c      	strh	r4, [r3, #2]
   d51da:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51dc:	2002      	movs	r0, #2
   d51de:	f000 f9ff 	bl	d55e0 <set_system_mode>
//////////////////////////////

/////////////////////////////////Code Starts Below ///////////////////////////////////////////////////
// Set to SEMI_AUTOMATIC so we can control connection
SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d51e2:	4621      	mov	r1, r4
   d51e4:	4630      	mov	r0, r6
   d51e6:	f000 fa0b 	bl	d5600 <system_thread_set_state>
   d51ea:	481e      	ldr	r0, [pc, #120]	; (d5264 <_GLOBAL__sub_I_statsToolsAlloc+0xc0>)
// STARTUP(cellular_credentials_set("RESELLER", "", "", NULL)); // Comment if the SIM card is from Particle - AJK 08/06/19

// these are not used currently
std::vector<SensorConfig> sensors;
   d51ec:	491e      	ldr	r1, [pc, #120]	; (d5268 <_GLOBAL__sub_I_statsToolsAlloc+0xc4>)
   d51ee:	6004      	str	r4, [r0, #0]
   d51f0:	462a      	mov	r2, r5
   d51f2:	6044      	str	r4, [r0, #4]
   d51f4:	6084      	str	r4, [r0, #8]
   d51f6:	f002 f841 	bl	d727c <__aeabi_atexit>
   d51fa:	481c      	ldr	r0, [pc, #112]	; (d526c <_GLOBAL__sub_I_statsToolsAlloc+0xc8>)
std::vector<SensorData> sensorBuffer; // put into retained memory?

FuelGauge fuelGauge;
   d51fc:	4e1c      	ldr	r6, [pc, #112]	; (d5270 <_GLOBAL__sub_I_statsToolsAlloc+0xcc>)
   d51fe:	6004      	str	r4, [r0, #0]
SYSTEM_THREAD(ENABLED);
// STARTUP(cellular_credentials_set("RESELLER", "", "", NULL)); // Comment if the SIM card is from Particle - AJK 08/06/19

// these are not used currently
std::vector<SensorConfig> sensors;
std::vector<SensorData> sensorBuffer; // put into retained memory?
   d5200:	462a      	mov	r2, r5
   d5202:	6044      	str	r4, [r0, #4]
   d5204:	6084      	str	r4, [r0, #8]
   d5206:	491b      	ldr	r1, [pc, #108]	; (d5274 <_GLOBAL__sub_I_statsToolsAlloc+0xd0>)
   d5208:	f002 f838 	bl	d727c <__aeabi_atexit>

FuelGauge fuelGauge;
   d520c:	4621      	mov	r1, r4
   d520e:	4630      	mov	r0, r6
   d5210:	f001 f82c 	bl	d626c <_ZN9FuelGaugeC1Eb>
   d5214:	4630      	mov	r0, r6
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  Easy naming convention, this will trigger a webhook that will dump all data into chords for post analysis in graphana
*/
String unitName = "Boron-2";
   d5216:	4e18      	ldr	r6, [pc, #96]	; (d5278 <_GLOBAL__sub_I_statsToolsAlloc+0xd4>)

// these are not used currently
std::vector<SensorConfig> sensors;
std::vector<SensorData> sensorBuffer; // put into retained memory?

FuelGauge fuelGauge;
   d5218:	4918      	ldr	r1, [pc, #96]	; (d527c <_GLOBAL__sub_I_statsToolsAlloc+0xd8>)
   d521a:	462a      	mov	r2, r5
   d521c:	f002 f82e 	bl	d727c <__aeabi_atexit>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  Easy naming convention, this will trigger a webhook that will dump all data into chords for post analysis in graphana
*/
String unitName = "Boron-2";
   d5220:	4917      	ldr	r1, [pc, #92]	; (d5280 <_GLOBAL__sub_I_statsToolsAlloc+0xdc>)
   d5222:	4630      	mov	r0, r6
   d5224:	f000 fd41 	bl	d5caa <_ZN6StringC1EPK19__FlashStringHelper>
   d5228:	4630      	mov	r0, r6
// this function will take all readings from the various function, add them to
// the sensor buffer
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float Serial);
// Battery protection function
void checkBattery(bool debug);
PMIC pmic;
   d522a:	4e16      	ldr	r6, [pc, #88]	; (d5284 <_GLOBAL__sub_I_statsToolsAlloc+0xe0>)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
  Easy naming convention, this will trigger a webhook that will dump all data into chords for post analysis in graphana
*/
String unitName = "Boron-2";
   d522c:	4916      	ldr	r1, [pc, #88]	; (d5288 <_GLOBAL__sub_I_statsToolsAlloc+0xe4>)
   d522e:	462a      	mov	r2, r5
   d5230:	f002 f824 	bl	d727c <__aeabi_atexit>
// this function will take all readings from the various function, add them to
// the sensor buffer
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float Serial);
// Battery protection function
void checkBattery(bool debug);
PMIC pmic;
   d5234:	4621      	mov	r1, r4
   d5236:	4630      	mov	r0, r6
   d5238:	f000 fb07 	bl	d584a <_ZN4PMICC1Eb>
   d523c:	462a      	mov	r2, r5
   d523e:	4630      	mov	r0, r6
   d5240:	4912      	ldr	r1, [pc, #72]	; (d528c <_GLOBAL__sub_I_statsToolsAlloc+0xe8>)
      // go to sleep for the cycle time
      System.sleep( {}, {}, calculateSleepCycleSeconds() );
      //System.sleep(SLEEP_MODE_DEEP, calculateSleepCycleSeconds());
    }
  }
   d5242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// this function will take all readings from the various function, add them to
// the sensor buffer
bool allReadingsToServer(float old, float newAnalog, float oldAvg, float newAnalogAvg, float Serial);
// Battery protection function
void checkBattery(bool debug);
PMIC pmic;
   d5246:	f002 b819 	b.w	d727c <__aeabi_atexit>
   d524a:	bf00      	nop
   d524c:	2003e318 	.word	0x2003e318
   d5250:	2003e308 	.word	0x2003e308
   d5254:	2003e210 	.word	0x2003e210
   d5258:	2003e2ec 	.word	0x2003e2ec
   d525c:	000d42ed 	.word	0x000d42ed
   d5260:	2003e2e4 	.word	0x2003e2e4
   d5264:	2003e31c 	.word	0x2003e31c
   d5268:	000d42b7 	.word	0x000d42b7
   d526c:	2003e30c 	.word	0x2003e30c
   d5270:	2003e328 	.word	0x2003e328
   d5274:	000d42c5 	.word	0x000d42c5
   d5278:	2003e2f8 	.word	0x2003e2f8
   d527c:	000d628b 	.word	0x000d628b
   d5280:	000d91f9 	.word	0x000d91f9
   d5284:	2003e214 	.word	0x2003e214
   d5288:	000d5c1d 	.word	0x000d5c1d
   d528c:	000d5869 	.word	0x000d5869

000d5290 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <netdb_freeaddrinfo+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	689b      	ldr	r3, [r3, #8]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	00030268 	.word	0x00030268

000d52a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <netdb_getaddrinfo+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	68db      	ldr	r3, [r3, #12]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	00030268 	.word	0x00030268

000d52b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <HAL_Pin_Map+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	681b      	ldr	r3, [r3, #0]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003022c 	.word	0x0003022c

000d52c0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <HAL_Validate_Pin_Function+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	685b      	ldr	r3, [r3, #4]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003022c 	.word	0x0003022c

000d52d0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_Pin_Mode+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	689b      	ldr	r3, [r3, #8]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003022c 	.word	0x0003022c

000d52e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_Get_Pin_Mode+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	68db      	ldr	r3, [r3, #12]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003022c 	.word	0x0003022c

000d52f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_GPIO_Write+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	691b      	ldr	r3, [r3, #16]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	0003022c 	.word	0x0003022c

000d5300 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_ADC_Read+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	0003022c 	.word	0x0003022c

000d5310 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_Pulse_In+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	0003022c 	.word	0x0003022c

000d5320 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_SPI_Init+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	69db      	ldr	r3, [r3, #28]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030230 	.word	0x00030230

000d5330 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_SPI_Is_Enabled+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	6a1b      	ldr	r3, [r3, #32]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030230 	.word	0x00030230

000d5340 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_RNG_GetRandomNumber+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	685b      	ldr	r3, [r3, #4]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030218 	.word	0x00030218

000d5350 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <HAL_Delay_Microseconds+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	68db      	ldr	r3, [r3, #12]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030218 	.word	0x00030218

000d5360 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	695b      	ldr	r3, [r3, #20]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030218 	.word	0x00030218

000d5370 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <HAL_RTC_Get_UnixTime+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	69db      	ldr	r3, [r3, #28]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030218 	.word	0x00030218

000d5380 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <HAL_RTC_Time_Is_Valid+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030218 	.word	0x00030218

000d5390 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <HAL_Feature_Set+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030234 	.word	0x00030234

000d53a0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <os_thread_is_current+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030248 	.word	0x00030248

000d53b0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <os_thread_join+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	691b      	ldr	r3, [r3, #16]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030248 	.word	0x00030248

000d53c0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <os_thread_cleanup+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	695b      	ldr	r3, [r3, #20]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030248 	.word	0x00030248

000d53d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <os_mutex_create+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030248 	.word	0x00030248

000d53e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <os_mutex_recursive_create+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030248 	.word	0x00030248

000d53f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <inet_inet_ntop+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	695b      	ldr	r3, [r3, #20]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030264 	.word	0x00030264

000d5400 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <HAL_USART_Init+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	681b      	ldr	r3, [r3, #0]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	0003023c 	.word	0x0003023c

000d5410 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <HAL_USART_Write_Data+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	68db      	ldr	r3, [r3, #12]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	0003023c 	.word	0x0003023c

000d5420 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <HAL_USART_Available_Data+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	691b      	ldr	r3, [r3, #16]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	0003023c 	.word	0x0003023c

000d5430 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <HAL_USART_Read_Data+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	695b      	ldr	r3, [r3, #20]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	0003023c 	.word	0x0003023c

000d5440 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <HAL_USART_Peek_Data+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	699b      	ldr	r3, [r3, #24]
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	0003023c 	.word	0x0003023c

000d5450 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <HAL_USART_Flush_Data+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	69db      	ldr	r3, [r3, #28]
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	0003023c 	.word	0x0003023c

000d5460 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <HAL_USART_Is_Enabled+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	6a1b      	ldr	r3, [r3, #32]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	0003023c 	.word	0x0003023c

000d5470 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <HAL_USART_Available_Data_For_Write+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	0003023c 	.word	0x0003023c

000d5480 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <HAL_USART_BeginConfig+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	0003023c 	.word	0x0003023c

000d5490 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <HAL_I2C_Begin+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	68db      	ldr	r3, [r3, #12]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030228 	.word	0x00030228

000d54a0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <HAL_I2C_Request_Data+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	695b      	ldr	r3, [r3, #20]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030228 	.word	0x00030228

000d54b0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <HAL_I2C_Begin_Transmission+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	699b      	ldr	r3, [r3, #24]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030228 	.word	0x00030228

000d54c0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <HAL_I2C_End_Transmission+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	69db      	ldr	r3, [r3, #28]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030228 	.word	0x00030228

000d54d0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <HAL_I2C_Write_Data+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6a1b      	ldr	r3, [r3, #32]
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030228 	.word	0x00030228

000d54e0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <HAL_I2C_Available_Data+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030228 	.word	0x00030228

000d54f0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <HAL_I2C_Read_Data+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030228 	.word	0x00030228

000d5500 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <HAL_I2C_Peek_Data+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	00030228 	.word	0x00030228

000d5510 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <HAL_I2C_Flush_Data+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	00030228 	.word	0x00030228

000d5520 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <HAL_I2C_Is_Enabled+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	00030228 	.word	0x00030228

000d5530 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <HAL_I2C_Init+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	00030228 	.word	0x00030228

000d5540 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <HAL_I2C_Acquire+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	00030228 	.word	0x00030228

000d5550 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <HAL_I2C_Release+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	00030228 	.word	0x00030228

000d5560 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <HAL_USB_USART_Init+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	681b      	ldr	r3, [r3, #0]
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	0003024c 	.word	0x0003024c

000d5570 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <HAL_USB_USART_Begin+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	685b      	ldr	r3, [r3, #4]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	0003024c 	.word	0x0003024c

000d5580 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <HAL_USB_USART_Available_Data+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	691b      	ldr	r3, [r3, #16]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	0003024c 	.word	0x0003024c

000d5590 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	695b      	ldr	r3, [r3, #20]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	0003024c 	.word	0x0003024c

000d55a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <HAL_USB_USART_Receive_Data+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	699b      	ldr	r3, [r3, #24]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	0003024c 	.word	0x0003024c

000d55b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <HAL_USB_USART_Send_Data+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	69db      	ldr	r3, [r3, #28]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	0003024c 	.word	0x0003024c

000d55c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <HAL_USB_USART_Flush_Data+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	6a1b      	ldr	r3, [r3, #32]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	0003024c 	.word	0x0003024c

000d55d0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <system_mode+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	681b      	ldr	r3, [r3, #0]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	00030220 	.word	0x00030220

000d55e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <set_system_mode+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	685b      	ldr	r3, [r3, #4]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	00030220 	.word	0x00030220

000d55f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <system_delay_ms+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	695b      	ldr	r3, [r3, #20]
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	00030220 	.word	0x00030220

000d5600 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <system_thread_set_state+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	00030220 	.word	0x00030220

000d5610 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <application_thread_current+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030220 	.word	0x00030220

000d5620 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <application_thread_invoke+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030220 	.word	0x00030220

000d5630 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <system_thread_get_state+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030220 	.word	0x00030220

000d5640 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b03      	ldr	r3, [pc, #12]	; (d5650 <system_ctrl_set_app_request_handler+0x10>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d564a:	9301      	str	r3, [sp, #4]
   d564c:	bd08      	pop	{r3, pc}
   d564e:	0000      	.short	0x0000
   d5650:	00030220 	.word	0x00030220

000d5654 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b03      	ldr	r3, [pc, #12]	; (d5664 <system_ctrl_set_result+0x10>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d565e:	9301      	str	r3, [sp, #4]
   d5660:	bd08      	pop	{r3, pc}
   d5662:	0000      	.short	0x0000
   d5664:	00030220 	.word	0x00030220

000d5668 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b03      	ldr	r3, [pc, #12]	; (d5678 <system_sleep_pins+0x10>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d5672:	9301      	str	r3, [sp, #4]
   d5674:	bd08      	pop	{r3, pc}
   d5676:	0000      	.short	0x0000
   d5678:	00030220 	.word	0x00030220

000d567c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <network_connect+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	685b      	ldr	r3, [r3, #4]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030240 	.word	0x00030240

000d568c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <network_connecting+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	689b      	ldr	r3, [r3, #8]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030240 	.word	0x00030240

000d569c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <network_disconnect+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	68db      	ldr	r3, [r3, #12]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030240 	.word	0x00030240

000d56ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <network_ready+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	691b      	ldr	r3, [r3, #16]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030240 	.word	0x00030240

000d56bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <network_on+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	695b      	ldr	r3, [r3, #20]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030240 	.word	0x00030240

000d56cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <network_off+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	699b      	ldr	r3, [r3, #24]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030240 	.word	0x00030240

000d56dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <network_listen+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	69db      	ldr	r3, [r3, #28]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030240 	.word	0x00030240

000d56ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <network_listening+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6a1b      	ldr	r3, [r3, #32]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030240 	.word	0x00030240

000d56fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <network_set_listen_timeout+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030240 	.word	0x00030240

000d570c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <network_get_listen_timeout+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030240 	.word	0x00030240

000d571c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <spark_process+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	689b      	ldr	r3, [r3, #8]
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030244 	.word	0x00030244

000d572c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <spark_cloud_flag_connect+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	68db      	ldr	r3, [r3, #12]
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030244 	.word	0x00030244

000d573c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <spark_cloud_flag_disconnect+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	691b      	ldr	r3, [r3, #16]
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030244 	.word	0x00030244

000d574c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <spark_cloud_flag_connected+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	695b      	ldr	r3, [r3, #20]
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030244 	.word	0x00030244

000d575c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <spark_send_event+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	6a1b      	ldr	r3, [r3, #32]
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030244 	.word	0x00030244

000d576c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <spark_sync_time+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030244 	.word	0x00030244

000d577c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <spark_sync_time_pending+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030244 	.word	0x00030244

000d578c <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <spark_set_connection_property+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030244 	.word	0x00030244

000d579c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030244 	.word	0x00030244

000d57ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <malloc+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	681b      	ldr	r3, [r3, #0]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	0003021c 	.word	0x0003021c

000d57bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <free+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	685b      	ldr	r3, [r3, #4]
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	0003021c 	.word	0x0003021c

000d57cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <realloc+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	689b      	ldr	r3, [r3, #8]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	0003021c 	.word	0x0003021c

000d57dc <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <siscanf+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	699b      	ldr	r3, [r3, #24]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	0003021c 	.word	0x0003021c

000d57ec <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <vsnprintf+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	0003021c 	.word	0x0003021c

000d57fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <abort+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	0003021c 	.word	0x0003021c

000d580c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <_malloc_r+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	0003021c 	.word	0x0003021c

000d581c <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
   d581c:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d581e:	f001 fd0d 	bl	d723c <_Z20__fetch_global_Wire1v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
   d5822:	f001 faf6 	bl	d6e12 <_ZN7TwoWire9isEnabledEv>
   d5826:	b918      	cbnz	r0, d5830 <_ZN4PMIC5beginEv+0x14>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5828:	f001 fd08 	bl	d723c <_Z20__fetch_global_Wire1v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
   d582c:	f001 fad2 	bl	d6dd4 <_ZN7TwoWire5beginEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5830:	f001 fd04 	bl	d723c <_Z20__fetch_global_Wire1v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
   d5834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
   d5838:	f001 baeb 	b.w	d6e12 <_ZN7TwoWire9isEnabledEv>

000d583c <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d583c:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d583e:	f001 fcfd 	bl	d723c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d5842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d5846:	f001 bae8 	b.w	d6e1a <_ZN7TwoWire4lockEv>

000d584a <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d584a:	b510      	push	{r4, lr}
   d584c:	4604      	mov	r4, r0
    lock_(_lock)
   d584e:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d5850:	b109      	cbz	r1, d5856 <_ZN4PMICC1Eb+0xc>
        lock();
   d5852:	f7ff fff3 	bl	d583c <_ZN4PMIC4lockEv>
    }
}
   d5856:	4620      	mov	r0, r4
   d5858:	bd10      	pop	{r4, pc}

000d585a <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d585a:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d585c:	f001 fcee 	bl	d723c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d5860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d5864:	f001 bae2 	b.w	d6e2c <_ZN7TwoWire6unlockEv>

000d5868 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d5868:	b510      	push	{r4, lr}
{
    if (lock_) {
   d586a:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d586c:	4604      	mov	r4, r0
{
    if (lock_) {
   d586e:	b10b      	cbz	r3, d5874 <_ZN4PMICD1Ev+0xc>
        unlock();
   d5870:	f7ff fff3 	bl	d585a <_ZN4PMIC6unlockEv>
    }
}
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}

000d5878 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5878:	b510      	push	{r4, lr}
   d587a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d587c:	6800      	ldr	r0, [r0, #0]
   d587e:	f7ff ffec 	bl	d585a <_ZN4PMIC6unlockEv>
   d5882:	4620      	mov	r0, r4
   d5884:	bd10      	pop	{r4, pc}

000d5886 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d5886:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5888:	ac02      	add	r4, sp, #8
   d588a:	460d      	mov	r5, r1
   d588c:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d5890:	f7ff ffd4 	bl	d583c <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5894:	f001 fcd2 	bl	d723c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d5898:	216b      	movs	r1, #107	; 0x6b
   d589a:	f001 fab3 	bl	d6e04 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d589e:	f001 fccd 	bl	d723c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d58a2:	6803      	ldr	r3, [r0, #0]
   d58a4:	4629      	mov	r1, r5
   d58a6:	689b      	ldr	r3, [r3, #8]
   d58a8:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d58aa:	f001 fcc7 	bl	d723c <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d58ae:	2101      	movs	r1, #1
   d58b0:	f001 faab 	bl	d6e0a <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d58b4:	f001 fcc2 	bl	d723c <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d58b8:	2301      	movs	r3, #1
   d58ba:	461a      	mov	r2, r3
   d58bc:	216b      	movs	r1, #107	; 0x6b
   d58be:	f001 fa98 	bl	d6df2 <_ZN7TwoWire11requestFromEiii>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d58c2:	f001 fcbb 	bl	d723c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d58c6:	6803      	ldr	r3, [r0, #0]
   d58c8:	695b      	ldr	r3, [r3, #20]
   d58ca:	4798      	blx	r3
   d58cc:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d58ce:	4620      	mov	r0, r4
   d58d0:	f7ff ffd2 	bl	d5878 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d58d4:	b2e8      	uxtb	r0, r5
   d58d6:	b003      	add	sp, #12
   d58d8:	bd30      	pop	{r4, r5, pc}

000d58da <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
   d58da:	2109      	movs	r1, #9
   d58dc:	f7ff bfd3 	b.w	d5886 <_ZN4PMIC12readRegisterEh>

000d58e0 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
   d58e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d58e2:	ac02      	add	r4, sp, #8
   d58e4:	4615      	mov	r5, r2
   d58e6:	460e      	mov	r6, r1
   d58e8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d58ec:	f7ff ffa6 	bl	d583c <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d58f0:	f001 fca4 	bl	d723c <_Z20__fetch_global_Wire1v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d58f4:	216b      	movs	r1, #107	; 0x6b
   d58f6:	f001 fa85 	bl	d6e04 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d58fa:	f001 fc9f 	bl	d723c <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
   d58fe:	6803      	ldr	r3, [r0, #0]
   d5900:	4631      	mov	r1, r6
   d5902:	689b      	ldr	r3, [r3, #8]
   d5904:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5906:	f001 fc99 	bl	d723c <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
   d590a:	6803      	ldr	r3, [r0, #0]
   d590c:	4629      	mov	r1, r5
   d590e:	689b      	ldr	r3, [r3, #8]
   d5910:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d5912:	f001 fc93 	bl	d723c <_Z20__fetch_global_Wire1v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
   d5916:	2101      	movs	r1, #1
   d5918:	f001 fa77 	bl	d6e0a <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
   d591c:	4620      	mov	r0, r4
   d591e:	f7ff ffab 	bl	d5878 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
   d5922:	b002      	add	sp, #8
   d5924:	bd70      	pop	{r4, r5, r6, pc}

000d5926 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
   d5926:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5928:	4604      	mov	r4, r0
   d592a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d592c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d592e:	f7ff ff85 	bl	d583c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d5932:	2100      	movs	r1, #0
   d5934:	4620      	mov	r0, r4
   d5936:	f7ff ffa6 	bl	d5886 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d593a:	f241 1358 	movw	r3, #4440	; 0x1158
   d593e:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
   d5940:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
   d5944:	d05b      	beq.n	d59fe <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
   d5946:	d820      	bhi.n	d598a <_ZN4PMIC20setInputVoltageLimitEt+0x64>
   d5948:	f241 0318 	movw	r3, #4120	; 0x1018
   d594c:	429d      	cmp	r5, r3
   d594e:	d04d      	beq.n	d59ec <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
   d5950:	d80c      	bhi.n	d596c <_ZN4PMIC20setInputVoltageLimitEt+0x46>
   d5952:	f640 7378 	movw	r3, #3960	; 0xf78
   d5956:	429d      	cmp	r5, r3
   d5958:	d042      	beq.n	d59e0 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
   d595a:	f640 73c8 	movw	r3, #4040	; 0xfc8
   d595e:	429d      	cmp	r5, r3
   d5960:	d041      	beq.n	d59e6 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
   d5962:	f640 7328 	movw	r3, #3880	; 0xf28
   d5966:	429d      	cmp	r5, r3
   d5968:	d160      	bne.n	d5a2c <_ZN4PMIC20setInputVoltageLimitEt+0x106>
   d596a:	e059      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
   d596c:	f241 03b8 	movw	r3, #4280	; 0x10b8
   d5970:	429d      	cmp	r5, r3
   d5972:	d03e      	beq.n	d59f2 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
   d5974:	f241 1308 	movw	r3, #4360	; 0x1108
   d5978:	429d      	cmp	r5, r3
   d597a:	d03d      	beq.n	d59f8 <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
   d597c:	f241 0368 	movw	r3, #4200	; 0x1068
   d5980:	429d      	cmp	r5, r3
   d5982:	d153      	bne.n	d5a2c <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
   d5984:	f042 0220 	orr.w	r2, r2, #32
   d5988:	e04a      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d598a:	f241 2398 	movw	r3, #4760	; 0x1298
   d598e:	429d      	cmp	r5, r3
   d5990:	d03e      	beq.n	d5a10 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
   d5992:	d80e      	bhi.n	d59b2 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
   d5994:	f241 13f8 	movw	r3, #4600	; 0x11f8
   d5998:	429d      	cmp	r5, r3
   d599a:	d033      	beq.n	d5a04 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
   d599c:	f241 2348 	movw	r3, #4680	; 0x1248
   d59a0:	429d      	cmp	r5, r3
   d59a2:	d032      	beq.n	d5a0a <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
   d59a4:	f241 13a8 	movw	r3, #4520	; 0x11a8
   d59a8:	429d      	cmp	r5, r3
   d59aa:	d13f      	bne.n	d5a2c <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
   d59ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   d59b0:	e036      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d59b2:	f241 3338 	movw	r3, #4920	; 0x1338
   d59b6:	429d      	cmp	r5, r3
   d59b8:	d02d      	beq.n	d5a16 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
   d59ba:	d806      	bhi.n	d59ca <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
   d59bc:	f241 23e8 	movw	r3, #4840	; 0x12e8
   d59c0:	429d      	cmp	r5, r3
   d59c2:	d133      	bne.n	d5a2c <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
   d59c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   d59c8:	e02a      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
   d59ca:	f241 3388 	movw	r3, #5000	; 0x1388
   d59ce:	429d      	cmp	r5, r3
   d59d0:	d024      	beq.n	d5a1c <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
   d59d2:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d59d6:	429d      	cmp	r5, r3
   d59d8:	d128      	bne.n	d5a2c <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
   d59da:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   d59de:	e01f      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
   d59e0:	f042 0208 	orr.w	r2, r2, #8
   d59e4:	e01c      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
   d59e6:	f042 0210 	orr.w	r2, r2, #16
   d59ea:	e019      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
   d59ec:	f042 0218 	orr.w	r2, r2, #24
   d59f0:	e016      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
   d59f2:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   d59f6:	e013      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
   d59f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   d59fc:	e010      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
   d59fe:	f042 0238 	orr.w	r2, r2, #56	; 0x38
   d5a02:	e00d      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
   d5a04:	f042 0248 	orr.w	r2, r2, #72	; 0x48
   d5a08:	e00a      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
   d5a0a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   d5a0e:	e007      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
   d5a10:	f042 0258 	orr.w	r2, r2, #88	; 0x58
   d5a14:	e004      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
   d5a16:	f042 0268 	orr.w	r2, r2, #104	; 0x68
   d5a1a:	e001      	b.n	d5a20 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
   d5a1c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d5a20:	4620      	mov	r0, r4
   d5a22:	2100      	movs	r1, #0
   d5a24:	f7ff ff5c 	bl	d58e0 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
   d5a28:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
   d5a2a:	e000      	b.n	d5a2e <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
   d5a2c:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
   d5a2e:	a801      	add	r0, sp, #4
   d5a30:	f7ff ff22 	bl	d5878 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	b003      	add	sp, #12
   d5a38:	bd30      	pop	{r4, r5, pc}

000d5a3a <_ZN4PMIC10enableBuckEv>:
 * Function Name  : enableBuck
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
   d5a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a3c:	ac02      	add	r4, sp, #8
   d5a3e:	4605      	mov	r5, r0
   d5a40:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d5a44:	f7ff fefa 	bl	d583c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
   d5a48:	2100      	movs	r1, #0
   d5a4a:	4628      	mov	r0, r5
   d5a4c:	f7ff ff1b 	bl	d5886 <_ZN4PMIC12readRegisterEh>
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
   d5a50:	2100      	movs	r1, #0
   d5a52:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5a56:	4628      	mov	r0, r5
   d5a58:	f7ff ff42 	bl	d58e0 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          : NONE
 * Return         :
 *******************************************************************************/
bool PMIC::enableBuck(void) {
    std::lock_guard<PMIC> l(*this);
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	f7ff ff0b 	bl	d5878 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    writeRegister(INPUT_SOURCE_REGISTER, (DATA & 0b01111111));
    return 1;
}
   d5a62:	2001      	movs	r0, #1
   d5a64:	b003      	add	sp, #12
   d5a66:	bd30      	pop	{r4, r5, pc}

000d5a68 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
   d5a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5a6a:	460c      	mov	r4, r1
   d5a6c:	4605      	mov	r5, r0
   d5a6e:	4617      	mov	r7, r2
   d5a70:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a72:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a74:	f7ff fee2 	bl	d583c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
   d5a78:	2c00      	cmp	r4, #0
   d5a7a:	bf0c      	ite	eq
   d5a7c:	2400      	moveq	r4, #0
   d5a7e:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
   d5a80:	b117      	cbz	r7, d5a88 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
   d5a82:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   d5a86:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
   d5a88:	b10e      	cbz	r6, d5a8e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
   d5a8a:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
   d5a8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d5a92:	b10b      	cbz	r3, d5a98 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
   d5a94:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
   d5a98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d5a9c:	b10b      	cbz	r3, d5aa2 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
   d5a9e:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
   d5aa2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5aa6:	b10b      	cbz	r3, d5aac <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
   d5aa8:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d5aac:	2102      	movs	r1, #2
   d5aae:	4628      	mov	r0, r5
   d5ab0:	f7ff fee9 	bl	d5886 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
   d5ab4:	f000 0201 	and.w	r2, r0, #1
   d5ab8:	4322      	orrs	r2, r4
   d5aba:	2102      	movs	r1, #2
   d5abc:	4628      	mov	r0, r5
   d5abe:	f7ff ff0f 	bl	d58e0 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
   d5ac2:	a801      	add	r0, sp, #4
   d5ac4:	f7ff fed8 	bl	d5878 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
   d5ac8:	2001      	movs	r0, #1
   d5aca:	b003      	add	sp, #12
   d5acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ace <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ace:	2200      	movs	r2, #0
   d5ad0:	4611      	mov	r1, r2
   d5ad2:	6840      	ldr	r0, [r0, #4]
   d5ad4:	f7ff be0a 	b.w	d56ec <network_listening>

000d5ad8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ad8:	2200      	movs	r2, #0
   d5ada:	4611      	mov	r1, r2
   d5adc:	6840      	ldr	r0, [r0, #4]
   d5ade:	f7ff be15 	b.w	d570c <network_get_listen_timeout>

000d5ae2 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	6840      	ldr	r0, [r0, #4]
   d5ae6:	f7ff be09 	b.w	d56fc <network_set_listen_timeout>

000d5aea <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5aea:	2200      	movs	r2, #0
   d5aec:	f081 0101 	eor.w	r1, r1, #1
   d5af0:	6840      	ldr	r0, [r0, #4]
   d5af2:	f7ff bdf3 	b.w	d56dc <network_listen>

000d5af6 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5af6:	2300      	movs	r3, #0
   d5af8:	461a      	mov	r2, r3
   d5afa:	4619      	mov	r1, r3
   d5afc:	6840      	ldr	r0, [r0, #4]
   d5afe:	f7ff bde5 	b.w	d56cc <network_off>

000d5b02 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b02:	2300      	movs	r3, #0
   d5b04:	461a      	mov	r2, r3
   d5b06:	4619      	mov	r1, r3
   d5b08:	6840      	ldr	r0, [r0, #4]
   d5b0a:	f7ff bdd7 	b.w	d56bc <network_on>

000d5b0e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b0e:	2200      	movs	r2, #0
   d5b10:	4611      	mov	r1, r2
   d5b12:	6840      	ldr	r0, [r0, #4]
   d5b14:	f7ff bdca 	b.w	d56ac <network_ready>

000d5b18 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b18:	2200      	movs	r2, #0
   d5b1a:	4611      	mov	r1, r2
   d5b1c:	6840      	ldr	r0, [r0, #4]
   d5b1e:	f7ff bdb5 	b.w	d568c <network_connecting>

000d5b22 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b22:	2200      	movs	r2, #0
   d5b24:	2102      	movs	r1, #2
   d5b26:	6840      	ldr	r0, [r0, #4]
   d5b28:	f7ff bdb8 	b.w	d569c <network_disconnect>

000d5b2c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b2c:	2300      	movs	r3, #0
   d5b2e:	461a      	mov	r2, r3
   d5b30:	6840      	ldr	r0, [r0, #4]
   d5b32:	f7ff bda3 	b.w	d567c <network_connect>
	...

000d5b38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b38:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b3a:	2203      	movs	r2, #3
   d5b3c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b3e:	4a02      	ldr	r2, [pc, #8]	; (d5b48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b40:	601a      	str	r2, [r3, #0]
   d5b42:	4770      	bx	lr
   d5b44:	2003e330 	.word	0x2003e330
   d5b48:	000d920c 	.word	0x000d920c

000d5b4c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5b4c:	4770      	bx	lr

000d5b4e <_ZN8SPIClassD0Ev>:
   d5b4e:	b510      	push	{r4, lr}
   d5b50:	2110      	movs	r1, #16
   d5b52:	4604      	mov	r4, r0
   d5b54:	f001 fb97 	bl	d7286 <_ZdlPvj>
   d5b58:	4620      	mov	r0, r4
   d5b5a:	bd10      	pop	{r4, pc}

000d5b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5b5c:	b570      	push	{r4, r5, r6, lr}
   d5b5e:	4b08      	ldr	r3, [pc, #32]	; (d5b80 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5b60:	6003      	str	r3, [r0, #0]
   d5b62:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5b64:	2500      	movs	r5, #0
   d5b66:	460e      	mov	r6, r1
   d5b68:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5b6c:	f7ff fc30 	bl	d53d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5b70:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5b72:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5b74:	f7ff fbd4 	bl	d5320 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5b78:	60a5      	str	r5, [r4, #8]
}
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd70      	pop	{r4, r5, r6, pc}
   d5b7e:	bf00      	nop
   d5b80:	000d9240 	.word	0x000d9240

000d5b84 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5b84:	7900      	ldrb	r0, [r0, #4]
   d5b86:	f7ff bbd3 	b.w	d5330 <HAL_SPI_Is_Enabled>

000d5b8a <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5b8a:	b510      	push	{r4, lr}
   d5b8c:	2400      	movs	r4, #0
   d5b8e:	7004      	strb	r4, [r0, #0]
   d5b90:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d5b92:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5b94:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d5b98:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d5b9a:	dd07      	ble.n	d5bac <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d5b9c:	3901      	subs	r1, #1
   d5b9e:	4299      	cmp	r1, r3
   d5ba0:	d209      	bcs.n	d5bb6 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d5ba2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5ba6:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d5ba8:	2301      	movs	r3, #1
   d5baa:	e001      	b.n	d5bb0 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d5bac:	d102      	bne.n	d5bb4 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d5bae:	2302      	movs	r3, #2
   d5bb0:	7003      	strb	r3, [r0, #0]
   d5bb2:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5bb4:	8041      	strh	r1, [r0, #2]
    }
}
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bb8:	b570      	push	{r4, r5, r6, lr}
   d5bba:	b086      	sub	sp, #24
   d5bbc:	4616      	mov	r6, r2
   d5bbe:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bc0:	2300      	movs	r3, #0
   d5bc2:	9302      	str	r3, [sp, #8]
   d5bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5bc6:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bc8:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5bcc:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5bce:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5bd2:	4631      	mov	r1, r6
   d5bd4:	4628      	mov	r0, r5
   d5bd6:	f7ff fd47 	bl	d5668 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d5bda:	4633      	mov	r3, r6
   d5bdc:	462a      	mov	r2, r5
   d5bde:	4601      	mov	r1, r0
   d5be0:	a804      	add	r0, sp, #16
   d5be2:	f7ff ffd2 	bl	d5b8a <_ZN11SleepResultC1EiPKtj>
   d5be6:	4b06      	ldr	r3, [pc, #24]	; (d5c00 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d5be8:	9804      	ldr	r0, [sp, #16]
   d5bea:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d5bee:	6018      	str	r0, [r3, #0]
   d5bf0:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	889b      	ldrh	r3, [r3, #4]
   d5bf6:	6022      	str	r2, [r4, #0]
}
   d5bf8:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d5bfa:	80a3      	strh	r3, [r4, #4]
}
   d5bfc:	b006      	add	sp, #24
   d5bfe:	bd70      	pop	{r4, r5, r6, pc}
   d5c00:	2003e338 	.word	0x2003e338

000d5c04 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5c04:	4b04      	ldr	r3, [pc, #16]	; (d5c18 <_GLOBAL__sub_I_System+0x14>)
   d5c06:	2000      	movs	r0, #0
   d5c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5c0c:	7018      	strb	r0, [r3, #0]
   d5c0e:	8058      	strh	r0, [r3, #2]
   d5c10:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c12:	f7ff bce5 	b.w	d55e0 <set_system_mode>
   d5c16:	bf00      	nop
   d5c18:	2003e338 	.word	0x2003e338

000d5c1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
{
	free(buffer);
   d5c20:	6800      	ldr	r0, [r0, #0]
   d5c22:	f7ff fdcb 	bl	d57bc <free>
}
   d5c26:	4620      	mov	r0, r4
   d5c28:	bd10      	pop	{r4, pc}

000d5c2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5c2a:	b510      	push	{r4, lr}
   d5c2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5c2e:	6800      	ldr	r0, [r0, #0]
   d5c30:	b108      	cbz	r0, d5c36 <_ZN6String10invalidateEv+0xc>
   d5c32:	f7ff fdc3 	bl	d57bc <free>
	buffer = NULL;
   d5c36:	2300      	movs	r3, #0
   d5c38:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5c3a:	60a3      	str	r3, [r4, #8]
   d5c3c:	6063      	str	r3, [r4, #4]
   d5c3e:	bd10      	pop	{r4, pc}

000d5c40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5c40:	b538      	push	{r3, r4, r5, lr}
   d5c42:	4604      	mov	r4, r0
   d5c44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5c46:	6800      	ldr	r0, [r0, #0]
   d5c48:	3101      	adds	r1, #1
   d5c4a:	f7ff fdbf 	bl	d57cc <realloc>
	if (newbuffer) {
   d5c4e:	b110      	cbz	r0, d5c56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5c50:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5c54:	2001      	movs	r0, #1
	}
	return 0;
}
   d5c56:	bd38      	pop	{r3, r4, r5, pc}

000d5c58 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5c5a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5c5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5c5e:	b113      	cbz	r3, d5c66 <_ZN6String7reserveEj+0xe>
   d5c60:	6843      	ldr	r3, [r0, #4]
   d5c62:	428b      	cmp	r3, r1
   d5c64:	d207      	bcs.n	d5c76 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5c66:	4620      	mov	r0, r4
   d5c68:	f7ff ffea 	bl	d5c40 <_ZN6String12changeBufferEj>
   d5c6c:	b120      	cbz	r0, d5c78 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5c6e:	68a3      	ldr	r3, [r4, #8]
   d5c70:	b90b      	cbnz	r3, d5c76 <_ZN6String7reserveEj+0x1e>
   d5c72:	6822      	ldr	r2, [r4, #0]
   d5c74:	7013      	strb	r3, [r2, #0]
   d5c76:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5c78:	bd10      	pop	{r4, pc}

000d5c7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c7a:	b570      	push	{r4, r5, r6, lr}
   d5c7c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5c7e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5c80:	4604      	mov	r4, r0
   d5c82:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5c84:	f7ff ffe8 	bl	d5c58 <_ZN6String7reserveEj>
   d5c88:	b918      	cbnz	r0, d5c92 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	f7ff ffcd 	bl	d5c2a <_ZN6String10invalidateEv>
		return *this;
   d5c90:	e009      	b.n	d5ca6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5c92:	462a      	mov	r2, r5
   d5c94:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5c96:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5c98:	6820      	ldr	r0, [r4, #0]
   d5c9a:	f002 fcd3 	bl	d8644 <memcpy>
	buffer[len] = 0;
   d5c9e:	6822      	ldr	r2, [r4, #0]
   d5ca0:	68a3      	ldr	r3, [r4, #8]
   d5ca2:	2100      	movs	r1, #0
   d5ca4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5ca6:	4620      	mov	r0, r4
   d5ca8:	bd70      	pop	{r4, r5, r6, pc}

000d5caa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5caa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cac:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5cae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cb0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5cb2:	6043      	str	r3, [r0, #4]
	len = 0;
   d5cb4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5cb6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5cb8:	460d      	mov	r5, r1
   d5cba:	b139      	cbz	r1, d5ccc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5cbc:	4608      	mov	r0, r1
   d5cbe:	f002 fd44 	bl	d874a <strlen>
   d5cc2:	4629      	mov	r1, r5
   d5cc4:	4602      	mov	r2, r0
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	f7ff ffd7 	bl	d5c7a <_ZN6String4copyEPKcj>
}
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd38      	pop	{r3, r4, r5, pc}

000d5cd0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5cd0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5cd2:	b510      	push	{r4, lr}
   d5cd4:	460b      	mov	r3, r1
   d5cd6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5cd8:	d007      	beq.n	d5cea <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5cda:	6809      	ldr	r1, [r1, #0]
   d5cdc:	b119      	cbz	r1, d5ce6 <_ZN6StringaSERKS_+0x16>
   d5cde:	689a      	ldr	r2, [r3, #8]
   d5ce0:	f7ff ffcb 	bl	d5c7a <_ZN6String4copyEPKcj>
   d5ce4:	e001      	b.n	d5cea <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5ce6:	f7ff ffa0 	bl	d5c2a <_ZN6String10invalidateEv>

	return *this;
}
   d5cea:	4620      	mov	r0, r4
   d5cec:	bd10      	pop	{r4, pc}

000d5cee <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cee:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cf0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5cf2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5cf4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5cf6:	6043      	str	r3, [r0, #4]
	len = 0;
   d5cf8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5cfa:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5cfc:	f7ff ffe8 	bl	d5cd0 <_ZN6StringaSERKS_>
}
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5d04:	b570      	push	{r4, r5, r6, lr}
   d5d06:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5d08:	b19a      	cbz	r2, d5d32 <_ZNK6String8getBytesEPhjj+0x2e>
   d5d0a:	b191      	cbz	r1, d5d32 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d5d0c:	6885      	ldr	r5, [r0, #8]
   d5d0e:	429d      	cmp	r5, r3
   d5d10:	d802      	bhi.n	d5d18 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5d12:	2300      	movs	r3, #0
   d5d14:	700b      	strb	r3, [r1, #0]
		return;
   d5d16:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d5d18:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d5d1a:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d5d1c:	6801      	ldr	r1, [r0, #0]
   d5d1e:	42ac      	cmp	r4, r5
   d5d20:	bf28      	it	cs
   d5d22:	462c      	movcs	r4, r5
   d5d24:	4419      	add	r1, r3
   d5d26:	4622      	mov	r2, r4
   d5d28:	4630      	mov	r0, r6
   d5d2a:	f002 fd2b 	bl	d8784 <strncpy>
	buf[n] = 0;
   d5d2e:	2300      	movs	r3, #0
   d5d30:	5533      	strb	r3, [r6, r4]
   d5d32:	bd70      	pop	{r4, r5, r6, pc}

000d5d34 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5d34:	b40e      	push	{r1, r2, r3}
   d5d36:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d5d38:	ac09      	add	r4, sp, #36	; 0x24
   d5d3a:	4605      	mov	r5, r0
   d5d3c:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d5d40:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5d42:	4623      	mov	r3, r4
   d5d44:	463a      	mov	r2, r7
   d5d46:	2105      	movs	r1, #5
   d5d48:	a802      	add	r0, sp, #8
   d5d4a:	f7ff fd4f 	bl	d57ec <vsnprintf>
    va_end(marker);

    String result;
   d5d4e:	490c      	ldr	r1, [pc, #48]	; (d5d80 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5d50:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d5d52:	4628      	mov	r0, r5
   d5d54:	f7ff ffa9 	bl	d5caa <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d5d58:	4631      	mov	r1, r6
   d5d5a:	4628      	mov	r0, r5
   d5d5c:	f7ff ff7c 	bl	d5c58 <_ZN6String7reserveEj>
    if (result.buffer) {
   d5d60:	6828      	ldr	r0, [r5, #0]
   d5d62:	b130      	cbz	r0, d5d72 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5d64:	4623      	mov	r3, r4
   d5d66:	463a      	mov	r2, r7
   d5d68:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d5d6a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5d6c:	f7ff fd3e 	bl	d57ec <vsnprintf>
        va_end(marker);
        result.len = n;
   d5d70:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d5d72:	4628      	mov	r0, r5
   d5d74:	b004      	add	sp, #16
   d5d76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5d7a:	b003      	add	sp, #12
   d5d7c:	4770      	bx	lr
   d5d7e:	bf00      	nop
   d5d80:	000d92fd 	.word	0x000d92fd

000d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5d84:	680b      	ldr	r3, [r1, #0]
   d5d86:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5d88:	b113      	cbz	r3, d5d90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5d8a:	685a      	ldr	r2, [r3, #4]
   d5d8c:	3201      	adds	r2, #1
   d5d8e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5d90:	4770      	bx	lr
	...

000d5d94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d94:	4802      	ldr	r0, [pc, #8]	; (d5da0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5d96:	2300      	movs	r3, #0
   d5d98:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5d9a:	f7ff bb21 	b.w	d53e0 <os_mutex_recursive_create>
   d5d9e:	bf00      	nop
   d5da0:	2003e340 	.word	0x2003e340

000d5da4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5da6:	4606      	mov	r6, r0
   d5da8:	460d      	mov	r5, r1
   d5daa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5dac:	2400      	movs	r4, #0
  while (size--) {
   d5dae:	42bd      	cmp	r5, r7
   d5db0:	d00c      	beq.n	d5dcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5db2:	6833      	ldr	r3, [r6, #0]
   d5db4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5db8:	689b      	ldr	r3, [r3, #8]
   d5dba:	4630      	mov	r0, r6
   d5dbc:	4798      	blx	r3
     if (chunk>=0)
   d5dbe:	2800      	cmp	r0, #0
   d5dc0:	db01      	blt.n	d5dc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5dc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5dc4:	e7f3      	b.n	d5dae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5dc6:	2c00      	cmp	r4, #0
   d5dc8:	bf08      	it	eq
   d5dca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5dcc:	4620      	mov	r0, r4
   d5dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5dd0:	b570      	push	{r4, r5, r6, lr}
   d5dd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5dd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5dd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5dd8:	b149      	cbz	r1, d5dee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5dda:	f002 fcb6 	bl	d874a <strlen>
   d5dde:	682b      	ldr	r3, [r5, #0]
   d5de0:	4602      	mov	r2, r0
   d5de2:	4621      	mov	r1, r4
   d5de4:	4628      	mov	r0, r5
   d5de6:	68db      	ldr	r3, [r3, #12]
    }
   d5de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5dec:	4718      	bx	r3
    }
   d5dee:	bd70      	pop	{r4, r5, r6, pc}

000d5df0 <_ZN5Print5printEPKc>:
   d5df0:	b508      	push	{r3, lr}
   d5df2:	f7ff ffed 	bl	d5dd0 <_ZN5Print5writeEPKc>
   d5df6:	bd08      	pop	{r3, pc}

000d5df8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5df8:	6803      	ldr	r3, [r0, #0]
   d5dfa:	689b      	ldr	r3, [r3, #8]
   d5dfc:	4718      	bx	r3

000d5dfe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5dfe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e00:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e02:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e04:	f7ff fff8 	bl	d5df8 <_ZN5Print5printEc>
  n += print('\n');
   d5e08:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5e0a:	4604      	mov	r4, r0
  n += print('\n');
   d5e0c:	4628      	mov	r0, r5
   d5e0e:	f7ff fff3 	bl	d5df8 <_ZN5Print5printEc>
  return n;
}
   d5e12:	4420      	add	r0, r4
   d5e14:	bd38      	pop	{r3, r4, r5, pc}

000d5e16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5e16:	b538      	push	{r3, r4, r5, lr}
   d5e18:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5e1a:	f7ff ffd9 	bl	d5dd0 <_ZN5Print5writeEPKc>
   d5e1e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5e20:	4628      	mov	r0, r5
   d5e22:	f7ff ffec 	bl	d5dfe <_ZN5Print7printlnEv>
  return n;
}
   d5e26:	4420      	add	r0, r4
   d5e28:	bd38      	pop	{r3, r4, r5, pc}

000d5e2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e2a:	b530      	push	{r4, r5, lr}
   d5e2c:	b08b      	sub	sp, #44	; 0x2c
   d5e2e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e30:	2100      	movs	r1, #0
   d5e32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e36:	2a01      	cmp	r2, #1
   d5e38:	bf98      	it	ls
   d5e3a:	220a      	movls	r2, #10
   d5e3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5e40:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5e44:	fb05 3312 	mls	r3, r5, r2, r3
   d5e48:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e4c:	2b09      	cmp	r3, #9
   d5e4e:	bf94      	ite	ls
   d5e50:	3330      	addls	r3, #48	; 0x30
   d5e52:	3337      	addhi	r3, #55	; 0x37
   d5e54:	b2db      	uxtb	r3, r3
   d5e56:	4621      	mov	r1, r4
   d5e58:	f804 3901 	strb.w	r3, [r4], #-1
   d5e5c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5e5e:	2d00      	cmp	r5, #0
   d5e60:	d1ee      	bne.n	d5e40 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5e62:	f7ff ffb5 	bl	d5dd0 <_ZN5Print5writeEPKc>
}
   d5e66:	b00b      	add	sp, #44	; 0x2c
   d5e68:	bd30      	pop	{r4, r5, pc}

000d5e6a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5e6a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5e6c:	b92a      	cbnz	r2, d5e7a <_ZN5Print5printEmi+0x10>
   d5e6e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5e70:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5e74:	689b      	ldr	r3, [r3, #8]
   d5e76:	b2c9      	uxtb	r1, r1
   d5e78:	4718      	bx	r3
  else return printNumber(n, base);
   d5e7a:	b2d2      	uxtb	r2, r2
}
   d5e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5e80:	f7ff bfd3 	b.w	d5e2a <_ZN5Print11printNumberEmh>

000d5e84 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5e84:	f7ff bff1 	b.w	d5e6a <_ZN5Print5printEmi>

000d5e88 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d5e88:	b538      	push	{r3, r4, r5, lr}
   d5e8a:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5e8c:	f7ff ffed 	bl	d5e6a <_ZN5Print5printEmi>
   d5e90:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d5e92:	4628      	mov	r0, r5
   d5e94:	f7ff ffb3 	bl	d5dfe <_ZN5Print7printlnEv>
  return n;
}
   d5e98:	4420      	add	r0, r4
   d5e9a:	bd38      	pop	{r3, r4, r5, pc}

000d5e9c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ea0:	4607      	mov	r7, r0
   d5ea2:	460e      	mov	r6, r1
  if (base == 0) {
   d5ea4:	4615      	mov	r5, r2
   d5ea6:	b92a      	cbnz	r2, d5eb4 <_ZN5Print5printEli+0x18>
    return write(n);
   d5ea8:	6803      	ldr	r3, [r0, #0]
   d5eaa:	b2c9      	uxtb	r1, r1
   d5eac:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5eb2:	4718      	bx	r3
  } else if (base == 10) {
   d5eb4:	2a0a      	cmp	r2, #10
   d5eb6:	d102      	bne.n	d5ebe <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5eb8:	2900      	cmp	r1, #0
   d5eba:	da01      	bge.n	d5ec0 <_ZN5Print5printEli+0x24>
   d5ebc:	e004      	b.n	d5ec8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5ebe:	b2d2      	uxtb	r2, r2
  }
}
   d5ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5ec4:	f7ff bfb1 	b.w	d5e2a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5ec8:	212d      	movs	r1, #45	; 0x2d
   d5eca:	f7ff ff95 	bl	d5df8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5ece:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5ed0:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5ed2:	4271      	negs	r1, r6
   d5ed4:	4638      	mov	r0, r7
   d5ed6:	f7ff ffa8 	bl	d5e2a <_ZN5Print11printNumberEmh>
   d5eda:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ee0 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d5ee0:	b538      	push	{r3, r4, r5, lr}
   d5ee2:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5ee4:	f7ff ffda 	bl	d5e9c <_ZN5Print5printEli>
   d5ee8:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5eea:	4628      	mov	r0, r5
   d5eec:	f7ff ff87 	bl	d5dfe <_ZN5Print7printlnEv>
  return n;
}
   d5ef0:	4420      	add	r0, r4
   d5ef2:	bd38      	pop	{r3, r4, r5, pc}

000d5ef4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ef8:	ec57 6b10 	vmov	r6, r7, d0
   d5efc:	4682      	mov	sl, r0
   d5efe:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5f00:	ee10 2a10 	vmov	r2, s0
   d5f04:	463b      	mov	r3, r7
   d5f06:	ee10 0a10 	vmov	r0, s0
   d5f0a:	4639      	mov	r1, r7
   d5f0c:	f002 f856 	bl	d7fbc <__aeabi_dcmpun>
   d5f10:	b108      	cbz	r0, d5f16 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f12:	4948      	ldr	r1, [pc, #288]	; (d6034 <_ZN5Print10printFloatEdh+0x140>)
   d5f14:	e012      	b.n	d5f3c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5f16:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5f1a:	f04f 32ff 	mov.w	r2, #4294967295
   d5f1e:	4b46      	ldr	r3, [pc, #280]	; (d6038 <_ZN5Print10printFloatEdh+0x144>)
   d5f20:	4630      	mov	r0, r6
   d5f22:	4649      	mov	r1, r9
   d5f24:	f002 f84a 	bl	d7fbc <__aeabi_dcmpun>
   d5f28:	b968      	cbnz	r0, d5f46 <_ZN5Print10printFloatEdh+0x52>
   d5f2a:	f04f 32ff 	mov.w	r2, #4294967295
   d5f2e:	4b42      	ldr	r3, [pc, #264]	; (d6038 <_ZN5Print10printFloatEdh+0x144>)
   d5f30:	4630      	mov	r0, r6
   d5f32:	4649      	mov	r1, r9
   d5f34:	f002 f824 	bl	d7f80 <__aeabi_dcmple>
   d5f38:	b928      	cbnz	r0, d5f46 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f3a:	4940      	ldr	r1, [pc, #256]	; (d603c <_ZN5Print10printFloatEdh+0x148>)
   d5f3c:	4650      	mov	r0, sl
   d5f3e:	f7ff ff47 	bl	d5dd0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5f46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5f4a:	4b3d      	ldr	r3, [pc, #244]	; (d6040 <_ZN5Print10printFloatEdh+0x14c>)
   d5f4c:	4630      	mov	r0, r6
   d5f4e:	4639      	mov	r1, r7
   d5f50:	f002 f82a 	bl	d7fa8 <__aeabi_dcmpgt>
   d5f54:	b108      	cbz	r0, d5f5a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f56:	493b      	ldr	r1, [pc, #236]	; (d6044 <_ZN5Print10printFloatEdh+0x150>)
   d5f58:	e7f0      	b.n	d5f3c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5f5a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5f5e:	4b3a      	ldr	r3, [pc, #232]	; (d6048 <_ZN5Print10printFloatEdh+0x154>)
   d5f60:	4630      	mov	r0, r6
   d5f62:	4639      	mov	r1, r7
   d5f64:	f002 f802 	bl	d7f6c <__aeabi_dcmplt>
   d5f68:	2800      	cmp	r0, #0
   d5f6a:	d1f4      	bne.n	d5f56 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5f6c:	2200      	movs	r2, #0
   d5f6e:	2300      	movs	r3, #0
   d5f70:	4630      	mov	r0, r6
   d5f72:	4639      	mov	r1, r7
   d5f74:	f001 fffa 	bl	d7f6c <__aeabi_dcmplt>
   d5f78:	b140      	cbz	r0, d5f8c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d5f7a:	212d      	movs	r1, #45	; 0x2d
   d5f7c:	4650      	mov	r0, sl
   d5f7e:	f7ff ff3b 	bl	d5df8 <_ZN5Print5printEc>
     number = -number;
   d5f82:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5f86:	4604      	mov	r4, r0
     number = -number;
   d5f88:	461f      	mov	r7, r3
   d5f8a:	e000      	b.n	d5f8e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5f8c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5f8e:	492f      	ldr	r1, [pc, #188]	; (d604c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5f90:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5f94:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5f96:	fa5f f388 	uxtb.w	r3, r8
   d5f9a:	429d      	cmp	r5, r3
   d5f9c:	d906      	bls.n	d5fac <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5f9e:	2200      	movs	r2, #0
   d5fa0:	4b2b      	ldr	r3, [pc, #172]	; (d6050 <_ZN5Print10printFloatEdh+0x15c>)
   d5fa2:	f001 fe9b 	bl	d7cdc <__aeabi_ddiv>
   d5fa6:	f108 0801 	add.w	r8, r8, #1
   d5faa:	e7f4      	b.n	d5f96 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5fac:	4632      	mov	r2, r6
   d5fae:	463b      	mov	r3, r7
   d5fb0:	f001 fbb8 	bl	d7724 <__adddf3>
   d5fb4:	460f      	mov	r7, r1
   d5fb6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5fb8:	f002 f83e 	bl	d8038 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5fbc:	220a      	movs	r2, #10
   d5fbe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5fc0:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5fc2:	4650      	mov	r0, sl
   d5fc4:	f7ff ff31 	bl	d5e2a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5fc8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5fca:	b37d      	cbz	r5, d602c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5fcc:	4640      	mov	r0, r8
   d5fce:	f001 fce5 	bl	d799c <__aeabi_ui2d>
   d5fd2:	4602      	mov	r2, r0
   d5fd4:	460b      	mov	r3, r1
   d5fd6:	4630      	mov	r0, r6
   d5fd8:	4639      	mov	r1, r7
   d5fda:	f001 fba1 	bl	d7720 <__aeabi_dsub>
   d5fde:	4606      	mov	r6, r0
   d5fe0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5fe2:	4650      	mov	r0, sl
   d5fe4:	491b      	ldr	r1, [pc, #108]	; (d6054 <_ZN5Print10printFloatEdh+0x160>)
   d5fe6:	f7ff fef3 	bl	d5dd0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5fea:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5fec:	4b18      	ldr	r3, [pc, #96]	; (d6050 <_ZN5Print10printFloatEdh+0x15c>)
   d5fee:	2200      	movs	r2, #0
   d5ff0:	4630      	mov	r0, r6
   d5ff2:	4639      	mov	r1, r7
   d5ff4:	f001 fd48 	bl	d7a88 <__aeabi_dmul>
   d5ff8:	460f      	mov	r7, r1
   d5ffa:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5ffc:	f001 fff4 	bl	d7fe8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6000:	220a      	movs	r2, #10
   d6002:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6004:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6006:	4650      	mov	r0, sl
   d6008:	f7ff ff48 	bl	d5e9c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d600c:	4404      	add	r4, r0
    remainder -= toPrint;
   d600e:	4640      	mov	r0, r8
   d6010:	f001 fcd4 	bl	d79bc <__aeabi_i2d>
   d6014:	4602      	mov	r2, r0
   d6016:	460b      	mov	r3, r1
   d6018:	4630      	mov	r0, r6
   d601a:	4639      	mov	r1, r7
   d601c:	f001 fb80 	bl	d7720 <__aeabi_dsub>
   d6020:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6022:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6026:	4606      	mov	r6, r0
   d6028:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d602a:	d1df      	bne.n	d5fec <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d602c:	4620      	mov	r0, r4
   d602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6032:	bf00      	nop
   d6034:	000d9248 	.word	0x000d9248
   d6038:	7fefffff 	.word	0x7fefffff
   d603c:	000d9252 	.word	0x000d9252
   d6040:	41efffff 	.word	0x41efffff
   d6044:	000d924c 	.word	0x000d924c
   d6048:	c1efffff 	.word	0xc1efffff
   d604c:	3fe00000 	.word	0x3fe00000
   d6050:	40240000 	.word	0x40240000
   d6054:	000d9250 	.word	0x000d9250

000d6058 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6058:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d605a:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d605c:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d605e:	f7ff ff49 	bl	d5ef4 <_ZN5Print10printFloatEdh>
   d6062:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6064:	4628      	mov	r0, r5
   d6066:	f7ff feca 	bl	d5dfe <_ZN5Print7printlnEv>
  return n;
}
   d606a:	4420      	add	r0, r4
   d606c:	bd38      	pop	{r3, r4, r5, pc}

000d606e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d606e:	b510      	push	{r4, lr}
   d6070:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6072:	f7ff f975 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6076:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6078:	6823      	ldr	r3, [r4, #0]
   d607a:	4620      	mov	r0, r4
   d607c:	695b      	ldr	r3, [r3, #20]
   d607e:	4798      	blx	r3
    if (c >= 0) return c;
   d6080:	2800      	cmp	r0, #0
   d6082:	da08      	bge.n	d6096 <_ZN6Stream9timedReadEv+0x28>
   d6084:	f7ff f96c 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d6088:	68e3      	ldr	r3, [r4, #12]
   d608a:	1ac0      	subs	r0, r0, r3
   d608c:	68a3      	ldr	r3, [r4, #8]
   d608e:	4298      	cmp	r0, r3
   d6090:	d3f2      	bcc.n	d6078 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6092:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6096:	bd10      	pop	{r4, pc}

000d6098 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d609c:	4680      	mov	r8, r0
   d609e:	460d      	mov	r5, r1
   d60a0:	188f      	adds	r7, r1, r2
   d60a2:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d60a4:	42bc      	cmp	r4, r7
   d60a6:	eba4 0605 	sub.w	r6, r4, r5
   d60aa:	d007      	beq.n	d60bc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d60ac:	4640      	mov	r0, r8
   d60ae:	f7ff ffde 	bl	d606e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d60b2:	2800      	cmp	r0, #0
   d60b4:	db02      	blt.n	d60bc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d60b6:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d60ba:	e7f3      	b.n	d60a4 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d60bc:	4630      	mov	r0, r6
   d60be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d60c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d60c4:	4b01      	ldr	r3, [pc, #4]	; (d60cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d60c6:	4a02      	ldr	r2, [pc, #8]	; (d60d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d60c8:	601a      	str	r2, [r3, #0]
   d60ca:	4770      	bx	lr
   d60cc:	2003e344 	.word	0x2003e344
   d60d0:	000d92c9 	.word	0x000d92c9

000d60d4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d60d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d60d6:	4b14      	ldr	r3, [pc, #80]	; (d6128 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d60d8:	4f14      	ldr	r7, [pc, #80]	; (d612c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d60da:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d60dc:	4b14      	ldr	r3, [pc, #80]	; (d6130 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d60de:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d60e0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d60e2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d60e4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d60e6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d60e8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d60ea:	d01b      	beq.n	d6124 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d60ec:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d60ee:	ad01      	add	r5, sp, #4
   d60f0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d60f4:	f002 f9ae 	bl	d8454 <localtime>
	calendar_time->tm_year += 1900;
   d60f8:	6943      	ldr	r3, [r0, #20]
   d60fa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d60fe:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6100:	4604      	mov	r4, r0
   d6102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d610a:	f8d4 e000 	ldr.w	lr, [r4]
   d610e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6112:	ad01      	add	r5, sp, #4
   d6114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6116:	4c07      	ldr	r4, [pc, #28]	; (d6134 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d6118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d611a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d611c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d611e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6120:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6124:	b00b      	add	sp, #44	; 0x2c
   d6126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6128:	2003e378 	.word	0x2003e378
   d612c:	2003e374 	.word	0x2003e374
   d6130:	2003e370 	.word	0x2003e370
   d6134:	2003e348 	.word	0x2003e348

000d6138 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d6138:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d613a:	2000      	movs	r0, #0
   d613c:	f7ff fb1e 	bl	d577c <spark_sync_time_pending>
   d6140:	b128      	cbz	r0, d614e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6142:	f7ff fb03 	bl	d574c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d6146:	f080 0001 	eor.w	r0, r0, #1
   d614a:	b2c0      	uxtb	r0, r0
   d614c:	bd08      	pop	{r3, pc}
   d614e:	2001      	movs	r0, #1
    }
   d6150:	bd08      	pop	{r3, pc}

000d6152 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6152:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d6154:	2000      	movs	r0, #0
   d6156:	f7ff f913 	bl	d5380 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d615a:	4604      	mov	r4, r0
   d615c:	b968      	cbnz	r0, d617a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d615e:	f7ff fa37 	bl	d55d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6162:	2801      	cmp	r0, #1
   d6164:	d10b      	bne.n	d617e <_ZN9TimeClass7isValidEv+0x2c>
   d6166:	4620      	mov	r0, r4
   d6168:	f7ff fa62 	bl	d5630 <system_thread_get_state>
   d616c:	b938      	cbnz	r0, d617e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d616e:	f7ff ffe3 	bl	d6138 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6172:	b930      	cbnz	r0, d6182 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6174:	f7ff fad2 	bl	d571c <spark_process>
   d6178:	e7f9      	b.n	d616e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d617a:	2001      	movs	r0, #1
   d617c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d617e:	2000      	movs	r0, #0
   d6180:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6182:	f7ff ffd9 	bl	d6138 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6186:	2000      	movs	r0, #0
   d6188:	f7ff f8fa 	bl	d5380 <HAL_RTC_Time_Is_Valid>
   d618c:	3000      	adds	r0, #0
   d618e:	bf18      	it	ne
   d6190:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6194:	b508      	push	{r3, lr}
    (void)isValid();
   d6196:	f7ff ffdc 	bl	d6152 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d619a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d619e:	f7ff b8e7 	b.w	d5370 <HAL_RTC_Get_UnixTime>
	...

000d61a4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d61a4:	b508      	push	{r3, lr}
	return hour(now());
   d61a6:	f7ff fff5 	bl	d6194 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d61aa:	f7ff ff93 	bl	d60d4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d61ae:	4b01      	ldr	r3, [pc, #4]	; (d61b4 <_ZN9TimeClass4hourEv+0x10>)
   d61b0:	6898      	ldr	r0, [r3, #8]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	2003e348 	.word	0x2003e348

000d61b8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d61b8:	b508      	push	{r3, lr}
	return minute(now());
   d61ba:	f7ff ffeb 	bl	d6194 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d61be:	f7ff ff89 	bl	d60d4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d61c2:	4b01      	ldr	r3, [pc, #4]	; (d61c8 <_ZN9TimeClass6minuteEv+0x10>)
   d61c4:	6858      	ldr	r0, [r3, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	2003e348 	.word	0x2003e348

000d61cc <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d61cc:	b508      	push	{r3, lr}
	return second(now());
   d61ce:	f7ff ffe1 	bl	d6194 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d61d2:	f7ff ff7f 	bl	d60d4 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d61d6:	4b01      	ldr	r3, [pc, #4]	; (d61dc <_ZN9TimeClass6secondEv+0x10>)
   d61d8:	6818      	ldr	r0, [r3, #0]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	2003e348 	.word	0x2003e348

000d61e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d61e0:	4b02      	ldr	r3, [pc, #8]	; (d61ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d61e6:	601a      	str	r2, [r3, #0]
   d61e8:	4770      	bx	lr
   d61ea:	bf00      	nop
   d61ec:	2003e154 	.word	0x2003e154
   d61f0:	2003e36c 	.word	0x2003e36c

000d61f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d61f4:	2100      	movs	r1, #0
   d61f6:	f7ff b9fb 	b.w	d55f0 <system_delay_ms>

000d61fa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d61fa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d61fc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d61fe:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6200:	b113      	cbz	r3, d6208 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6202:	2203      	movs	r2, #3
   d6204:	4601      	mov	r1, r0
   d6206:	4798      	blx	r3
    }
   d6208:	4620      	mov	r0, r4
   d620a:	bd10      	pop	{r4, pc}

000d620c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d620c:	b510      	push	{r4, lr}
   d620e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6210:	f7ff fff3 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
   d6214:	4620      	mov	r0, r4
   d6216:	bd10      	pop	{r4, pc}

000d6218 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6218:	b513      	push	{r0, r1, r4, lr}
   d621a:	460b      	mov	r3, r1
   d621c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d621e:	c803      	ldmia	r0, {r0, r1}
   d6220:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6224:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6228:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d622c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6230:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6234:	b002      	add	sp, #8
   d6236:	bd10      	pop	{r4, pc}

000d6238 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6238:	4803      	ldr	r0, [pc, #12]	; (d6248 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d623a:	4a04      	ldr	r2, [pc, #16]	; (d624c <_GLOBAL__sub_I_RGB+0x14>)
   d623c:	4904      	ldr	r1, [pc, #16]	; (d6250 <_GLOBAL__sub_I_RGB+0x18>)
   d623e:	2300      	movs	r3, #0
   d6240:	6083      	str	r3, [r0, #8]
   d6242:	f001 b81b 	b.w	d727c <__aeabi_atexit>
   d6246:	bf00      	nop
   d6248:	2003e37c 	.word	0x2003e37c
   d624c:	2003e210 	.word	0x2003e210
   d6250:	000d620d 	.word	0x000d620d

000d6254 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6254:	6800      	ldr	r0, [r0, #0]
   d6256:	f000 bde0 	b.w	d6e1a <_ZN7TwoWire4lockEv>

000d625a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d625a:	b510      	push	{r4, lr}
   d625c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
   d625e:	6001      	str	r1, [r0, #0]
   d6260:	7102      	strb	r2, [r0, #4]

    if (lock_) {
   d6262:	b10a      	cbz	r2, d6268 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6264:	f7ff fff6 	bl	d6254 <_ZN9FuelGauge4lockEv>
    }
}
   d6268:	4620      	mov	r0, r4
   d626a:	bd10      	pop	{r4, pc}

000d626c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
   d626c:	b538      	push	{r3, r4, r5, lr}
   d626e:	4604      	mov	r4, r0
   d6270:	460d      	mov	r5, r1
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6272:	f000 ffe3 	bl	d723c <_Z20__fetch_global_Wire1v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
   d6276:	462a      	mov	r2, r5
   d6278:	4601      	mov	r1, r0
   d627a:	4620      	mov	r0, r4
   d627c:	f7ff ffed 	bl	d625a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
   d6280:	4620      	mov	r0, r4
   d6282:	bd38      	pop	{r3, r4, r5, pc}

000d6284 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
   d6284:	6800      	ldr	r0, [r0, #0]
   d6286:	f000 bdd1 	b.w	d6e2c <_ZN7TwoWire6unlockEv>

000d628a <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d628a:	b510      	push	{r4, lr}
{
    if (lock_) {
   d628c:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
   d628e:	4604      	mov	r4, r0
{
    if (lock_) {
   d6290:	b10b      	cbz	r3, d6296 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6292:	f7ff fff7 	bl	d6284 <_ZN9FuelGauge6unlockEv>
    }
}
   d6296:	4620      	mov	r0, r4
   d6298:	bd10      	pop	{r4, pc}

000d629a <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d629a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d629c:	4604      	mov	r4, r0
   d629e:	4616      	mov	r6, r2
   d62a0:	461d      	mov	r5, r3
   d62a2:	460f      	mov	r7, r1
   d62a4:	f7ff ffd6 	bl	d6254 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
   d62a8:	6820      	ldr	r0, [r4, #0]
   d62aa:	2136      	movs	r1, #54	; 0x36
   d62ac:	f000 fdaa 	bl	d6e04 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
   d62b0:	6820      	ldr	r0, [r4, #0]
   d62b2:	6803      	ldr	r3, [r0, #0]
   d62b4:	4639      	mov	r1, r7
   d62b6:	689b      	ldr	r3, [r3, #8]
   d62b8:	4798      	blx	r3
    i2c_.endTransmission(true);
   d62ba:	2101      	movs	r1, #1
   d62bc:	6820      	ldr	r0, [r4, #0]
   d62be:	f000 fda4 	bl	d6e0a <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
   d62c2:	2202      	movs	r2, #2
   d62c4:	2136      	movs	r1, #54	; 0x36
   d62c6:	2301      	movs	r3, #1
   d62c8:	6820      	ldr	r0, [r4, #0]
   d62ca:	f000 fd92 	bl	d6df2 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
   d62ce:	6820      	ldr	r0, [r4, #0]
   d62d0:	6803      	ldr	r3, [r0, #0]
   d62d2:	695b      	ldr	r3, [r3, #20]
   d62d4:	4798      	blx	r3
   d62d6:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
   d62d8:	6820      	ldr	r0, [r4, #0]
   d62da:	6803      	ldr	r3, [r0, #0]
   d62dc:	695b      	ldr	r3, [r3, #20]
   d62de:	4798      	blx	r3
   d62e0:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d62e2:	4620      	mov	r0, r4
}
   d62e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   d62e8:	f7ff bfcc 	b.w	d6284 <_ZN9FuelGauge6unlockEv>

000d62ec <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
   d62ec:	b507      	push	{r0, r1, r2, lr}

	byte MSB = 0;
	byte LSB = 0;
   d62ee:	ab02      	add	r3, sp, #8
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d62f0:	2200      	movs	r2, #0
	byte LSB = 0;
   d62f2:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
   d62f6:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
   d62fa:	2104      	movs	r1, #4
   d62fc:	f10d 0206 	add.w	r2, sp, #6
   d6300:	f7ff ffcb 	bl	d629a <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6304:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6308:	f001 fb58 	bl	d79bc <__aeabi_i2d>
   d630c:	2200      	movs	r2, #0
   d630e:	4b09      	ldr	r3, [pc, #36]	; (d6334 <_ZN9FuelGauge6getSoCEv+0x48>)
   d6310:	f001 fbba 	bl	d7a88 <__aeabi_dmul>
   d6314:	f001 feb0 	bl	d8078 <__aeabi_d2f>
   d6318:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d631c:	ee00 3a10 	vmov	s0, r3
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6320:	ee07 0a90 	vmov	s15, r0
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
   d6324:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
   d6328:	ee37 0a80 	vadd.f32	s0, s15, s0
   d632c:	b003      	add	sp, #12
   d632e:	f85d fb04 	ldr.w	pc, [sp], #4
   d6332:	bf00      	nop
   d6334:	3f700000 	.word	0x3f700000

000d6338 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6338:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d633a:	4b0c      	ldr	r3, [pc, #48]	; (d636c <serialEventRun+0x34>)
   d633c:	b133      	cbz	r3, d634c <serialEventRun+0x14>
   d633e:	f000 fbfd 	bl	d6b3c <_Z16_fetch_usbserialv>
   d6342:	6803      	ldr	r3, [r0, #0]
   d6344:	691b      	ldr	r3, [r3, #16]
   d6346:	4798      	blx	r3
   d6348:	2800      	cmp	r0, #0
   d634a:	dc09      	bgt.n	d6360 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d634c:	4b08      	ldr	r3, [pc, #32]	; (d6370 <serialEventRun+0x38>)
   d634e:	b163      	cbz	r3, d636a <serialEventRun+0x32>
   d6350:	f000 fcc8 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d6354:	6803      	ldr	r3, [r0, #0]
   d6356:	691b      	ldr	r3, [r3, #16]
   d6358:	4798      	blx	r3
   d635a:	2800      	cmp	r0, #0
   d635c:	dc03      	bgt.n	d6366 <serialEventRun+0x2e>
   d635e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6360:	f3af 8000 	nop.w
   d6364:	e7f2      	b.n	d634c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6366:	f3af 8000 	nop.w
   d636a:	bd08      	pop	{r3, pc}
	...

000d6374 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6374:	b508      	push	{r3, lr}
	serialEventRun();
   d6376:	f7ff ffdf 	bl	d6338 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d637a:	f7fe fff1 	bl	d5360 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d637e:	4b01      	ldr	r3, [pc, #4]	; (d6384 <_post_loop+0x10>)
   d6380:	6018      	str	r0, [r3, #0]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	2003e6f4 	.word	0x2003e6f4

000d6388 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6388:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d638a:	2300      	movs	r3, #0
   d638c:	9300      	str	r3, [sp, #0]
   d638e:	461a      	mov	r2, r3
   d6390:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6394:	f7ff f95e 	bl	d5654 <system_ctrl_set_result>
}
   d6398:	b003      	add	sp, #12
   d639a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d63a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d63a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d63a2:	8843      	ldrh	r3, [r0, #2]
   d63a4:	2b0a      	cmp	r3, #10
   d63a6:	d008      	beq.n	d63ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d63a8:	2b50      	cmp	r3, #80	; 0x50
   d63aa:	d109      	bne.n	d63c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d63ac:	4b09      	ldr	r3, [pc, #36]	; (d63d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d63ae:	681b      	ldr	r3, [r3, #0]
   d63b0:	b13b      	cbz	r3, d63c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d63b2:	b003      	add	sp, #12
   d63b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d63b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d63ba:	f7ff ffe5 	bl	d6388 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d63be:	e006      	b.n	d63ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d63c0:	2300      	movs	r3, #0
   d63c2:	9300      	str	r3, [sp, #0]
   d63c4:	461a      	mov	r2, r3
   d63c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d63ca:	f7ff f943 	bl	d5654 <system_ctrl_set_result>
        break;
    }
}
   d63ce:	b003      	add	sp, #12
   d63d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d63d4:	2003e38c 	.word	0x2003e38c

000d63d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d63d8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d63da:	f7fe ffb1 	bl	d5340 <HAL_RNG_GetRandomNumber>
   d63de:	4604      	mov	r4, r0
    srand(seed);
   d63e0:	f002 f95e 	bl	d86a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d63e4:	4b07      	ldr	r3, [pc, #28]	; (d6404 <module_user_init_hook+0x2c>)
   d63e6:	b113      	cbz	r3, d63ee <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d63e8:	4620      	mov	r0, r4
   d63ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d63ee:	2100      	movs	r1, #0
   d63f0:	4804      	ldr	r0, [pc, #16]	; (d6404 <module_user_init_hook+0x2c>)
   d63f2:	f7ff f9d3 	bl	d579c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d63f6:	2100      	movs	r1, #0
   d63f8:	4803      	ldr	r0, [pc, #12]	; (d6408 <module_user_init_hook+0x30>)
}
   d63fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d63fe:	f7ff b91f 	b.w	d5640 <system_ctrl_set_app_request_handler>
   d6402:	bf00      	nop
   d6404:	00000000 	.word	0x00000000
   d6408:	000d63a1 	.word	0x000d63a1

000d640c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d640c:	4770      	bx	lr

000d640e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d640e:	2000      	movs	r0, #0
   d6410:	4770      	bx	lr

000d6412 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6412:	b510      	push	{r4, lr}
   d6414:	2110      	movs	r1, #16
   d6416:	4604      	mov	r4, r0
   d6418:	f000 ff35 	bl	d7286 <_ZdlPvj>
   d641c:	4620      	mov	r0, r4
   d641e:	bd10      	pop	{r4, pc}

000d6420 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6420:	b508      	push	{r3, lr}
      { delete this; }
   d6422:	b108      	cbz	r0, d6428 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6424:	f7ff fff5 	bl	d6412 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6428:	bd08      	pop	{r3, pc}

000d642a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d642a:	2200      	movs	r2, #0
   d642c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d642e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6430:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6434:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6436:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d643a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d643c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d643e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6440:	680c      	ldr	r4, [r1, #0]
   d6442:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6444:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6448:	b510      	push	{r4, lr}
   d644a:	4604      	mov	r4, r0
    free((void*)msg_);
   d644c:	6800      	ldr	r0, [r0, #0]
   d644e:	f7ff f9b5 	bl	d57bc <free>
}
   d6452:	4620      	mov	r0, r4
   d6454:	bd10      	pop	{r4, pc}

000d6456 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6456:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6458:	68c4      	ldr	r4, [r0, #12]
   d645a:	b1f4      	cbz	r4, d649a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d645c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d645e:	2b02      	cmp	r3, #2
   d6460:	d103      	bne.n	d646a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6462:	f104 000c 	add.w	r0, r4, #12
   d6466:	f7ff ffef 	bl	d6448 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d646a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d646c:	b135      	cbz	r5, d647c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d646e:	4628      	mov	r0, r5
   d6470:	f7ff fec3 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
   d6474:	2110      	movs	r1, #16
   d6476:	4628      	mov	r0, r5
   d6478:	f000 ff05 	bl	d7286 <_ZdlPvj>
   d647c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d647e:	b135      	cbz	r5, d648e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6480:	4628      	mov	r0, r5
   d6482:	f7ff feba 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
   d6486:	2110      	movs	r1, #16
   d6488:	4628      	mov	r0, r5
   d648a:	f000 fefc 	bl	d7286 <_ZdlPvj>
   d648e:	4620      	mov	r0, r4
   d6490:	2114      	movs	r1, #20
   d6492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6496:	f000 bef6 	b.w	d7286 <_ZdlPvj>
   d649a:	bd38      	pop	{r3, r4, r5, pc}

000d649c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d649c:	b513      	push	{r0, r1, r4, lr}
   d649e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64a0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d64a4:	2300      	movs	r3, #0
   d64a6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64a8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d64aa:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d64ac:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64ae:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d64b0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d64b2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64b4:	f7fe f9b2 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64b8:	4620      	mov	r0, r4
   d64ba:	b002      	add	sp, #8
   d64bc:	bd10      	pop	{r4, pc}

000d64be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d64be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64c0:	460c      	mov	r4, r1
   d64c2:	ad02      	add	r5, sp, #8
   d64c4:	f854 3b04 	ldr.w	r3, [r4], #4
   d64c8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d64cc:	4606      	mov	r6, r0
   d64ce:	460f      	mov	r7, r1
   d64d0:	a801      	add	r0, sp, #4
   d64d2:	4621      	mov	r1, r4
   d64d4:	f7ff fc56 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d64d8:	4629      	mov	r1, r5
   d64da:	4630      	mov	r0, r6
   d64dc:	f7ff ffde 	bl	d649c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d64e0:	a801      	add	r0, sp, #4
   d64e2:	f7fe f99b 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64e6:	4620      	mov	r0, r4
   d64e8:	f7fe f998 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d64ec:	4638      	mov	r0, r7
   d64ee:	2108      	movs	r1, #8
   d64f0:	f000 fec9 	bl	d7286 <_ZdlPvj>
        return p;
    }
   d64f4:	4630      	mov	r0, r6
   d64f6:	b003      	add	sp, #12
   d64f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d64fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d64fc:	b538      	push	{r3, r4, r5, lr}
   d64fe:	2300      	movs	r3, #0
   d6500:	4604      	mov	r4, r0
   d6502:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6504:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6506:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6508:	f7fd fdc7 	bl	d409a <_Znwj>
   d650c:	b128      	cbz	r0, d651a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d650e:	2301      	movs	r3, #1
   d6510:	6043      	str	r3, [r0, #4]
   d6512:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6514:	4b02      	ldr	r3, [pc, #8]	; (d6520 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6516:	6003      	str	r3, [r0, #0]
   d6518:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d651a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d651c:	4620      	mov	r0, r4
   d651e:	bd38      	pop	{r3, r4, r5, pc}
   d6520:	000d9364 	.word	0x000d9364

000d6524 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6524:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6526:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6528:	b90a      	cbnz	r2, d652e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d652a:	f000 fecc 	bl	d72c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d652e:	68c3      	ldr	r3, [r0, #12]
    }
   d6530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6534:	4718      	bx	r3

000d6536 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6536:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6538:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d653a:	f100 0110 	add.w	r1, r0, #16
   d653e:	f7ff fff1 	bl	d6524 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6542:	bd08      	pop	{r3, pc}

000d6544 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6544:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6546:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6548:	b90a      	cbnz	r2, d654e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d654a:	f000 febc 	bl	d72c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d654e:	68c3      	ldr	r3, [r0, #12]
    }
   d6550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6554:	4718      	bx	r3

000d6556 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6556:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6558:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d655a:	f100 0110 	add.w	r1, r0, #16
   d655e:	f7ff fff1 	bl	d6544 <_ZNKSt8functionIFvRKbEEclES1_>
   d6562:	bd08      	pop	{r3, pc}

000d6564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6564:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6566:	2300      	movs	r3, #0
   d6568:	6083      	str	r3, [r0, #8]
   d656a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d656c:	4604      	mov	r4, r0
   d656e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6570:	b12b      	cbz	r3, d657e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6572:	2202      	movs	r2, #2
   d6574:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6576:	68eb      	ldr	r3, [r5, #12]
   d6578:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d657a:	68ab      	ldr	r3, [r5, #8]
   d657c:	60a3      	str	r3, [r4, #8]
	}
    }
   d657e:	4620      	mov	r0, r4
   d6580:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6584:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6586:	b089      	sub	sp, #36	; 0x24
   d6588:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d658a:	4668      	mov	r0, sp
   d658c:	f7ff ff4d 	bl	d642a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6590:	2300      	movs	r3, #0
   d6592:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6596:	f04f 0202 	mov.w	r2, #2
   d659a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d659e:	2b00      	cmp	r3, #0
   d65a0:	d103      	bne.n	d65aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d65a2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d65a6:	2900      	cmp	r1, #0
   d65a8:	d1f7      	bne.n	d659a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d65aa:	d002      	beq.n	d65b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d65ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d65b0:	e063      	b.n	d667a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d65b2:	f114 050c 	adds.w	r5, r4, #12
   d65b6:	d003      	beq.n	d65c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d65b8:	4669      	mov	r1, sp
   d65ba:	4628      	mov	r0, r5
   d65bc:	f7ff ff35 	bl	d642a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d65c0:	f3bf 8f5f 	dmb	sy
   d65c4:	2301      	movs	r3, #1
   d65c6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d65c8:	2000      	movs	r0, #0
   d65ca:	f104 0308 	add.w	r3, r4, #8
   d65ce:	f3bf 8f5f 	dmb	sy
   d65d2:	e853 6f00 	ldrex	r6, [r3]
   d65d6:	e843 0200 	strex	r2, r0, [r3]
   d65da:	2a00      	cmp	r2, #0
   d65dc:	d1f9      	bne.n	d65d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d65de:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d65e2:	2e00      	cmp	r6, #0
   d65e4:	d049      	beq.n	d667a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d65e6:	f7ff f813 	bl	d5610 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d65ea:	b120      	cbz	r0, d65f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65ec:	4629      	mov	r1, r5
   d65ee:	4630      	mov	r0, r6
   d65f0:	f7ff ff98 	bl	d6524 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d65f4:	e03a      	b.n	d666c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65f6:	4631      	mov	r1, r6
   d65f8:	a802      	add	r0, sp, #8
   d65fa:	f7ff ffb3 	bl	d6564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d65fe:	68e0      	ldr	r0, [r4, #12]
   d6600:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6604:	b108      	cbz	r0, d660a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6606:	f002 f885 	bl	d8714 <strdup>
   d660a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d660c:	2010      	movs	r0, #16
   d660e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6612:	f7fd fd42 	bl	d409a <_Znwj>
   d6616:	4605      	mov	r5, r0
   d6618:	b1e8      	cbz	r0, d6656 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d661a:	2700      	movs	r7, #0
   d661c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d661e:	2018      	movs	r0, #24
   d6620:	f7fd fd3b 	bl	d409a <_Znwj>
   d6624:	4604      	mov	r4, r0
   d6626:	b188      	cbz	r0, d664c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6628:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d662a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d662c:	a802      	add	r0, sp, #8
   d662e:	f7ff fdf3 	bl	d6218 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6632:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6634:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6636:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6638:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d663a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d663c:	a906      	add	r1, sp, #24
   d663e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6640:	60e3      	str	r3, [r4, #12]
   d6642:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6646:	9205      	str	r2, [sp, #20]
   d6648:	f7ff feef 	bl	d642a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d664c:	4b0d      	ldr	r3, [pc, #52]	; (d6684 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d664e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6650:	4b0d      	ldr	r3, [pc, #52]	; (d6688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6652:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6654:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6656:	a806      	add	r0, sp, #24
   d6658:	f7ff fef6 	bl	d6448 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d665c:	a802      	add	r0, sp, #8
   d665e:	f7ff fdcc 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6662:	2200      	movs	r2, #0
   d6664:	4629      	mov	r1, r5
   d6666:	4809      	ldr	r0, [pc, #36]	; (d668c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6668:	f7fe ffda 	bl	d5620 <application_thread_invoke>
   d666c:	4630      	mov	r0, r6
   d666e:	f7ff fdc4 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6672:	2110      	movs	r1, #16
   d6674:	4630      	mov	r0, r6
   d6676:	f000 fe06 	bl	d7286 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d667a:	4668      	mov	r0, sp
   d667c:	f7ff fee4 	bl	d6448 <_ZN8particle5ErrorD1Ev>
    }
   d6680:	b009      	add	sp, #36	; 0x24
   d6682:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6684:	000d6537 	.word	0x000d6537
   d6688:	000d67ad 	.word	0x000d67ad
   d668c:	000d6d31 	.word	0x000d6d31

000d6690 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6694:	b08b      	sub	sp, #44	; 0x2c
   d6696:	4606      	mov	r6, r0
   d6698:	460f      	mov	r7, r1
   d669a:	4690      	mov	r8, r2
   d669c:	4699      	mov	r9, r3
   d669e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d66a2:	f7ff f853 	bl	d574c <spark_cloud_flag_connected>
   d66a6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d66a8:	4683      	mov	fp, r0
   d66aa:	bb30      	cbnz	r0, d66fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d66ac:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d66b0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66b2:	a905      	add	r1, sp, #20
   d66b4:	4628      	mov	r0, r5
   d66b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d66ba:	f7ff feb6 	bl	d642a <_ZN8particle5ErrorC1EOS0_>
   d66be:	2014      	movs	r0, #20
   d66c0:	f7fd fceb 	bl	d409a <_Znwj>
   d66c4:	4604      	mov	r4, r0
   d66c6:	b158      	cbz	r0, d66e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d66c8:	2302      	movs	r3, #2
   d66ca:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66cc:	2301      	movs	r3, #1
   d66ce:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66d0:	f8c0 b004 	str.w	fp, [r0, #4]
   d66d4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d66d8:	4629      	mov	r1, r5
   d66da:	300c      	adds	r0, #12
   d66dc:	f7ff fea5 	bl	d642a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d66e0:	4630      	mov	r0, r6
   d66e2:	4621      	mov	r1, r4
   d66e4:	f840 4b04 	str.w	r4, [r0], #4
   d66e8:	f7ff ff08 	bl	d64fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66ec:	4628      	mov	r0, r5
   d66ee:	f7ff feab 	bl	d6448 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d66f2:	a805      	add	r0, sp, #20
   d66f4:	f7ff fea8 	bl	d6448 <_ZN8particle5ErrorD1Ev>
   d66f8:	e052      	b.n	d67a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66fa:	2400      	movs	r4, #0
   d66fc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66fe:	2014      	movs	r0, #20
   d6700:	606c      	str	r4, [r5, #4]
   d6702:	60ac      	str	r4, [r5, #8]
   d6704:	9307      	str	r3, [sp, #28]
   d6706:	f7fd fcc8 	bl	d409a <_Znwj>
   d670a:	4601      	mov	r1, r0
   d670c:	b118      	cbz	r0, d6716 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d670e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6710:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6712:	6044      	str	r4, [r0, #4]
   d6714:	6084      	str	r4, [r0, #8]
   d6716:	a804      	add	r0, sp, #16
   d6718:	9103      	str	r1, [sp, #12]
   d671a:	f7ff feef 	bl	d64fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d671e:	4b22      	ldr	r3, [pc, #136]	; (d67a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6720:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6722:	2008      	movs	r0, #8
   d6724:	f7fd fcb9 	bl	d409a <_Znwj>
   d6728:	4604      	mov	r4, r0
   d672a:	b128      	cbz	r0, d6738 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d672c:	9b03      	ldr	r3, [sp, #12]
   d672e:	f840 3b04 	str.w	r3, [r0], #4
   d6732:	a904      	add	r1, sp, #16
   d6734:	f7ff fb26 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6738:	9500      	str	r5, [sp, #0]
   d673a:	fa5f f38a 	uxtb.w	r3, sl
   d673e:	464a      	mov	r2, r9
   d6740:	4641      	mov	r1, r8
   d6742:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6744:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6746:	f7ff f809 	bl	d575c <spark_send_event>
   d674a:	b920      	cbnz	r0, d6756 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d674c:	9b03      	ldr	r3, [sp, #12]
   d674e:	785b      	ldrb	r3, [r3, #1]
   d6750:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6754:	b183      	cbz	r3, d6778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6756:	9b03      	ldr	r3, [sp, #12]
   d6758:	9305      	str	r3, [sp, #20]
   d675a:	a904      	add	r1, sp, #16
   d675c:	a806      	add	r0, sp, #24
   d675e:	f7ff fb11 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6762:	a905      	add	r1, sp, #20
   d6764:	4630      	mov	r0, r6
   d6766:	f7ff fe99 	bl	d649c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d676a:	a806      	add	r0, sp, #24
   d676c:	f7fe f856 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6770:	a804      	add	r0, sp, #16
   d6772:	f7fe f853 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6776:	e013      	b.n	d67a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6778:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d677c:	a905      	add	r1, sp, #20
   d677e:	a803      	add	r0, sp, #12
   d6780:	9205      	str	r2, [sp, #20]
   d6782:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6786:	f7ff fefd 	bl	d6584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d678a:	a805      	add	r0, sp, #20
   d678c:	f7ff fe5c 	bl	d6448 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6790:	a805      	add	r0, sp, #20
   d6792:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6794:	f7ff fe93 	bl	d64be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6798:	a806      	add	r0, sp, #24
   d679a:	f7fe f83f 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d679e:	e7da      	b.n	d6756 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d67a0:	4630      	mov	r0, r6
   d67a2:	b00b      	add	sp, #44	; 0x2c
   d67a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67a8:	000d691d 	.word	0x000d691d

000d67ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d67ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d67b2:	d006      	beq.n	d67c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d67b4:	2a03      	cmp	r2, #3
   d67b6:	d017      	beq.n	d67e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d67b8:	2a01      	cmp	r2, #1
   d67ba:	d122      	bne.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d67bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67be:	6003      	str	r3, [r0, #0]
	      break;
   d67c0:	e01f      	b.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67c2:	2018      	movs	r0, #24
   d67c4:	680e      	ldr	r6, [r1, #0]
   d67c6:	f7fd fc68 	bl	d409a <_Znwj>
   d67ca:	4605      	mov	r5, r0
   d67cc:	b150      	cbz	r0, d67e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d67ce:	4631      	mov	r1, r6
   d67d0:	f7ff fec8 	bl	d6564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d67d4:	6930      	ldr	r0, [r6, #16]
   d67d6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d67da:	b108      	cbz	r0, d67e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d67dc:	f001 ff9a 	bl	d8714 <strdup>
   d67e0:	6128      	str	r0, [r5, #16]
   d67e2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d67e4:	6025      	str	r5, [r4, #0]
   d67e6:	e00c      	b.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67e8:	6804      	ldr	r4, [r0, #0]
   d67ea:	b154      	cbz	r4, d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d67ec:	f104 0010 	add.w	r0, r4, #16
   d67f0:	f7ff fe2a 	bl	d6448 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67f4:	4620      	mov	r0, r4
   d67f6:	f7ff fd00 	bl	d61fa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d67fa:	2118      	movs	r1, #24
   d67fc:	4620      	mov	r0, r4
   d67fe:	f000 fd42 	bl	d7286 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6802:	2000      	movs	r0, #0
   d6804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6806 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6806:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6808:	2300      	movs	r3, #0
   d680a:	6083      	str	r3, [r0, #8]
   d680c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d680e:	4604      	mov	r4, r0
   d6810:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6812:	b12b      	cbz	r3, d6820 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6814:	2202      	movs	r2, #2
   d6816:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6818:	68eb      	ldr	r3, [r5, #12]
   d681a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d681c:	68ab      	ldr	r3, [r5, #8]
   d681e:	60a3      	str	r3, [r4, #8]
	}
    }
   d6820:	4620      	mov	r0, r4
   d6822:	bd38      	pop	{r3, r4, r5, pc}

000d6824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6824:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6826:	b570      	push	{r4, r5, r6, lr}
   d6828:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d682a:	d006      	beq.n	d683a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d682c:	2a03      	cmp	r2, #3
   d682e:	d011      	beq.n	d6854 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6830:	2a01      	cmp	r2, #1
   d6832:	d118      	bne.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6834:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6836:	6003      	str	r3, [r0, #0]
	      break;
   d6838:	e015      	b.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d683a:	2014      	movs	r0, #20
   d683c:	680e      	ldr	r6, [r1, #0]
   d683e:	f7fd fc2c 	bl	d409a <_Znwj>
   d6842:	4605      	mov	r5, r0
   d6844:	b120      	cbz	r0, d6850 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6846:	4631      	mov	r1, r6
   d6848:	f7ff ffdd 	bl	d6806 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d684c:	7c33      	ldrb	r3, [r6, #16]
   d684e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6850:	6025      	str	r5, [r4, #0]
   d6852:	e008      	b.n	d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6854:	6804      	ldr	r4, [r0, #0]
   d6856:	b134      	cbz	r4, d6866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6858:	4620      	mov	r0, r4
   d685a:	f7ff fcce 	bl	d61fa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d685e:	2114      	movs	r1, #20
   d6860:	4620      	mov	r0, r4
   d6862:	f000 fd10 	bl	d7286 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6866:	2000      	movs	r0, #0
   d6868:	bd70      	pop	{r4, r5, r6, pc}
	...

000d686c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d686c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d686e:	2300      	movs	r3, #0
   d6870:	b087      	sub	sp, #28
   d6872:	460c      	mov	r4, r1
   d6874:	f3bf 8f5f 	dmb	sy
   d6878:	e850 6f00 	ldrex	r6, [r0]
   d687c:	e840 3200 	strex	r2, r3, [r0]
   d6880:	2a00      	cmp	r2, #0
   d6882:	d1f9      	bne.n	d6878 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6884:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6888:	2e00      	cmp	r6, #0
   d688a:	d03f      	beq.n	d690c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d688c:	4618      	mov	r0, r3
   d688e:	f7fe febf 	bl	d5610 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6892:	4607      	mov	r7, r0
   d6894:	b120      	cbz	r0, d68a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6896:	4621      	mov	r1, r4
   d6898:	4630      	mov	r0, r6
   d689a:	f7ff fe53 	bl	d6544 <_ZNKSt8functionIFvRKbEEclES1_>
   d689e:	e02e      	b.n	d68fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68a0:	4631      	mov	r1, r6
   d68a2:	a801      	add	r0, sp, #4
   d68a4:	f7ff ffaf 	bl	d6806 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68a8:	7823      	ldrb	r3, [r4, #0]
   d68aa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d68ae:	2010      	movs	r0, #16
   d68b0:	f7fd fbf3 	bl	d409a <_Znwj>
   d68b4:	4605      	mov	r5, r0
   d68b6:	b1d0      	cbz	r0, d68ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68ba:	2014      	movs	r0, #20
   d68bc:	f7fd fbed 	bl	d409a <_Znwj>
   d68c0:	4604      	mov	r4, r0
   d68c2:	b178      	cbz	r0, d68e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d68c4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d68c6:	4601      	mov	r1, r0
   d68c8:	a801      	add	r0, sp, #4
   d68ca:	f7ff fca5 	bl	d6218 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68ce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d68d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d68d6:	9203      	str	r2, [sp, #12]
   d68d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68da:	60e3      	str	r3, [r4, #12]
   d68dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d68e0:	9204      	str	r2, [sp, #16]
   d68e2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d68e4:	4b0a      	ldr	r3, [pc, #40]	; (d6910 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d68e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d68e8:	4b0a      	ldr	r3, [pc, #40]	; (d6914 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68ea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d68ec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d68ee:	a801      	add	r0, sp, #4
   d68f0:	f7ff fc83 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d68f4:	2200      	movs	r2, #0
   d68f6:	4629      	mov	r1, r5
   d68f8:	4807      	ldr	r0, [pc, #28]	; (d6918 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d68fa:	f7fe fe91 	bl	d5620 <application_thread_invoke>
   d68fe:	4630      	mov	r0, r6
   d6900:	f7ff fc7b 	bl	d61fa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6904:	2110      	movs	r1, #16
   d6906:	4630      	mov	r0, r6
   d6908:	f000 fcbd 	bl	d7286 <_ZdlPvj>
        }
    }
   d690c:	b007      	add	sp, #28
   d690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6910:	000d6557 	.word	0x000d6557
   d6914:	000d6825 	.word	0x000d6825
   d6918:	000d6d31 	.word	0x000d6d31

000d691c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d691c:	b530      	push	{r4, r5, lr}
   d691e:	b085      	sub	sp, #20
   d6920:	4604      	mov	r4, r0
   d6922:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6924:	4668      	mov	r0, sp
   d6926:	4611      	mov	r1, r2
   d6928:	f7ff fdc9 	bl	d64be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d692c:	b17c      	cbz	r4, d694e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d692e:	b224      	sxth	r4, r4
   d6930:	4628      	mov	r0, r5
   d6932:	b10d      	cbz	r5, d6938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6934:	f001 feee 	bl	d8714 <strdup>
   d6938:	9002      	str	r0, [sp, #8]
   d693a:	a902      	add	r1, sp, #8
   d693c:	4668      	mov	r0, sp
   d693e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6942:	f7ff fe1f 	bl	d6584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6946:	a802      	add	r0, sp, #8
   d6948:	f7ff fd7e 	bl	d6448 <_ZN8particle5ErrorD1Ev>
   d694c:	e01d      	b.n	d698a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d694e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6950:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6954:	f04f 0201 	mov.w	r2, #1
   d6958:	e8d0 3f4f 	ldrexb	r3, [r0]
   d695c:	42a3      	cmp	r3, r4
   d695e:	d103      	bne.n	d6968 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6960:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6964:	2900      	cmp	r1, #0
   d6966:	d1f7      	bne.n	d6958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6968:	d002      	beq.n	d6970 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d696a:	f88d 3008 	strb.w	r3, [sp, #8]
   d696e:	e00c      	b.n	d698a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6970:	f110 010c 	adds.w	r1, r0, #12
   d6974:	f04f 0301 	mov.w	r3, #1
   d6978:	bf18      	it	ne
   d697a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d697c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6980:	3004      	adds	r0, #4
   d6982:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6986:	f7ff ff71 	bl	d686c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d698a:	a801      	add	r0, sp, #4
   d698c:	f7fd ff46 	bl	d481c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6990:	b005      	add	sp, #20
   d6992:	bd30      	pop	{r4, r5, pc}

000d6994 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6994:	4770      	bx	lr

000d6996 <_ZN9IPAddressD0Ev>:
   d6996:	b510      	push	{r4, lr}
   d6998:	2118      	movs	r1, #24
   d699a:	4604      	mov	r4, r0
   d699c:	f000 fc73 	bl	d7286 <_ZdlPvj>
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d69a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d69a6:	7d03      	ldrb	r3, [r0, #20]
   d69a8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d69aa:	b08d      	sub	sp, #52	; 0x34
   d69ac:	460e      	mov	r6, r1
   d69ae:	f100 0704 	add.w	r7, r0, #4
   d69b2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d69b6:	d002      	beq.n	d69be <_ZNK9IPAddress7printToER5Print+0x1a>
   d69b8:	f100 0508 	add.w	r5, r0, #8
   d69bc:	e018      	b.n	d69f0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d69be:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69c0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d69c2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d69c6:	232f      	movs	r3, #47	; 0x2f
   d69c8:	462a      	mov	r2, r5
   d69ca:	200a      	movs	r0, #10
   d69cc:	f7fe fd10 	bl	d53f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d69d0:	4628      	mov	r0, r5
   d69d2:	f001 feba 	bl	d874a <strlen>
   d69d6:	6833      	ldr	r3, [r6, #0]
   d69d8:	4602      	mov	r2, r0
   d69da:	68db      	ldr	r3, [r3, #12]
   d69dc:	4629      	mov	r1, r5
   d69de:	4630      	mov	r0, r6
   d69e0:	4798      	blx	r3
   d69e2:	e00f      	b.n	d6a04 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d69e4:	b124      	cbz	r4, d69f0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d69e6:	212e      	movs	r1, #46	; 0x2e
   d69e8:	4630      	mov	r0, r6
   d69ea:	f7ff fa05 	bl	d5df8 <_ZN5Print5printEc>
   d69ee:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d69f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d69f4:	220a      	movs	r2, #10
   d69f6:	4630      	mov	r0, r6
   d69f8:	f7ff fa44 	bl	d5e84 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d69fc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d69fe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6a00:	d1f0      	bne.n	d69e4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6a02:	4620      	mov	r0, r4
    }
    return n;
}
   d6a04:	b00d      	add	sp, #52	; 0x34
   d6a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a08 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6a08:	b510      	push	{r4, lr}
   d6a0a:	4b05      	ldr	r3, [pc, #20]	; (d6a20 <_ZN9IPAddressC1Ev+0x18>)
   d6a0c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6a0e:	2211      	movs	r2, #17
   d6a10:	f840 3b04 	str.w	r3, [r0], #4
   d6a14:	2100      	movs	r1, #0
   d6a16:	f001 fe3b 	bl	d8690 <memset>
{
    clear();
}
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	bd10      	pop	{r4, pc}
   d6a1e:	bf00      	nop
   d6a20:	000d9380 	.word	0x000d9380

000d6a24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6a24:	4603      	mov	r3, r0
   d6a26:	4a07      	ldr	r2, [pc, #28]	; (d6a44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6a28:	b510      	push	{r4, lr}
   d6a2a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6a2e:	f101 0210 	add.w	r2, r1, #16
   d6a32:	f851 4b04 	ldr.w	r4, [r1], #4
   d6a36:	f843 4b04 	str.w	r4, [r3], #4
   d6a3a:	4291      	cmp	r1, r2
   d6a3c:	d1f9      	bne.n	d6a32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6a3e:	780a      	ldrb	r2, [r1, #0]
   d6a40:	701a      	strb	r2, [r3, #0]
}
   d6a42:	bd10      	pop	{r4, pc}
   d6a44:	000d9380 	.word	0x000d9380

000d6a48 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6a48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6a4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6a4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6a52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6a56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6a5a:	2304      	movs	r3, #4
   d6a5c:	6041      	str	r1, [r0, #4]
   d6a5e:	7503      	strb	r3, [r0, #20]
   d6a60:	bd10      	pop	{r4, pc}

000d6a62 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6a62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6a64:	780d      	ldrb	r5, [r1, #0]
   d6a66:	788b      	ldrb	r3, [r1, #2]
   d6a68:	784a      	ldrb	r2, [r1, #1]
   d6a6a:	78c9      	ldrb	r1, [r1, #3]
   d6a6c:	9100      	str	r1, [sp, #0]
   d6a6e:	4629      	mov	r1, r5
   d6a70:	f7ff ffea 	bl	d6a48 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6a74:	b003      	add	sp, #12
   d6a76:	bd30      	pop	{r4, r5, pc}

000d6a78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a78:	7441      	strb	r1, [r0, #17]
   d6a7a:	4770      	bx	lr

000d6a7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6a7c:	4770      	bx	lr

000d6a7e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6a7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6a80:	2100      	movs	r1, #0
   d6a82:	7c00      	ldrb	r0, [r0, #16]
   d6a84:	f7fe fd8c 	bl	d55a0 <HAL_USB_USART_Receive_Data>
}
   d6a88:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6a8c:	bf28      	it	cs
   d6a8e:	f04f 30ff 	movcs.w	r0, #4294967295
   d6a92:	bd08      	pop	{r3, pc}

000d6a94 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6a94:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6a96:	2101      	movs	r1, #1
   d6a98:	7c00      	ldrb	r0, [r0, #16]
   d6a9a:	f7fe fd81 	bl	d55a0 <HAL_USB_USART_Receive_Data>
}
   d6a9e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6aa2:	bf28      	it	cs
   d6aa4:	f04f 30ff 	movcs.w	r0, #4294967295
   d6aa8:	bd08      	pop	{r3, pc}

000d6aaa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6aaa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6aac:	7c00      	ldrb	r0, [r0, #16]
   d6aae:	f7fe fd6f 	bl	d5590 <HAL_USB_USART_Available_Data_For_Write>
}
   d6ab2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ab6:	bd08      	pop	{r3, pc}

000d6ab8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6ab8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6aba:	7c00      	ldrb	r0, [r0, #16]
   d6abc:	f7fe fd60 	bl	d5580 <HAL_USB_USART_Available_Data>
}
   d6ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ac4:	bd08      	pop	{r3, pc}

000d6ac6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6ac6:	7c00      	ldrb	r0, [r0, #16]
   d6ac8:	f7fe bd7a 	b.w	d55c0 <HAL_USB_USART_Flush_Data>

000d6acc <_ZN9USBSerialD0Ev>:
   d6acc:	b510      	push	{r4, lr}
   d6ace:	2114      	movs	r1, #20
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	f000 fbd8 	bl	d7286 <_ZdlPvj>
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	bd10      	pop	{r4, pc}

000d6ada <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6ada:	b538      	push	{r3, r4, r5, lr}
   d6adc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ade:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6ae0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ae2:	f7fe fd55 	bl	d5590 <HAL_USB_USART_Available_Data_For_Write>
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	dc01      	bgt.n	d6aee <_ZN9USBSerial5writeEh+0x14>
   d6aea:	7c60      	ldrb	r0, [r4, #17]
   d6aec:	b128      	cbz	r0, d6afa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6aee:	4629      	mov	r1, r5
   d6af0:	7c20      	ldrb	r0, [r4, #16]
   d6af2:	f7fe fd5d 	bl	d55b0 <HAL_USB_USART_Send_Data>
   d6af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6afa:	bd38      	pop	{r3, r4, r5, pc}

000d6afc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6afc:	b510      	push	{r4, lr}
   d6afe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b00:	2300      	movs	r3, #0
   d6b02:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b08:	60a3      	str	r3, [r4, #8]
   d6b0a:	4b05      	ldr	r3, [pc, #20]	; (d6b20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b0c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6b0e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b10:	4608      	mov	r0, r1
{
  _serial = serial;
   d6b12:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6b14:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6b16:	4611      	mov	r1, r2
   d6b18:	f7fe fd22 	bl	d5560 <HAL_USB_USART_Init>
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}
   d6b20:	000d9394 	.word	0x000d9394

000d6b24 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6b24:	2200      	movs	r2, #0
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	f7fe bd22 	b.w	d5570 <HAL_USB_USART_Begin>

000d6b2c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b2c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b2e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b30:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b32:	2100      	movs	r1, #0
   d6b34:	f001 fdac 	bl	d8690 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b38:	4620      	mov	r0, r4
   d6b3a:	bd10      	pop	{r4, pc}

000d6b3c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b3c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b3e:	4d0e      	ldr	r5, [pc, #56]	; (d6b78 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6b40:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6b42:	a801      	add	r0, sp, #4
   d6b44:	f7ff fff2 	bl	d6b2c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b48:	6829      	ldr	r1, [r5, #0]
   d6b4a:	f011 0401 	ands.w	r4, r1, #1
   d6b4e:	d110      	bne.n	d6b72 <_Z16_fetch_usbserialv+0x36>
   d6b50:	4628      	mov	r0, r5
   d6b52:	f7fd faaa 	bl	d40aa <__cxa_guard_acquire>
   d6b56:	b160      	cbz	r0, d6b72 <_Z16_fetch_usbserialv+0x36>
   d6b58:	aa01      	add	r2, sp, #4
   d6b5a:	4621      	mov	r1, r4
   d6b5c:	4807      	ldr	r0, [pc, #28]	; (d6b7c <_Z16_fetch_usbserialv+0x40>)
   d6b5e:	f7ff ffcd 	bl	d6afc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6b62:	4628      	mov	r0, r5
   d6b64:	f7fd faa6 	bl	d40b4 <__cxa_guard_release>
   d6b68:	4a05      	ldr	r2, [pc, #20]	; (d6b80 <_Z16_fetch_usbserialv+0x44>)
   d6b6a:	4906      	ldr	r1, [pc, #24]	; (d6b84 <_Z16_fetch_usbserialv+0x48>)
   d6b6c:	4803      	ldr	r0, [pc, #12]	; (d6b7c <_Z16_fetch_usbserialv+0x40>)
   d6b6e:	f000 fb85 	bl	d727c <__aeabi_atexit>
	return _usbserial;
}
   d6b72:	4802      	ldr	r0, [pc, #8]	; (d6b7c <_Z16_fetch_usbserialv+0x40>)
   d6b74:	b007      	add	sp, #28
   d6b76:	bd30      	pop	{r4, r5, pc}
   d6b78:	2003e390 	.word	0x2003e390
   d6b7c:	2003e394 	.word	0x2003e394
   d6b80:	2003e210 	.word	0x2003e210
   d6b84:	000d6a7d 	.word	0x000d6a7d

000d6b88 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6b88:	2200      	movs	r2, #0
   d6b8a:	4611      	mov	r1, r2
   d6b8c:	6840      	ldr	r0, [r0, #4]
   d6b8e:	f7fe bd8d 	b.w	d56ac <network_ready>

000d6b92 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b92:	2200      	movs	r2, #0
   d6b94:	4611      	mov	r1, r2
   d6b96:	6840      	ldr	r0, [r0, #4]
   d6b98:	f7fe bda8 	b.w	d56ec <network_listening>

000d6b9c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b9c:	2200      	movs	r2, #0
   d6b9e:	4611      	mov	r1, r2
   d6ba0:	6840      	ldr	r0, [r0, #4]
   d6ba2:	f7fe bdb3 	b.w	d570c <network_get_listen_timeout>

000d6ba6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6ba6:	2200      	movs	r2, #0
   d6ba8:	6840      	ldr	r0, [r0, #4]
   d6baa:	f7fe bda7 	b.w	d56fc <network_set_listen_timeout>

000d6bae <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6bae:	2200      	movs	r2, #0
   d6bb0:	f081 0101 	eor.w	r1, r1, #1
   d6bb4:	6840      	ldr	r0, [r0, #4]
   d6bb6:	f7fe bd91 	b.w	d56dc <network_listen>

000d6bba <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6bba:	2300      	movs	r3, #0
   d6bbc:	461a      	mov	r2, r3
   d6bbe:	4619      	mov	r1, r3
   d6bc0:	6840      	ldr	r0, [r0, #4]
   d6bc2:	f7fe bd83 	b.w	d56cc <network_off>

000d6bc6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6bc6:	2300      	movs	r3, #0
   d6bc8:	461a      	mov	r2, r3
   d6bca:	4619      	mov	r1, r3
   d6bcc:	6840      	ldr	r0, [r0, #4]
   d6bce:	f7fe bd75 	b.w	d56bc <network_on>

000d6bd2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6bd2:	2200      	movs	r2, #0
   d6bd4:	4611      	mov	r1, r2
   d6bd6:	6840      	ldr	r0, [r0, #4]
   d6bd8:	f7fe bd58 	b.w	d568c <network_connecting>

000d6bdc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6bdc:	2200      	movs	r2, #0
   d6bde:	2102      	movs	r1, #2
   d6be0:	6840      	ldr	r0, [r0, #4]
   d6be2:	f7fe bd5b 	b.w	d569c <network_disconnect>

000d6be6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6be6:	2300      	movs	r3, #0
   d6be8:	461a      	mov	r2, r3
   d6bea:	6840      	ldr	r0, [r0, #4]
   d6bec:	f7fe bd46 	b.w	d567c <network_connect>

000d6bf0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6bf0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6bf2:	4c08      	ldr	r4, [pc, #32]	; (d6c14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6bf4:	2528      	movs	r5, #40	; 0x28
   d6bf6:	462a      	mov	r2, r5
   d6bf8:	2100      	movs	r1, #0
   d6bfa:	4620      	mov	r0, r4
   d6bfc:	f001 fd48 	bl	d8690 <memset>
        cid = -1;
   d6c00:	f04f 33ff 	mov.w	r3, #4294967295
   d6c04:	6063      	str	r3, [r4, #4]
   d6c06:	4b04      	ldr	r3, [pc, #16]	; (d6c18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6c08:	8025      	strh	r5, [r4, #0]
   d6c0a:	2204      	movs	r2, #4
   d6c0c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6c0e:	4a03      	ldr	r2, [pc, #12]	; (d6c1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6c10:	601a      	str	r2, [r3, #0]
   d6c12:	bd38      	pop	{r3, r4, r5, pc}
   d6c14:	2003e3b0 	.word	0x2003e3b0
   d6c18:	2003e3a8 	.word	0x2003e3a8
   d6c1c:	000d93c4 	.word	0x000d93c4

000d6c20 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6c20:	4770      	bx	lr

000d6c22 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c22:	7441      	strb	r1, [r0, #17]
   d6c24:	4770      	bx	lr

000d6c26 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6c26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6c28:	7c00      	ldrb	r0, [r0, #16]
   d6c2a:	f7fe fc21 	bl	d5470 <HAL_USART_Available_Data_For_Write>
}
   d6c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c32:	bd08      	pop	{r3, pc}

000d6c34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6c34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6c36:	7c00      	ldrb	r0, [r0, #16]
   d6c38:	f7fe fbf2 	bl	d5420 <HAL_USART_Available_Data>
}
   d6c3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c40:	bd08      	pop	{r3, pc}

000d6c42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6c42:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6c44:	7c00      	ldrb	r0, [r0, #16]
   d6c46:	f7fe fbfb 	bl	d5440 <HAL_USART_Peek_Data>
}
   d6c4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c4e:	bf28      	it	cs
   d6c50:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c54:	bd08      	pop	{r3, pc}

000d6c56 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6c56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6c58:	7c00      	ldrb	r0, [r0, #16]
   d6c5a:	f7fe fbe9 	bl	d5430 <HAL_USART_Read_Data>
}
   d6c5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c62:	bf28      	it	cs
   d6c64:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c68:	bd08      	pop	{r3, pc}

000d6c6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c6a:	7c00      	ldrb	r0, [r0, #16]
   d6c6c:	f7fe bbf0 	b.w	d5450 <HAL_USART_Flush_Data>

000d6c70 <_ZN11USARTSerialD0Ev>:
   d6c70:	b510      	push	{r4, lr}
   d6c72:	2114      	movs	r1, #20
   d6c74:	4604      	mov	r4, r0
   d6c76:	f000 fb06 	bl	d7286 <_ZdlPvj>
   d6c7a:	4620      	mov	r0, r4
   d6c7c:	bd10      	pop	{r4, pc}

000d6c7e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c7e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c80:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c82:	4604      	mov	r4, r0
   d6c84:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c86:	b925      	cbnz	r5, d6c92 <_ZN11USARTSerial5writeEh+0x14>
   d6c88:	7c00      	ldrb	r0, [r0, #16]
   d6c8a:	f7fe fbf1 	bl	d5470 <HAL_USART_Available_Data_For_Write>
   d6c8e:	2800      	cmp	r0, #0
   d6c90:	dd05      	ble.n	d6c9e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c92:	4631      	mov	r1, r6
   d6c94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c9a:	f7fe bbb9 	b.w	d5410 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c9e:	4628      	mov	r0, r5
   d6ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ca4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6ca4:	b510      	push	{r4, lr}
   d6ca6:	4604      	mov	r4, r0
   d6ca8:	4608      	mov	r0, r1
   d6caa:	4611      	mov	r1, r2
   d6cac:	2200      	movs	r2, #0
   d6cae:	6062      	str	r2, [r4, #4]
   d6cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6cb4:	60a2      	str	r2, [r4, #8]
   d6cb6:	4a05      	ldr	r2, [pc, #20]	; (d6ccc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6cb8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6cba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6cbc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6cbe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6cc0:	461a      	mov	r2, r3
   d6cc2:	f7fe fb9d 	bl	d5400 <HAL_USART_Init>
}
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	bd10      	pop	{r4, pc}
   d6cca:	bf00      	nop
   d6ccc:	000d93f8 	.word	0x000d93f8

000d6cd0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6cd0:	2300      	movs	r3, #0
   d6cd2:	7c00      	ldrb	r0, [r0, #16]
   d6cd4:	f7fe bbd4 	b.w	d5480 <HAL_USART_BeginConfig>

000d6cd8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6cd8:	2200      	movs	r2, #0
   d6cda:	f7ff bff9 	b.w	d6cd0 <_ZN11USARTSerial5beginEmm>

000d6cde <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6cde:	7c00      	ldrb	r0, [r0, #16]
   d6ce0:	f7fe bbbe 	b.w	d5460 <HAL_USART_Is_Enabled>

000d6ce4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6ce4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6ce6:	4d0c      	ldr	r5, [pc, #48]	; (d6d18 <_Z22__fetch_global_Serial1v+0x34>)
   d6ce8:	6829      	ldr	r1, [r5, #0]
   d6cea:	f011 0401 	ands.w	r4, r1, #1
   d6cee:	d111      	bne.n	d6d14 <_Z22__fetch_global_Serial1v+0x30>
   d6cf0:	4628      	mov	r0, r5
   d6cf2:	f7fd f9da 	bl	d40aa <__cxa_guard_acquire>
   d6cf6:	b168      	cbz	r0, d6d14 <_Z22__fetch_global_Serial1v+0x30>
   d6cf8:	4a08      	ldr	r2, [pc, #32]	; (d6d1c <_Z22__fetch_global_Serial1v+0x38>)
   d6cfa:	4b09      	ldr	r3, [pc, #36]	; (d6d20 <_Z22__fetch_global_Serial1v+0x3c>)
   d6cfc:	4809      	ldr	r0, [pc, #36]	; (d6d24 <_Z22__fetch_global_Serial1v+0x40>)
   d6cfe:	4621      	mov	r1, r4
   d6d00:	f7ff ffd0 	bl	d6ca4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6d04:	4628      	mov	r0, r5
   d6d06:	f7fd f9d5 	bl	d40b4 <__cxa_guard_release>
   d6d0a:	4a07      	ldr	r2, [pc, #28]	; (d6d28 <_Z22__fetch_global_Serial1v+0x44>)
   d6d0c:	4907      	ldr	r1, [pc, #28]	; (d6d2c <_Z22__fetch_global_Serial1v+0x48>)
   d6d0e:	4805      	ldr	r0, [pc, #20]	; (d6d24 <_Z22__fetch_global_Serial1v+0x40>)
   d6d10:	f000 fab4 	bl	d727c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6d14:	4803      	ldr	r0, [pc, #12]	; (d6d24 <_Z22__fetch_global_Serial1v+0x40>)
   d6d16:	bd38      	pop	{r3, r4, r5, pc}
   d6d18:	2003e470 	.word	0x2003e470
   d6d1c:	2003e474 	.word	0x2003e474
   d6d20:	2003e3ec 	.word	0x2003e3ec
   d6d24:	2003e3d8 	.word	0x2003e3d8
   d6d28:	2003e210 	.word	0x2003e210
   d6d2c:	000d6c21 	.word	0x000d6c21

000d6d30 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6d30:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6d32:	6883      	ldr	r3, [r0, #8]
   d6d34:	4604      	mov	r4, r0
   d6d36:	b90b      	cbnz	r3, d6d3c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6d38:	f000 fac5 	bl	d72c6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d3c:	68c3      	ldr	r3, [r0, #12]
   d6d3e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6d40:	68a3      	ldr	r3, [r4, #8]
   d6d42:	b11b      	cbz	r3, d6d4c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d44:	2203      	movs	r2, #3
   d6d46:	4621      	mov	r1, r4
   d6d48:	4620      	mov	r0, r4
   d6d4a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	2110      	movs	r1, #16
}
   d6d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6d54:	f000 ba97 	b.w	d7286 <_ZdlPvj>

000d6d58 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6d58:	4770      	bx	lr

000d6d5a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d5c:	4606      	mov	r6, r0
   d6d5e:	4615      	mov	r5, r2
   d6d60:	460c      	mov	r4, r1
   d6d62:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d64:	42bc      	cmp	r4, r7
   d6d66:	d006      	beq.n	d6d76 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6d68:	6833      	ldr	r3, [r6, #0]
   d6d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d6e:	689b      	ldr	r3, [r3, #8]
   d6d70:	4630      	mov	r0, r6
   d6d72:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d74:	e7f6      	b.n	d6d64 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d76:	4628      	mov	r0, r5
   d6d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d7a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d7a:	2200      	movs	r2, #0
   d6d7c:	7c00      	ldrb	r0, [r0, #16]
   d6d7e:	f7fe bba7 	b.w	d54d0 <HAL_I2C_Write_Data>

000d6d82 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d82:	2100      	movs	r1, #0
   d6d84:	7c00      	ldrb	r0, [r0, #16]
   d6d86:	f7fe bbab 	b.w	d54e0 <HAL_I2C_Available_Data>

000d6d8a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d8a:	2100      	movs	r1, #0
   d6d8c:	7c00      	ldrb	r0, [r0, #16]
   d6d8e:	f7fe bbaf 	b.w	d54f0 <HAL_I2C_Read_Data>

000d6d92 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d92:	2100      	movs	r1, #0
   d6d94:	7c00      	ldrb	r0, [r0, #16]
   d6d96:	f7fe bbb3 	b.w	d5500 <HAL_I2C_Peek_Data>

000d6d9a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d9a:	2100      	movs	r1, #0
   d6d9c:	7c00      	ldrb	r0, [r0, #16]
   d6d9e:	f7fe bbb7 	b.w	d5510 <HAL_I2C_Flush_Data>

000d6da2 <_ZN7TwoWireD0Ev>:
   d6da2:	b510      	push	{r4, lr}
   d6da4:	2114      	movs	r1, #20
   d6da6:	4604      	mov	r4, r0
   d6da8:	f000 fa6d 	bl	d7286 <_ZdlPvj>
   d6dac:	4620      	mov	r0, r4
   d6dae:	bd10      	pop	{r4, pc}

000d6db0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6db0:	b510      	push	{r4, lr}
   d6db2:	4604      	mov	r4, r0
   d6db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6db8:	4608      	mov	r0, r1
   d6dba:	60a3      	str	r3, [r4, #8]
   d6dbc:	2100      	movs	r1, #0
   d6dbe:	4b04      	ldr	r3, [pc, #16]	; (d6dd0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6dc0:	7420      	strb	r0, [r4, #16]
   d6dc2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6dc4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6dc6:	f7fe fbb3 	bl	d5530 <HAL_I2C_Init>

}
   d6dca:	4620      	mov	r0, r4
   d6dcc:	bd10      	pop	{r4, pc}
   d6dce:	bf00      	nop
   d6dd0:	000d9428 	.word	0x000d9428

000d6dd4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6dd4:	2300      	movs	r3, #0
   d6dd6:	461a      	mov	r2, r3
   d6dd8:	4619      	mov	r1, r3
   d6dda:	7c00      	ldrb	r0, [r0, #16]
   d6ddc:	f7fe bb58 	b.w	d5490 <HAL_I2C_Begin>

000d6de0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6de0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6de2:	2400      	movs	r4, #0
   d6de4:	7c00      	ldrb	r0, [r0, #16]
   d6de6:	9400      	str	r4, [sp, #0]
   d6de8:	f7fe fb5a 	bl	d54a0 <HAL_I2C_Request_Data>
  return result;
}
   d6dec:	b2c0      	uxtb	r0, r0
   d6dee:	b002      	add	sp, #8
   d6df0:	bd10      	pop	{r4, pc}

000d6df2 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
   d6df2:	b2db      	uxtb	r3, r3
   d6df4:	b2d2      	uxtb	r2, r2
   d6df6:	b2c9      	uxtb	r1, r1
   d6df8:	f7ff bff2 	b.w	d6de0 <_ZN7TwoWire11requestFromEhhh>

000d6dfc <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6dfc:	2200      	movs	r2, #0
   d6dfe:	7c00      	ldrb	r0, [r0, #16]
   d6e00:	f7fe bb56 	b.w	d54b0 <HAL_I2C_Begin_Transmission>

000d6e04 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6e04:	b2c9      	uxtb	r1, r1
   d6e06:	f7ff bff9 	b.w	d6dfc <_ZN7TwoWire17beginTransmissionEh>

000d6e0a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	7c00      	ldrb	r0, [r0, #16]
   d6e0e:	f7fe bb57 	b.w	d54c0 <HAL_I2C_End_Transmission>

000d6e12 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6e12:	2100      	movs	r1, #0
   d6e14:	7c00      	ldrb	r0, [r0, #16]
   d6e16:	f7fe bb83 	b.w	d5520 <HAL_I2C_Is_Enabled>

000d6e1a <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6e1a:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d6e1c:	2100      	movs	r1, #0
   d6e1e:	7c00      	ldrb	r0, [r0, #16]
   d6e20:	f7fe fb8e 	bl	d5540 <HAL_I2C_Acquire>
}
   d6e24:	fab0 f080 	clz	r0, r0
   d6e28:	0940      	lsrs	r0, r0, #5
   d6e2a:	bd08      	pop	{r3, pc}

000d6e2c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6e2c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d6e2e:	2100      	movs	r1, #0
   d6e30:	7c00      	ldrb	r0, [r0, #16]
   d6e32:	f7fe fb8d 	bl	d5550 <HAL_I2C_Release>
}
   d6e36:	fab0 f080 	clz	r0, r0
   d6e3a:	0940      	lsrs	r0, r0, #5
   d6e3c:	bd08      	pop	{r3, pc}

000d6e3e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e3e:	2200      	movs	r2, #0
   d6e40:	4611      	mov	r1, r2
   d6e42:	6840      	ldr	r0, [r0, #4]
   d6e44:	f7fe bc52 	b.w	d56ec <network_listening>

000d6e48 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e48:	2200      	movs	r2, #0
   d6e4a:	4611      	mov	r1, r2
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	f7fe bc5d 	b.w	d570c <network_get_listen_timeout>

000d6e52 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e52:	2200      	movs	r2, #0
   d6e54:	6840      	ldr	r0, [r0, #4]
   d6e56:	f7fe bc51 	b.w	d56fc <network_set_listen_timeout>

000d6e5a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e5a:	2200      	movs	r2, #0
   d6e5c:	f081 0101 	eor.w	r1, r1, #1
   d6e60:	6840      	ldr	r0, [r0, #4]
   d6e62:	f7fe bc3b 	b.w	d56dc <network_listen>

000d6e66 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6e66:	2300      	movs	r3, #0
   d6e68:	461a      	mov	r2, r3
   d6e6a:	2101      	movs	r1, #1
   d6e6c:	6840      	ldr	r0, [r0, #4]
   d6e6e:	f7fe bc2d 	b.w	d56cc <network_off>

000d6e72 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6e72:	2300      	movs	r3, #0
   d6e74:	461a      	mov	r2, r3
   d6e76:	4619      	mov	r1, r3
   d6e78:	6840      	ldr	r0, [r0, #4]
   d6e7a:	f7fe bc1f 	b.w	d56bc <network_on>

000d6e7e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e7e:	2200      	movs	r2, #0
   d6e80:	4611      	mov	r1, r2
   d6e82:	6840      	ldr	r0, [r0, #4]
   d6e84:	f7fe bc12 	b.w	d56ac <network_ready>

000d6e88 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e88:	2200      	movs	r2, #0
   d6e8a:	4611      	mov	r1, r2
   d6e8c:	6840      	ldr	r0, [r0, #4]
   d6e8e:	f7fe bbfd 	b.w	d568c <network_connecting>

000d6e92 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e92:	2200      	movs	r2, #0
   d6e94:	2102      	movs	r1, #2
   d6e96:	6840      	ldr	r0, [r0, #4]
   d6e98:	f7fe bc00 	b.w	d569c <network_disconnect>

000d6e9c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e9c:	2300      	movs	r3, #0
   d6e9e:	461a      	mov	r2, r3
   d6ea0:	6840      	ldr	r0, [r0, #4]
   d6ea2:	f7fe bbeb 	b.w	d567c <network_connect>

000d6ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6ea6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ea8:	4605      	mov	r5, r0
   d6eaa:	b188      	cbz	r0, d6ed0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6eac:	6804      	ldr	r4, [r0, #0]
   d6eae:	b14c      	cbz	r4, d6ec4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6eb0:	68a3      	ldr	r3, [r4, #8]
   d6eb2:	b11b      	cbz	r3, d6ebc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6eb4:	2203      	movs	r2, #3
   d6eb6:	4621      	mov	r1, r4
   d6eb8:	4620      	mov	r0, r4
   d6eba:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ebc:	2110      	movs	r1, #16
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	f000 f9e1 	bl	d7286 <_ZdlPvj>
   d6ec4:	4628      	mov	r0, r5
   d6ec6:	2114      	movs	r1, #20
      }
   d6ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ecc:	f000 b9db 	b.w	d7286 <_ZdlPvj>
   d6ed0:	bd38      	pop	{r3, r4, r5, pc}

000d6ed2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6ed2:	b110      	cbz	r0, d6eda <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6ed4:	6803      	ldr	r3, [r0, #0]
   d6ed6:	685b      	ldr	r3, [r3, #4]
   d6ed8:	4718      	bx	r3
   d6eda:	4770      	bx	lr

000d6edc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6edc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ede:	6803      	ldr	r3, [r0, #0]
   d6ee0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6ee2:	b1bb      	cbz	r3, d6f14 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6ee4:	6858      	ldr	r0, [r3, #4]
   d6ee6:	f7fe fa5b 	bl	d53a0 <os_thread_is_current>
   d6eea:	b978      	cbnz	r0, d6f0c <_ZN6ThreadD1Ev+0x30>
   d6eec:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6eee:	7c5a      	ldrb	r2, [r3, #17]
   d6ef0:	b912      	cbnz	r2, d6ef8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6ef2:	6858      	ldr	r0, [r3, #4]
   d6ef4:	f7fe fa5c 	bl	d53b0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6ef8:	6823      	ldr	r3, [r4, #0]
   d6efa:	6858      	ldr	r0, [r3, #4]
   d6efc:	f7fe fa60 	bl	d53c0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f00:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f02:	2300      	movs	r3, #0
   d6f04:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6f06:	b128      	cbz	r0, d6f14 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6f08:	f7ff ffcd 	bl	d6ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f0c:	6820      	ldr	r0, [r4, #0]
   d6f0e:	b108      	cbz	r0, d6f14 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6f10:	f7ff ffc9 	bl	d6ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6f14:	4620      	mov	r0, r4
   d6f16:	bd10      	pop	{r4, pc}

000d6f18 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6f18:	b538      	push	{r3, r4, r5, lr}
   d6f1a:	4b0c      	ldr	r3, [pc, #48]	; (d6f4c <_ZN5spark9MeshClassD1Ev+0x34>)
   d6f1c:	6003      	str	r3, [r0, #0]
   d6f1e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f20:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6f24:	b108      	cbz	r0, d6f2a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6f26:	f7fd f8be 	bl	d40a6 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f2a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6f2e:	b135      	cbz	r5, d6f3e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f30:	4628      	mov	r0, r5
   d6f32:	f7ff ffd3 	bl	d6edc <_ZN6ThreadD1Ev>
   d6f36:	2104      	movs	r1, #4
   d6f38:	4628      	mov	r0, r5
   d6f3a:	f000 f9a4 	bl	d7286 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f3e:	68a0      	ldr	r0, [r4, #8]
   d6f40:	b108      	cbz	r0, d6f46 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6f42:	f7ff ffc6 	bl	d6ed2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6f46:	4620      	mov	r0, r4
   d6f48:	bd38      	pop	{r3, r4, r5, pc}
   d6f4a:	bf00      	nop
   d6f4c:	000d9450 	.word	0x000d9450

000d6f50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6f50:	b538      	push	{r3, r4, r5, lr}
   d6f52:	4c0e      	ldr	r4, [pc, #56]	; (d6f8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6f54:	4b0e      	ldr	r3, [pc, #56]	; (d6f90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6f56:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f58:	2500      	movs	r5, #0
   d6f5a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f5c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f60:	6063      	str	r3, [r4, #4]
   d6f62:	60a5      	str	r5, [r4, #8]
   d6f64:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f68:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f6c:	f7fe fa38 	bl	d53e0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f70:	4b08      	ldr	r3, [pc, #32]	; (d6f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6f72:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f76:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6f7a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	4a06      	ldr	r2, [pc, #24]	; (d6f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6f80:	4906      	ldr	r1, [pc, #24]	; (d6f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f86:	f000 b979 	b.w	d727c <__aeabi_atexit>
   d6f8a:	bf00      	nop
   d6f8c:	2003e4f8 	.word	0x2003e4f8
   d6f90:	000d9484 	.word	0x000d9484
   d6f94:	000d9450 	.word	0x000d9450
   d6f98:	2003e210 	.word	0x2003e210
   d6f9c:	000d6f19 	.word	0x000d6f19

000d6fa0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6fa0:	2300      	movs	r3, #0
   d6fa2:	461a      	mov	r2, r3
   d6fa4:	6840      	ldr	r0, [r0, #4]
   d6fa6:	f7fe bb69 	b.w	d567c <network_connect>

000d6faa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6faa:	2200      	movs	r2, #0
   d6fac:	2102      	movs	r1, #2
   d6fae:	6840      	ldr	r0, [r0, #4]
   d6fb0:	f7fe bb74 	b.w	d569c <network_disconnect>

000d6fb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6fb4:	2200      	movs	r2, #0
   d6fb6:	4611      	mov	r1, r2
   d6fb8:	6840      	ldr	r0, [r0, #4]
   d6fba:	f7fe bb67 	b.w	d568c <network_connecting>

000d6fbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6fbe:	2200      	movs	r2, #0
   d6fc0:	4611      	mov	r1, r2
   d6fc2:	6840      	ldr	r0, [r0, #4]
   d6fc4:	f7fe bb72 	b.w	d56ac <network_ready>

000d6fc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6fc8:	2300      	movs	r3, #0
   d6fca:	461a      	mov	r2, r3
   d6fcc:	4619      	mov	r1, r3
   d6fce:	6840      	ldr	r0, [r0, #4]
   d6fd0:	f7fe bb74 	b.w	d56bc <network_on>

000d6fd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6fd4:	2300      	movs	r3, #0
   d6fd6:	461a      	mov	r2, r3
   d6fd8:	4619      	mov	r1, r3
   d6fda:	6840      	ldr	r0, [r0, #4]
   d6fdc:	f7fe bb76 	b.w	d56cc <network_off>

000d6fe0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6fe0:	2200      	movs	r2, #0
   d6fe2:	f081 0101 	eor.w	r1, r1, #1
   d6fe6:	6840      	ldr	r0, [r0, #4]
   d6fe8:	f7fe bb78 	b.w	d56dc <network_listen>

000d6fec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6fec:	2200      	movs	r2, #0
   d6fee:	6840      	ldr	r0, [r0, #4]
   d6ff0:	f7fe bb84 	b.w	d56fc <network_set_listen_timeout>

000d6ff4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6ff4:	2200      	movs	r2, #0
   d6ff6:	4611      	mov	r1, r2
   d6ff8:	6840      	ldr	r0, [r0, #4]
   d6ffa:	f7fe bb87 	b.w	d570c <network_get_listen_timeout>

000d6ffe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6ffe:	2200      	movs	r2, #0
   d7000:	4611      	mov	r1, r2
   d7002:	6840      	ldr	r0, [r0, #4]
   d7004:	f7fe bb72 	b.w	d56ec <network_listening>

000d7008 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d700c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d700e:	b095      	sub	sp, #84	; 0x54
   d7010:	4616      	mov	r6, r2
   d7012:	460d      	mov	r5, r1
   d7014:	4607      	mov	r7, r0
    IPAddress addr;
   d7016:	f7ff fcf7 	bl	d6a08 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d701a:	4621      	mov	r1, r4
   d701c:	2220      	movs	r2, #32
   d701e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7020:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7022:	f001 fb35 	bl	d8690 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7026:	2340      	movs	r3, #64	; 0x40
   d7028:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d702a:	4621      	mov	r1, r4
   d702c:	466b      	mov	r3, sp
   d702e:	aa0c      	add	r2, sp, #48	; 0x30
   d7030:	4630      	mov	r0, r6
   d7032:	f7fe f935 	bl	d52a0 <netdb_getaddrinfo>
    if (!r) {
   d7036:	4604      	mov	r4, r0
   d7038:	2800      	cmp	r0, #0
   d703a:	d144      	bne.n	d70c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d703c:	4602      	mov	r2, r0
   d703e:	2101      	movs	r1, #1
   d7040:	6868      	ldr	r0, [r5, #4]
   d7042:	f7fe fb33 	bl	d56ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7046:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7048:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d704a:	4622      	mov	r2, r4
   d704c:	6868      	ldr	r0, [r5, #4]
   d704e:	f7fe fb2d 	bl	d56ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7052:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7054:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7056:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7058:	2e00      	cmp	r6, #0
   d705a:	d034      	beq.n	d70c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d705c:	2900      	cmp	r1, #0
   d705e:	d132      	bne.n	d70c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7060:	6873      	ldr	r3, [r6, #4]
   d7062:	2b02      	cmp	r3, #2
   d7064:	d002      	beq.n	d706c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7066:	2b0a      	cmp	r3, #10
   d7068:	d009      	beq.n	d707e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d706a:	e02a      	b.n	d70c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d706c:	f1b8 0f00 	cmp.w	r8, #0
   d7070:	d027      	beq.n	d70c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7072:	6971      	ldr	r1, [r6, #20]
   d7074:	4638      	mov	r0, r7
   d7076:	3104      	adds	r1, #4
   d7078:	f7ff fcf3 	bl	d6a62 <_ZN9IPAddressaSEPKh>
   d707c:	e020      	b.n	d70c0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d707e:	f1b9 0f00 	cmp.w	r9, #0
   d7082:	d01e      	beq.n	d70c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7084:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7086:	2211      	movs	r2, #17
   d7088:	a801      	add	r0, sp, #4
   d708a:	f001 fb01 	bl	d8690 <memset>
                    a.v = 6;
   d708e:	2306      	movs	r3, #6
   d7090:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7094:	ad01      	add	r5, sp, #4
   d7096:	f104 0308 	add.w	r3, r4, #8
   d709a:	3418      	adds	r4, #24
   d709c:	6818      	ldr	r0, [r3, #0]
   d709e:	6859      	ldr	r1, [r3, #4]
   d70a0:	462a      	mov	r2, r5
   d70a2:	c203      	stmia	r2!, {r0, r1}
   d70a4:	3308      	adds	r3, #8
   d70a6:	42a3      	cmp	r3, r4
   d70a8:	4615      	mov	r5, r2
   d70aa:	d1f7      	bne.n	d709c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d70ac:	a901      	add	r1, sp, #4
   d70ae:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d70b0:	ad07      	add	r5, sp, #28
   d70b2:	f7ff fcb7 	bl	d6a24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d70b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70b8:	1d3c      	adds	r4, r7, #4
   d70ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70bc:	682b      	ldr	r3, [r5, #0]
   d70be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d70c0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d70c2:	69f6      	ldr	r6, [r6, #28]
   d70c4:	e7c8      	b.n	d7058 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d70c6:	9800      	ldr	r0, [sp, #0]
   d70c8:	f7fe f8e2 	bl	d5290 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d70cc:	4638      	mov	r0, r7
   d70ce:	b015      	add	sp, #84	; 0x54
   d70d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d70d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d70d4:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d70d6:	4a03      	ldr	r2, [pc, #12]	; (d70e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d70d8:	601a      	str	r2, [r3, #0]
   d70da:	2200      	movs	r2, #0
   d70dc:	605a      	str	r2, [r3, #4]
   d70de:	4770      	bx	lr
   d70e0:	2003e6cc 	.word	0x2003e6cc
   d70e4:	000d9484 	.word	0x000d9484

000d70e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d70e8:	b510      	push	{r4, lr}
   d70ea:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d70ec:	480f      	ldr	r0, [pc, #60]	; (d712c <pinAvailable+0x44>)
   d70ee:	f7fe fd49 	bl	d5b84 <_ZN8SPIClass9isEnabledEv>
   d70f2:	b128      	cbz	r0, d7100 <pinAvailable+0x18>
   d70f4:	f1a4 030b 	sub.w	r3, r4, #11
   d70f8:	2b02      	cmp	r3, #2
   d70fa:	d801      	bhi.n	d7100 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d70fc:	2000      	movs	r0, #0
   d70fe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7100:	f000 f87c 	bl	d71fc <_Z19__fetch_global_Wirev>
   d7104:	f7ff fe85 	bl	d6e12 <_ZN7TwoWire9isEnabledEv>
   d7108:	b108      	cbz	r0, d710e <pinAvailable+0x26>
   d710a:	2c01      	cmp	r4, #1
   d710c:	d9f6      	bls.n	d70fc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d710e:	f7ff fde9 	bl	d6ce4 <_Z22__fetch_global_Serial1v>
   d7112:	f7ff fde4 	bl	d6cde <_ZN11USARTSerial9isEnabledEv>
   d7116:	b118      	cbz	r0, d7120 <pinAvailable+0x38>
   d7118:	f1a4 0309 	sub.w	r3, r4, #9
   d711c:	2b01      	cmp	r3, #1
   d711e:	d9ed      	bls.n	d70fc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7120:	2c23      	cmp	r4, #35	; 0x23
   d7122:	bf8c      	ite	hi
   d7124:	2000      	movhi	r0, #0
   d7126:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7128:	bd10      	pop	{r4, pc}
   d712a:	bf00      	nop
   d712c:	2003e6d4 	.word	0x2003e6d4

000d7130 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7130:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7132:	b538      	push	{r3, r4, r5, lr}
   d7134:	4604      	mov	r4, r0
   d7136:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7138:	d80a      	bhi.n	d7150 <pinMode+0x20>
   d713a:	29ff      	cmp	r1, #255	; 0xff
   d713c:	d008      	beq.n	d7150 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d713e:	f7ff ffd3 	bl	d70e8 <pinAvailable>
   d7142:	b128      	cbz	r0, d7150 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7144:	4629      	mov	r1, r5
   d7146:	4620      	mov	r0, r4
}
   d7148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d714c:	f7fe b8c0 	b.w	d52d0 <HAL_Pin_Mode>
   d7150:	bd38      	pop	{r3, r4, r5, pc}

000d7152 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7152:	b538      	push	{r3, r4, r5, lr}
   d7154:	4604      	mov	r4, r0
   d7156:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7158:	f7fe f8c2 	bl	d52e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d715c:	28ff      	cmp	r0, #255	; 0xff
   d715e:	d010      	beq.n	d7182 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7160:	2806      	cmp	r0, #6
   d7162:	d804      	bhi.n	d716e <digitalWrite+0x1c>
   d7164:	234d      	movs	r3, #77	; 0x4d
   d7166:	fa23 f000 	lsr.w	r0, r3, r0
   d716a:	07c3      	lsls	r3, r0, #31
   d716c:	d409      	bmi.n	d7182 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d716e:	4620      	mov	r0, r4
   d7170:	f7ff ffba 	bl	d70e8 <pinAvailable>
   d7174:	b128      	cbz	r0, d7182 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7176:	4629      	mov	r1, r5
   d7178:	4620      	mov	r0, r4
}
   d717a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d717e:	f7fe b8b7 	b.w	d52f0 <HAL_GPIO_Write>
   d7182:	bd38      	pop	{r3, r4, r5, pc}

000d7184 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7184:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7186:	b510      	push	{r4, lr}
   d7188:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d718a:	bf9c      	itt	ls
   d718c:	340e      	addls	r4, #14
   d718e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7190:	4620      	mov	r0, r4
   d7192:	f7ff ffa9 	bl	d70e8 <pinAvailable>
   d7196:	b150      	cbz	r0, d71ae <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7198:	2103      	movs	r1, #3
   d719a:	4620      	mov	r0, r4
   d719c:	f7fe f890 	bl	d52c0 <HAL_Validate_Pin_Function>
   d71a0:	2803      	cmp	r0, #3
   d71a2:	d104      	bne.n	d71ae <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d71a4:	4620      	mov	r0, r4
}
   d71a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d71aa:	f7fe b8a9 	b.w	d5300 <HAL_ADC_Read>
}
   d71ae:	2000      	movs	r0, #0
   d71b0:	bd10      	pop	{r4, pc}

000d71b2 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d71b2:	f7fe b8ad 	b.w	d5310 <HAL_Pulse_In>
	...

000d71b8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d71b8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d71ba:	4c0c      	ldr	r4, [pc, #48]	; (d71ec <_GLOBAL__sub_I_SPI+0x34>)
   d71bc:	4e0c      	ldr	r6, [pc, #48]	; (d71f0 <_GLOBAL__sub_I_SPI+0x38>)
   d71be:	4d0d      	ldr	r5, [pc, #52]	; (d71f4 <_GLOBAL__sub_I_SPI+0x3c>)
   d71c0:	2100      	movs	r1, #0
   d71c2:	4620      	mov	r0, r4
   d71c4:	f7fe fcca 	bl	d5b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d71c8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d71ca:	4c0b      	ldr	r4, [pc, #44]	; (d71f8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d71cc:	4632      	mov	r2, r6
   d71ce:	4629      	mov	r1, r5
   d71d0:	f000 f854 	bl	d727c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d71d4:	2101      	movs	r1, #1
   d71d6:	4620      	mov	r0, r4
   d71d8:	f7fe fcc0 	bl	d5b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d71dc:	4632      	mov	r2, r6
   d71de:	4629      	mov	r1, r5
   d71e0:	4620      	mov	r0, r4
   d71e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d71e6:	f000 b849 	b.w	d727c <__aeabi_atexit>
   d71ea:	bf00      	nop
   d71ec:	2003e6d4 	.word	0x2003e6d4
   d71f0:	2003e210 	.word	0x2003e210
   d71f4:	000d5b4d 	.word	0x000d5b4d
   d71f8:	2003e6e4 	.word	0x2003e6e4

000d71fc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d71fc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d71fe:	4d0b      	ldr	r5, [pc, #44]	; (d722c <_Z19__fetch_global_Wirev+0x30>)
   d7200:	6829      	ldr	r1, [r5, #0]
   d7202:	f011 0401 	ands.w	r4, r1, #1
   d7206:	d10f      	bne.n	d7228 <_Z19__fetch_global_Wirev+0x2c>
   d7208:	4628      	mov	r0, r5
   d720a:	f7fc ff4e 	bl	d40aa <__cxa_guard_acquire>
   d720e:	b158      	cbz	r0, d7228 <_Z19__fetch_global_Wirev+0x2c>
   d7210:	4621      	mov	r1, r4
   d7212:	4807      	ldr	r0, [pc, #28]	; (d7230 <_Z19__fetch_global_Wirev+0x34>)
   d7214:	f7ff fdcc 	bl	d6db0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7218:	4628      	mov	r0, r5
   d721a:	f7fc ff4b 	bl	d40b4 <__cxa_guard_release>
   d721e:	4a05      	ldr	r2, [pc, #20]	; (d7234 <_Z19__fetch_global_Wirev+0x38>)
   d7220:	4905      	ldr	r1, [pc, #20]	; (d7238 <_Z19__fetch_global_Wirev+0x3c>)
   d7222:	4803      	ldr	r0, [pc, #12]	; (d7230 <_Z19__fetch_global_Wirev+0x34>)
   d7224:	f000 f82a 	bl	d727c <__aeabi_atexit>
	return wire;
}
   d7228:	4801      	ldr	r0, [pc, #4]	; (d7230 <_Z19__fetch_global_Wirev+0x34>)
   d722a:	bd38      	pop	{r3, r4, r5, pc}
   d722c:	2003e6f8 	.word	0x2003e6f8
   d7230:	2003e710 	.word	0x2003e710
   d7234:	2003e210 	.word	0x2003e210
   d7238:	000d6d59 	.word	0x000d6d59

000d723c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d723c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2);
   d723e:	4c0b      	ldr	r4, [pc, #44]	; (d726c <_Z20__fetch_global_Wire1v+0x30>)
   d7240:	6823      	ldr	r3, [r4, #0]
   d7242:	07db      	lsls	r3, r3, #31
   d7244:	d40f      	bmi.n	d7266 <_Z20__fetch_global_Wire1v+0x2a>
   d7246:	4620      	mov	r0, r4
   d7248:	f7fc ff2f 	bl	d40aa <__cxa_guard_acquire>
   d724c:	b158      	cbz	r0, d7266 <_Z20__fetch_global_Wire1v+0x2a>
   d724e:	2101      	movs	r1, #1
   d7250:	4807      	ldr	r0, [pc, #28]	; (d7270 <_Z20__fetch_global_Wire1v+0x34>)
   d7252:	f7ff fdad 	bl	d6db0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7256:	4620      	mov	r0, r4
   d7258:	f7fc ff2c 	bl	d40b4 <__cxa_guard_release>
   d725c:	4a05      	ldr	r2, [pc, #20]	; (d7274 <_Z20__fetch_global_Wire1v+0x38>)
   d725e:	4906      	ldr	r1, [pc, #24]	; (d7278 <_Z20__fetch_global_Wire1v+0x3c>)
   d7260:	4803      	ldr	r0, [pc, #12]	; (d7270 <_Z20__fetch_global_Wire1v+0x34>)
   d7262:	f000 f80b 	bl	d727c <__aeabi_atexit>
	return wire;
}
   d7266:	4802      	ldr	r0, [pc, #8]	; (d7270 <_Z20__fetch_global_Wire1v+0x34>)
   d7268:	bd10      	pop	{r4, pc}
   d726a:	bf00      	nop
   d726c:	2003e724 	.word	0x2003e724
   d7270:	2003e6fc 	.word	0x2003e6fc
   d7274:	2003e210 	.word	0x2003e210
   d7278:	000d6d59 	.word	0x000d6d59

000d727c <__aeabi_atexit>:
   d727c:	460b      	mov	r3, r1
   d727e:	4601      	mov	r1, r0
   d7280:	4618      	mov	r0, r3
   d7282:	f001 b8d9 	b.w	d8438 <__cxa_atexit>

000d7286 <_ZdlPvj>:
   d7286:	f7fc bf0c 	b.w	d40a2 <_ZdlPv>

000d728a <_ZSt19__throw_logic_errorPKc>:
   d728a:	b508      	push	{r3, lr}
   d728c:	f7fe fab6 	bl	d57fc <abort>

000d7290 <_ZSt24__throw_out_of_range_fmtPKcz>:
   d7290:	b40f      	push	{r0, r1, r2, r3}
   d7292:	b580      	push	{r7, lr}
   d7294:	b082      	sub	sp, #8
   d7296:	af00      	add	r7, sp, #0
   d7298:	f107 0410 	add.w	r4, r7, #16
   d729c:	f854 5b04 	ldr.w	r5, [r4], #4
   d72a0:	4628      	mov	r0, r5
   d72a2:	f001 fa52 	bl	d874a <strlen>
   d72a6:	f200 230e 	addw	r3, r0, #526	; 0x20e
   d72aa:	f023 0307 	bic.w	r3, r3, #7
   d72ae:	ebad 0d03 	sub.w	sp, sp, r3
   d72b2:	f500 7100 	add.w	r1, r0, #512	; 0x200
   d72b6:	4623      	mov	r3, r4
   d72b8:	462a      	mov	r2, r5
   d72ba:	4668      	mov	r0, sp
   d72bc:	607c      	str	r4, [r7, #4]
   d72be:	f000 f851 	bl	d7364 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   d72c2:	f7fe fa9b 	bl	d57fc <abort>

000d72c6 <_ZSt25__throw_bad_function_callv>:
   d72c6:	b508      	push	{r3, lr}
   d72c8:	f7fe fa98 	bl	d57fc <abort>

000d72cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   d72cc:	b580      	push	{r7, lr}
   d72ce:	b09c      	sub	sp, #112	; 0x70
   d72d0:	af00      	add	r7, sp, #0
   d72d2:	1a0e      	subs	r6, r1, r0
   d72d4:	4680      	mov	r8, r0
   d72d6:	226c      	movs	r2, #108	; 0x6c
   d72d8:	490e      	ldr	r1, [pc, #56]	; (d7314 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   d72da:	1d38      	adds	r0, r7, #4
   d72dc:	f001 f9b2 	bl	d8644 <memcpy>
   d72e0:	f106 037a 	add.w	r3, r6, #122	; 0x7a
   d72e4:	f023 0307 	bic.w	r3, r3, #7
   d72e8:	ebad 0d03 	sub.w	sp, sp, r3
   d72ec:	226b      	movs	r2, #107	; 0x6b
   d72ee:	1d39      	adds	r1, r7, #4
   d72f0:	1c75      	adds	r5, r6, #1
   d72f2:	4668      	mov	r0, sp
   d72f4:	f001 f9a6 	bl	d8644 <memcpy>
   d72f8:	446d      	add	r5, sp
   d72fa:	4632      	mov	r2, r6
   d72fc:	4641      	mov	r1, r8
   d72fe:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
   d7302:	f001 f99f 	bl	d8644 <memcpy>
   d7306:	2300      	movs	r3, #0
   d7308:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
   d730c:	4668      	mov	r0, sp
   d730e:	f7ff ffbc 	bl	d728a <_ZSt19__throw_logic_errorPKc>
   d7312:	bf00      	nop
   d7314:	000d94b0 	.word	0x000d94b0

000d7318 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   d7318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d731c:	b084      	sub	sp, #16
   d731e:	af04      	add	r7, sp, #16
   d7320:	b088      	sub	sp, #32
   d7322:	2301      	movs	r3, #1
   d7324:	9302      	str	r3, [sp, #8]
   d7326:	2302      	movs	r3, #2
   d7328:	9301      	str	r3, [sp, #4]
   d732a:	4b0d      	ldr	r3, [pc, #52]	; (d7360 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
   d732c:	681b      	ldr	r3, [r3, #0]
   d732e:	9300      	str	r3, [sp, #0]
   d7330:	4606      	mov	r6, r0
   d7332:	2300      	movs	r3, #0
   d7334:	a80a      	add	r0, sp, #40	; 0x28
   d7336:	4688      	mov	r8, r1
   d7338:	f000 f8fa 	bl	d7530 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
   d733c:	4540      	cmp	r0, r8
   d733e:	ad04      	add	r5, sp, #16
   d7340:	4604      	mov	r4, r0
   d7342:	d807      	bhi.n	d7354 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3c>
   d7344:	f1c0 0118 	rsb	r1, r0, #24
   d7348:	4602      	mov	r2, r0
   d734a:	4429      	add	r1, r5
   d734c:	4630      	mov	r0, r6
   d734e:	f001 f979 	bl	d8644 <memcpy>
   d7352:	e001      	b.n	d7358 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x40>
   d7354:	f04f 34ff 	mov.w	r4, #4294967295
   d7358:	4620      	mov	r0, r4
   d735a:	46bd      	mov	sp, r7
   d735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7360:	2003e158 	.word	0x2003e158

000d7364 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   d7364:	3901      	subs	r1, #1
   d7366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d736a:	4606      	mov	r6, r0
   d736c:	4615      	mov	r5, r2
   d736e:	1847      	adds	r7, r0, r1
   d7370:	4604      	mov	r4, r0
   d7372:	782a      	ldrb	r2, [r5, #0]
   d7374:	b39a      	cbz	r2, d73de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   d7376:	42bc      	cmp	r4, r7
   d7378:	d22d      	bcs.n	d73d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   d737a:	2a25      	cmp	r2, #37	; 0x25
   d737c:	d123      	bne.n	d73c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   d737e:	786a      	ldrb	r2, [r5, #1]
   d7380:	2a73      	cmp	r2, #115	; 0x73
   d7382:	d005      	beq.n	d7390 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   d7384:	2a7a      	cmp	r2, #122	; 0x7a
   d7386:	d00e      	beq.n	d73a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
   d7388:	2a25      	cmp	r2, #37	; 0x25
   d738a:	d11c      	bne.n	d73c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   d738c:	3501      	adds	r5, #1
   d738e:	e01a      	b.n	d73c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   d7390:	1d19      	adds	r1, r3, #4
   d7392:	681b      	ldr	r3, [r3, #0]
   d7394:	3b01      	subs	r3, #1
   d7396:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d739a:	b1ca      	cbz	r2, d73d0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
   d739c:	42bc      	cmp	r4, r7
   d739e:	d01a      	beq.n	d73d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   d73a0:	f804 2b01 	strb.w	r2, [r4], #1
   d73a4:	e7f7      	b.n	d7396 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x32>
   d73a6:	78aa      	ldrb	r2, [r5, #2]
   d73a8:	2a75      	cmp	r2, #117	; 0x75
   d73aa:	d10c      	bne.n	d73c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
   d73ac:	681a      	ldr	r2, [r3, #0]
   d73ae:	1b39      	subs	r1, r7, r4
   d73b0:	4620      	mov	r0, r4
   d73b2:	f103 0804 	add.w	r8, r3, #4
   d73b6:	f7ff ffaf 	bl	d7318 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   d73ba:	2800      	cmp	r0, #0
   d73bc:	dd0b      	ble.n	d73d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x72>
   d73be:	4404      	add	r4, r0
   d73c0:	3503      	adds	r5, #3
   d73c2:	4643      	mov	r3, r8
   d73c4:	e7d5      	b.n	d7372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   d73c6:	782a      	ldrb	r2, [r5, #0]
   d73c8:	7022      	strb	r2, [r4, #0]
   d73ca:	3501      	adds	r5, #1
   d73cc:	3401      	adds	r4, #1
   d73ce:	e7d0      	b.n	d7372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   d73d0:	3502      	adds	r5, #2
   d73d2:	460b      	mov	r3, r1
   d73d4:	e7cd      	b.n	d7372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
   d73d6:	4621      	mov	r1, r4
   d73d8:	4630      	mov	r0, r6
   d73da:	f7ff ff77 	bl	d72cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   d73de:	7022      	strb	r2, [r4, #0]
   d73e0:	1ba0      	subs	r0, r4, r6
   d73e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d73e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d73e8:	4b18      	ldr	r3, [pc, #96]	; (d744c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d73ea:	681a      	ldr	r2, [r3, #0]
   d73ec:	07d1      	lsls	r1, r2, #31
   d73ee:	bf5c      	itt	pl
   d73f0:	2201      	movpl	r2, #1
   d73f2:	601a      	strpl	r2, [r3, #0]
   d73f4:	4b16      	ldr	r3, [pc, #88]	; (d7450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d73f6:	681a      	ldr	r2, [r3, #0]
   d73f8:	07d2      	lsls	r2, r2, #31
   d73fa:	bf5c      	itt	pl
   d73fc:	2201      	movpl	r2, #1
   d73fe:	601a      	strpl	r2, [r3, #0]
   d7400:	4b14      	ldr	r3, [pc, #80]	; (d7454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7402:	681a      	ldr	r2, [r3, #0]
   d7404:	07d0      	lsls	r0, r2, #31
   d7406:	bf5c      	itt	pl
   d7408:	2201      	movpl	r2, #1
   d740a:	601a      	strpl	r2, [r3, #0]
   d740c:	4b12      	ldr	r3, [pc, #72]	; (d7458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d740e:	681a      	ldr	r2, [r3, #0]
   d7410:	07d1      	lsls	r1, r2, #31
   d7412:	bf5c      	itt	pl
   d7414:	2201      	movpl	r2, #1
   d7416:	601a      	strpl	r2, [r3, #0]
   d7418:	4b10      	ldr	r3, [pc, #64]	; (d745c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d741a:	681a      	ldr	r2, [r3, #0]
   d741c:	07d2      	lsls	r2, r2, #31
   d741e:	bf5c      	itt	pl
   d7420:	2201      	movpl	r2, #1
   d7422:	601a      	strpl	r2, [r3, #0]
   d7424:	4b0e      	ldr	r3, [pc, #56]	; (d7460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7426:	681a      	ldr	r2, [r3, #0]
   d7428:	07d0      	lsls	r0, r2, #31
   d742a:	bf5c      	itt	pl
   d742c:	2201      	movpl	r2, #1
   d742e:	601a      	strpl	r2, [r3, #0]
   d7430:	4b0c      	ldr	r3, [pc, #48]	; (d7464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7432:	681a      	ldr	r2, [r3, #0]
   d7434:	07d1      	lsls	r1, r2, #31
   d7436:	bf5c      	itt	pl
   d7438:	2201      	movpl	r2, #1
   d743a:	601a      	strpl	r2, [r3, #0]
   d743c:	4b0a      	ldr	r3, [pc, #40]	; (d7468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d743e:	681a      	ldr	r2, [r3, #0]
   d7440:	07d2      	lsls	r2, r2, #31
   d7442:	bf5c      	itt	pl
   d7444:	2201      	movpl	r2, #1
   d7446:	601a      	strpl	r2, [r3, #0]
   d7448:	4770      	bx	lr
   d744a:	bf00      	nop
   d744c:	2003e744 	.word	0x2003e744
   d7450:	2003e740 	.word	0x2003e740
   d7454:	2003e73c 	.word	0x2003e73c
   d7458:	2003e738 	.word	0x2003e738
   d745c:	2003e734 	.word	0x2003e734
   d7460:	2003e730 	.word	0x2003e730
   d7464:	2003e72c 	.word	0x2003e72c
   d7468:	2003e728 	.word	0x2003e728

000d746c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d746c:	4b24      	ldr	r3, [pc, #144]	; (d7500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d746e:	681a      	ldr	r2, [r3, #0]
   d7470:	07d0      	lsls	r0, r2, #31
   d7472:	bf5c      	itt	pl
   d7474:	2201      	movpl	r2, #1
   d7476:	601a      	strpl	r2, [r3, #0]
   d7478:	4b22      	ldr	r3, [pc, #136]	; (d7504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d747a:	681a      	ldr	r2, [r3, #0]
   d747c:	07d1      	lsls	r1, r2, #31
   d747e:	bf5c      	itt	pl
   d7480:	2201      	movpl	r2, #1
   d7482:	601a      	strpl	r2, [r3, #0]
   d7484:	4b20      	ldr	r3, [pc, #128]	; (d7508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7486:	681a      	ldr	r2, [r3, #0]
   d7488:	07d2      	lsls	r2, r2, #31
   d748a:	bf5c      	itt	pl
   d748c:	2201      	movpl	r2, #1
   d748e:	601a      	strpl	r2, [r3, #0]
   d7490:	4b1e      	ldr	r3, [pc, #120]	; (d750c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7492:	681a      	ldr	r2, [r3, #0]
   d7494:	07d0      	lsls	r0, r2, #31
   d7496:	bf5c      	itt	pl
   d7498:	2201      	movpl	r2, #1
   d749a:	601a      	strpl	r2, [r3, #0]
   d749c:	4b1c      	ldr	r3, [pc, #112]	; (d7510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d749e:	681a      	ldr	r2, [r3, #0]
   d74a0:	07d1      	lsls	r1, r2, #31
   d74a2:	bf5c      	itt	pl
   d74a4:	2201      	movpl	r2, #1
   d74a6:	601a      	strpl	r2, [r3, #0]
   d74a8:	4b1a      	ldr	r3, [pc, #104]	; (d7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d74aa:	681a      	ldr	r2, [r3, #0]
   d74ac:	07d2      	lsls	r2, r2, #31
   d74ae:	bf5c      	itt	pl
   d74b0:	2201      	movpl	r2, #1
   d74b2:	601a      	strpl	r2, [r3, #0]
   d74b4:	4b18      	ldr	r3, [pc, #96]	; (d7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d74b6:	681a      	ldr	r2, [r3, #0]
   d74b8:	07d0      	lsls	r0, r2, #31
   d74ba:	bf5c      	itt	pl
   d74bc:	2201      	movpl	r2, #1
   d74be:	601a      	strpl	r2, [r3, #0]
   d74c0:	4b16      	ldr	r3, [pc, #88]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d74c2:	681a      	ldr	r2, [r3, #0]
   d74c4:	07d1      	lsls	r1, r2, #31
   d74c6:	bf5c      	itt	pl
   d74c8:	2201      	movpl	r2, #1
   d74ca:	601a      	strpl	r2, [r3, #0]
   d74cc:	4b14      	ldr	r3, [pc, #80]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d74ce:	681a      	ldr	r2, [r3, #0]
   d74d0:	07d2      	lsls	r2, r2, #31
   d74d2:	bf5c      	itt	pl
   d74d4:	2201      	movpl	r2, #1
   d74d6:	601a      	strpl	r2, [r3, #0]
   d74d8:	4b12      	ldr	r3, [pc, #72]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d74da:	681a      	ldr	r2, [r3, #0]
   d74dc:	07d0      	lsls	r0, r2, #31
   d74de:	bf5c      	itt	pl
   d74e0:	2201      	movpl	r2, #1
   d74e2:	601a      	strpl	r2, [r3, #0]
   d74e4:	4b10      	ldr	r3, [pc, #64]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d74e6:	681a      	ldr	r2, [r3, #0]
   d74e8:	07d1      	lsls	r1, r2, #31
   d74ea:	bf5c      	itt	pl
   d74ec:	2201      	movpl	r2, #1
   d74ee:	601a      	strpl	r2, [r3, #0]
   d74f0:	4b0e      	ldr	r3, [pc, #56]	; (d752c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d74f2:	681a      	ldr	r2, [r3, #0]
   d74f4:	07d2      	lsls	r2, r2, #31
   d74f6:	bf5c      	itt	pl
   d74f8:	2201      	movpl	r2, #1
   d74fa:	601a      	strpl	r2, [r3, #0]
   d74fc:	4770      	bx	lr
   d74fe:	bf00      	nop
   d7500:	2003e774 	.word	0x2003e774
   d7504:	2003e770 	.word	0x2003e770
   d7508:	2003e76c 	.word	0x2003e76c
   d750c:	2003e768 	.word	0x2003e768
   d7510:	2003e764 	.word	0x2003e764
   d7514:	2003e760 	.word	0x2003e760
   d7518:	2003e75c 	.word	0x2003e75c
   d751c:	2003e758 	.word	0x2003e758
   d7520:	2003e754 	.word	0x2003e754
   d7524:	2003e750 	.word	0x2003e750
   d7528:	2003e74c 	.word	0x2003e74c
   d752c:	2003e748 	.word	0x2003e748

000d7530 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
   d7530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7534:	4614      	mov	r4, r2
   d7536:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d753a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d753e:	461d      	mov	r5, r3
   d7540:	4607      	mov	r7, r0
   d7542:	9b07      	ldr	r3, [sp, #28]
   d7544:	b1b2      	cbz	r2, d7574 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x44>
   d7546:	4606      	mov	r6, r0
   d7548:	4620      	mov	r0, r4
   d754a:	4629      	mov	r1, r5
   d754c:	220a      	movs	r2, #10
   d754e:	2300      	movs	r3, #0
   d7550:	f000 fde2 	bl	d8118 <__aeabi_uldivmod>
   d7554:	4442      	add	r2, r8
   d7556:	4620      	mov	r0, r4
   d7558:	7913      	ldrb	r3, [r2, #4]
   d755a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   d755e:	4629      	mov	r1, r5
   d7560:	2300      	movs	r3, #0
   d7562:	220a      	movs	r2, #10
   d7564:	f000 fdd8 	bl	d8118 <__aeabi_uldivmod>
   d7568:	4604      	mov	r4, r0
   d756a:	460d      	mov	r5, r1
   d756c:	ea54 0305 	orrs.w	r3, r4, r5
   d7570:	d1ea      	bne.n	d7548 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x18>
   d7572:	e029      	b.n	d75c8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
   d7574:	f003 024a 	and.w	r2, r3, #74	; 0x4a
   d7578:	2a40      	cmp	r2, #64	; 0x40
   d757a:	d110      	bne.n	d759e <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x6e>
   d757c:	4606      	mov	r6, r0
   d757e:	f004 0307 	and.w	r3, r4, #7
   d7582:	4443      	add	r3, r8
   d7584:	08ea      	lsrs	r2, r5, #3
   d7586:	791b      	ldrb	r3, [r3, #4]
   d7588:	f806 3d01 	strb.w	r3, [r6, #-1]!
   d758c:	08e3      	lsrs	r3, r4, #3
   d758e:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
   d7592:	461c      	mov	r4, r3
   d7594:	4615      	mov	r5, r2
   d7596:	ea54 0305 	orrs.w	r3, r4, r5
   d759a:	d1f0      	bne.n	d757e <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x4e>
   d759c:	e014      	b.n	d75c8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
   d759e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   d75a2:	bf14      	ite	ne
   d75a4:	2214      	movne	r2, #20
   d75a6:	2204      	moveq	r2, #4
   d75a8:	4606      	mov	r6, r0
   d75aa:	4442      	add	r2, r8
   d75ac:	f004 030f 	and.w	r3, r4, #15
   d75b0:	0929      	lsrs	r1, r5, #4
   d75b2:	5cd3      	ldrb	r3, [r2, r3]
   d75b4:	f806 3d01 	strb.w	r3, [r6, #-1]!
   d75b8:	0923      	lsrs	r3, r4, #4
   d75ba:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   d75be:	461c      	mov	r4, r3
   d75c0:	460d      	mov	r5, r1
   d75c2:	ea54 0305 	orrs.w	r3, r4, r5
   d75c6:	d1f1      	bne.n	d75ac <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7c>
   d75c8:	1bb8      	subs	r0, r7, r6
   d75ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d75d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d75d0:	4b24      	ldr	r3, [pc, #144]	; (d7664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d75d2:	681a      	ldr	r2, [r3, #0]
   d75d4:	07d0      	lsls	r0, r2, #31
   d75d6:	bf5c      	itt	pl
   d75d8:	2201      	movpl	r2, #1
   d75da:	601a      	strpl	r2, [r3, #0]
   d75dc:	4b22      	ldr	r3, [pc, #136]	; (d7668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d75de:	681a      	ldr	r2, [r3, #0]
   d75e0:	07d1      	lsls	r1, r2, #31
   d75e2:	bf5c      	itt	pl
   d75e4:	2201      	movpl	r2, #1
   d75e6:	601a      	strpl	r2, [r3, #0]
   d75e8:	4b20      	ldr	r3, [pc, #128]	; (d766c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d75ea:	681a      	ldr	r2, [r3, #0]
   d75ec:	07d2      	lsls	r2, r2, #31
   d75ee:	bf5c      	itt	pl
   d75f0:	2201      	movpl	r2, #1
   d75f2:	601a      	strpl	r2, [r3, #0]
   d75f4:	4b1e      	ldr	r3, [pc, #120]	; (d7670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d75f6:	681a      	ldr	r2, [r3, #0]
   d75f8:	07d0      	lsls	r0, r2, #31
   d75fa:	bf5c      	itt	pl
   d75fc:	2201      	movpl	r2, #1
   d75fe:	601a      	strpl	r2, [r3, #0]
   d7600:	4b1c      	ldr	r3, [pc, #112]	; (d7674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7602:	681a      	ldr	r2, [r3, #0]
   d7604:	07d1      	lsls	r1, r2, #31
   d7606:	bf5c      	itt	pl
   d7608:	2201      	movpl	r2, #1
   d760a:	601a      	strpl	r2, [r3, #0]
   d760c:	4b1a      	ldr	r3, [pc, #104]	; (d7678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d760e:	681a      	ldr	r2, [r3, #0]
   d7610:	07d2      	lsls	r2, r2, #31
   d7612:	bf5c      	itt	pl
   d7614:	2201      	movpl	r2, #1
   d7616:	601a      	strpl	r2, [r3, #0]
   d7618:	4b18      	ldr	r3, [pc, #96]	; (d767c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d761a:	681a      	ldr	r2, [r3, #0]
   d761c:	07d0      	lsls	r0, r2, #31
   d761e:	bf5c      	itt	pl
   d7620:	2201      	movpl	r2, #1
   d7622:	601a      	strpl	r2, [r3, #0]
   d7624:	4b16      	ldr	r3, [pc, #88]	; (d7680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7626:	681a      	ldr	r2, [r3, #0]
   d7628:	07d1      	lsls	r1, r2, #31
   d762a:	bf5c      	itt	pl
   d762c:	2201      	movpl	r2, #1
   d762e:	601a      	strpl	r2, [r3, #0]
   d7630:	4b14      	ldr	r3, [pc, #80]	; (d7684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7632:	681a      	ldr	r2, [r3, #0]
   d7634:	07d2      	lsls	r2, r2, #31
   d7636:	bf5c      	itt	pl
   d7638:	2201      	movpl	r2, #1
   d763a:	601a      	strpl	r2, [r3, #0]
   d763c:	4b12      	ldr	r3, [pc, #72]	; (d7688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d763e:	681a      	ldr	r2, [r3, #0]
   d7640:	07d0      	lsls	r0, r2, #31
   d7642:	bf5c      	itt	pl
   d7644:	2201      	movpl	r2, #1
   d7646:	601a      	strpl	r2, [r3, #0]
   d7648:	4b10      	ldr	r3, [pc, #64]	; (d768c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d764a:	681a      	ldr	r2, [r3, #0]
   d764c:	07d1      	lsls	r1, r2, #31
   d764e:	bf5c      	itt	pl
   d7650:	2201      	movpl	r2, #1
   d7652:	601a      	strpl	r2, [r3, #0]
   d7654:	4b0e      	ldr	r3, [pc, #56]	; (d7690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7656:	681a      	ldr	r2, [r3, #0]
   d7658:	07d2      	lsls	r2, r2, #31
   d765a:	bf5c      	itt	pl
   d765c:	2201      	movpl	r2, #1
   d765e:	601a      	strpl	r2, [r3, #0]
   d7660:	4770      	bx	lr
   d7662:	bf00      	nop
   d7664:	2003e7a4 	.word	0x2003e7a4
   d7668:	2003e7a0 	.word	0x2003e7a0
   d766c:	2003e79c 	.word	0x2003e79c
   d7670:	2003e798 	.word	0x2003e798
   d7674:	2003e794 	.word	0x2003e794
   d7678:	2003e790 	.word	0x2003e790
   d767c:	2003e78c 	.word	0x2003e78c
   d7680:	2003e788 	.word	0x2003e788
   d7684:	2003e784 	.word	0x2003e784
   d7688:	2003e780 	.word	0x2003e780
   d768c:	2003e77c 	.word	0x2003e77c
   d7690:	2003e778 	.word	0x2003e778

000d7694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7694:	4b18      	ldr	r3, [pc, #96]	; (d76f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7696:	681a      	ldr	r2, [r3, #0]
   d7698:	07d1      	lsls	r1, r2, #31
   d769a:	bf5c      	itt	pl
   d769c:	2201      	movpl	r2, #1
   d769e:	601a      	strpl	r2, [r3, #0]
   d76a0:	4b16      	ldr	r3, [pc, #88]	; (d76fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d76a2:	681a      	ldr	r2, [r3, #0]
   d76a4:	07d2      	lsls	r2, r2, #31
   d76a6:	bf5c      	itt	pl
   d76a8:	2201      	movpl	r2, #1
   d76aa:	601a      	strpl	r2, [r3, #0]
   d76ac:	4b14      	ldr	r3, [pc, #80]	; (d7700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d76ae:	681a      	ldr	r2, [r3, #0]
   d76b0:	07d0      	lsls	r0, r2, #31
   d76b2:	bf5c      	itt	pl
   d76b4:	2201      	movpl	r2, #1
   d76b6:	601a      	strpl	r2, [r3, #0]
   d76b8:	4b12      	ldr	r3, [pc, #72]	; (d7704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d76ba:	681a      	ldr	r2, [r3, #0]
   d76bc:	07d1      	lsls	r1, r2, #31
   d76be:	bf5c      	itt	pl
   d76c0:	2201      	movpl	r2, #1
   d76c2:	601a      	strpl	r2, [r3, #0]
   d76c4:	4b10      	ldr	r3, [pc, #64]	; (d7708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d76c6:	681a      	ldr	r2, [r3, #0]
   d76c8:	07d2      	lsls	r2, r2, #31
   d76ca:	bf5c      	itt	pl
   d76cc:	2201      	movpl	r2, #1
   d76ce:	601a      	strpl	r2, [r3, #0]
   d76d0:	4b0e      	ldr	r3, [pc, #56]	; (d770c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d76d2:	681a      	ldr	r2, [r3, #0]
   d76d4:	07d0      	lsls	r0, r2, #31
   d76d6:	bf5c      	itt	pl
   d76d8:	2201      	movpl	r2, #1
   d76da:	601a      	strpl	r2, [r3, #0]
   d76dc:	4b0c      	ldr	r3, [pc, #48]	; (d7710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d76de:	681a      	ldr	r2, [r3, #0]
   d76e0:	07d1      	lsls	r1, r2, #31
   d76e2:	bf5c      	itt	pl
   d76e4:	2201      	movpl	r2, #1
   d76e6:	601a      	strpl	r2, [r3, #0]
   d76e8:	4b0a      	ldr	r3, [pc, #40]	; (d7714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d76ea:	681a      	ldr	r2, [r3, #0]
   d76ec:	07d2      	lsls	r2, r2, #31
   d76ee:	bf5c      	itt	pl
   d76f0:	2201      	movpl	r2, #1
   d76f2:	601a      	strpl	r2, [r3, #0]
   d76f4:	4770      	bx	lr
   d76f6:	bf00      	nop
   d76f8:	2003e7c4 	.word	0x2003e7c4
   d76fc:	2003e7c0 	.word	0x2003e7c0
   d7700:	2003e7bc 	.word	0x2003e7bc
   d7704:	2003e7b8 	.word	0x2003e7b8
   d7708:	2003e7b4 	.word	0x2003e7b4
   d770c:	2003e7b0 	.word	0x2003e7b0
   d7710:	2003e7ac 	.word	0x2003e7ac
   d7714:	2003e7a8 	.word	0x2003e7a8

000d7718 <__aeabi_drsub>:
   d7718:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d771c:	e002      	b.n	d7724 <__adddf3>
   d771e:	bf00      	nop

000d7720 <__aeabi_dsub>:
   d7720:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7724 <__adddf3>:
   d7724:	b530      	push	{r4, r5, lr}
   d7726:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d772a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d772e:	ea94 0f05 	teq	r4, r5
   d7732:	bf08      	it	eq
   d7734:	ea90 0f02 	teqeq	r0, r2
   d7738:	bf1f      	itttt	ne
   d773a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d773e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7742:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7746:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d774a:	f000 80e2 	beq.w	d7912 <__adddf3+0x1ee>
   d774e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7752:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7756:	bfb8      	it	lt
   d7758:	426d      	neglt	r5, r5
   d775a:	dd0c      	ble.n	d7776 <__adddf3+0x52>
   d775c:	442c      	add	r4, r5
   d775e:	ea80 0202 	eor.w	r2, r0, r2
   d7762:	ea81 0303 	eor.w	r3, r1, r3
   d7766:	ea82 0000 	eor.w	r0, r2, r0
   d776a:	ea83 0101 	eor.w	r1, r3, r1
   d776e:	ea80 0202 	eor.w	r2, r0, r2
   d7772:	ea81 0303 	eor.w	r3, r1, r3
   d7776:	2d36      	cmp	r5, #54	; 0x36
   d7778:	bf88      	it	hi
   d777a:	bd30      	pophi	{r4, r5, pc}
   d777c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7780:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7784:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7788:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d778c:	d002      	beq.n	d7794 <__adddf3+0x70>
   d778e:	4240      	negs	r0, r0
   d7790:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7794:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7798:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d779c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d77a0:	d002      	beq.n	d77a8 <__adddf3+0x84>
   d77a2:	4252      	negs	r2, r2
   d77a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d77a8:	ea94 0f05 	teq	r4, r5
   d77ac:	f000 80a7 	beq.w	d78fe <__adddf3+0x1da>
   d77b0:	f1a4 0401 	sub.w	r4, r4, #1
   d77b4:	f1d5 0e20 	rsbs	lr, r5, #32
   d77b8:	db0d      	blt.n	d77d6 <__adddf3+0xb2>
   d77ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   d77be:	fa22 f205 	lsr.w	r2, r2, r5
   d77c2:	1880      	adds	r0, r0, r2
   d77c4:	f141 0100 	adc.w	r1, r1, #0
   d77c8:	fa03 f20e 	lsl.w	r2, r3, lr
   d77cc:	1880      	adds	r0, r0, r2
   d77ce:	fa43 f305 	asr.w	r3, r3, r5
   d77d2:	4159      	adcs	r1, r3
   d77d4:	e00e      	b.n	d77f4 <__adddf3+0xd0>
   d77d6:	f1a5 0520 	sub.w	r5, r5, #32
   d77da:	f10e 0e20 	add.w	lr, lr, #32
   d77de:	2a01      	cmp	r2, #1
   d77e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d77e4:	bf28      	it	cs
   d77e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d77ea:	fa43 f305 	asr.w	r3, r3, r5
   d77ee:	18c0      	adds	r0, r0, r3
   d77f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d77f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77f8:	d507      	bpl.n	d780a <__adddf3+0xe6>
   d77fa:	f04f 0e00 	mov.w	lr, #0
   d77fe:	f1dc 0c00 	rsbs	ip, ip, #0
   d7802:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7806:	eb6e 0101 	sbc.w	r1, lr, r1
   d780a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d780e:	d31b      	bcc.n	d7848 <__adddf3+0x124>
   d7810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7814:	d30c      	bcc.n	d7830 <__adddf3+0x10c>
   d7816:	0849      	lsrs	r1, r1, #1
   d7818:	ea5f 0030 	movs.w	r0, r0, rrx
   d781c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7820:	f104 0401 	add.w	r4, r4, #1
   d7824:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7828:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d782c:	f080 809a 	bcs.w	d7964 <__adddf3+0x240>
   d7830:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7834:	bf08      	it	eq
   d7836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d783a:	f150 0000 	adcs.w	r0, r0, #0
   d783e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7842:	ea41 0105 	orr.w	r1, r1, r5
   d7846:	bd30      	pop	{r4, r5, pc}
   d7848:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d784c:	4140      	adcs	r0, r0
   d784e:	eb41 0101 	adc.w	r1, r1, r1
   d7852:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7856:	f1a4 0401 	sub.w	r4, r4, #1
   d785a:	d1e9      	bne.n	d7830 <__adddf3+0x10c>
   d785c:	f091 0f00 	teq	r1, #0
   d7860:	bf04      	itt	eq
   d7862:	4601      	moveq	r1, r0
   d7864:	2000      	moveq	r0, #0
   d7866:	fab1 f381 	clz	r3, r1
   d786a:	bf08      	it	eq
   d786c:	3320      	addeq	r3, #32
   d786e:	f1a3 030b 	sub.w	r3, r3, #11
   d7872:	f1b3 0220 	subs.w	r2, r3, #32
   d7876:	da0c      	bge.n	d7892 <__adddf3+0x16e>
   d7878:	320c      	adds	r2, #12
   d787a:	dd08      	ble.n	d788e <__adddf3+0x16a>
   d787c:	f102 0c14 	add.w	ip, r2, #20
   d7880:	f1c2 020c 	rsb	r2, r2, #12
   d7884:	fa01 f00c 	lsl.w	r0, r1, ip
   d7888:	fa21 f102 	lsr.w	r1, r1, r2
   d788c:	e00c      	b.n	d78a8 <__adddf3+0x184>
   d788e:	f102 0214 	add.w	r2, r2, #20
   d7892:	bfd8      	it	le
   d7894:	f1c2 0c20 	rsble	ip, r2, #32
   d7898:	fa01 f102 	lsl.w	r1, r1, r2
   d789c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d78a0:	bfdc      	itt	le
   d78a2:	ea41 010c 	orrle.w	r1, r1, ip
   d78a6:	4090      	lslle	r0, r2
   d78a8:	1ae4      	subs	r4, r4, r3
   d78aa:	bfa2      	ittt	ge
   d78ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d78b0:	4329      	orrge	r1, r5
   d78b2:	bd30      	popge	{r4, r5, pc}
   d78b4:	ea6f 0404 	mvn.w	r4, r4
   d78b8:	3c1f      	subs	r4, #31
   d78ba:	da1c      	bge.n	d78f6 <__adddf3+0x1d2>
   d78bc:	340c      	adds	r4, #12
   d78be:	dc0e      	bgt.n	d78de <__adddf3+0x1ba>
   d78c0:	f104 0414 	add.w	r4, r4, #20
   d78c4:	f1c4 0220 	rsb	r2, r4, #32
   d78c8:	fa20 f004 	lsr.w	r0, r0, r4
   d78cc:	fa01 f302 	lsl.w	r3, r1, r2
   d78d0:	ea40 0003 	orr.w	r0, r0, r3
   d78d4:	fa21 f304 	lsr.w	r3, r1, r4
   d78d8:	ea45 0103 	orr.w	r1, r5, r3
   d78dc:	bd30      	pop	{r4, r5, pc}
   d78de:	f1c4 040c 	rsb	r4, r4, #12
   d78e2:	f1c4 0220 	rsb	r2, r4, #32
   d78e6:	fa20 f002 	lsr.w	r0, r0, r2
   d78ea:	fa01 f304 	lsl.w	r3, r1, r4
   d78ee:	ea40 0003 	orr.w	r0, r0, r3
   d78f2:	4629      	mov	r1, r5
   d78f4:	bd30      	pop	{r4, r5, pc}
   d78f6:	fa21 f004 	lsr.w	r0, r1, r4
   d78fa:	4629      	mov	r1, r5
   d78fc:	bd30      	pop	{r4, r5, pc}
   d78fe:	f094 0f00 	teq	r4, #0
   d7902:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7906:	bf06      	itte	eq
   d7908:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d790c:	3401      	addeq	r4, #1
   d790e:	3d01      	subne	r5, #1
   d7910:	e74e      	b.n	d77b0 <__adddf3+0x8c>
   d7912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7916:	bf18      	it	ne
   d7918:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d791c:	d029      	beq.n	d7972 <__adddf3+0x24e>
   d791e:	ea94 0f05 	teq	r4, r5
   d7922:	bf08      	it	eq
   d7924:	ea90 0f02 	teqeq	r0, r2
   d7928:	d005      	beq.n	d7936 <__adddf3+0x212>
   d792a:	ea54 0c00 	orrs.w	ip, r4, r0
   d792e:	bf04      	itt	eq
   d7930:	4619      	moveq	r1, r3
   d7932:	4610      	moveq	r0, r2
   d7934:	bd30      	pop	{r4, r5, pc}
   d7936:	ea91 0f03 	teq	r1, r3
   d793a:	bf1e      	ittt	ne
   d793c:	2100      	movne	r1, #0
   d793e:	2000      	movne	r0, #0
   d7940:	bd30      	popne	{r4, r5, pc}
   d7942:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7946:	d105      	bne.n	d7954 <__adddf3+0x230>
   d7948:	0040      	lsls	r0, r0, #1
   d794a:	4149      	adcs	r1, r1
   d794c:	bf28      	it	cs
   d794e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7952:	bd30      	pop	{r4, r5, pc}
   d7954:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7958:	bf3c      	itt	cc
   d795a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d795e:	bd30      	popcc	{r4, r5, pc}
   d7960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7964:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d796c:	f04f 0000 	mov.w	r0, #0
   d7970:	bd30      	pop	{r4, r5, pc}
   d7972:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7976:	bf1a      	itte	ne
   d7978:	4619      	movne	r1, r3
   d797a:	4610      	movne	r0, r2
   d797c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7980:	bf1c      	itt	ne
   d7982:	460b      	movne	r3, r1
   d7984:	4602      	movne	r2, r0
   d7986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d798a:	bf06      	itte	eq
   d798c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7990:	ea91 0f03 	teqeq	r1, r3
   d7994:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7998:	bd30      	pop	{r4, r5, pc}
   d799a:	bf00      	nop

000d799c <__aeabi_ui2d>:
   d799c:	f090 0f00 	teq	r0, #0
   d79a0:	bf04      	itt	eq
   d79a2:	2100      	moveq	r1, #0
   d79a4:	4770      	bxeq	lr
   d79a6:	b530      	push	{r4, r5, lr}
   d79a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d79ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d79b0:	f04f 0500 	mov.w	r5, #0
   d79b4:	f04f 0100 	mov.w	r1, #0
   d79b8:	e750      	b.n	d785c <__adddf3+0x138>
   d79ba:	bf00      	nop

000d79bc <__aeabi_i2d>:
   d79bc:	f090 0f00 	teq	r0, #0
   d79c0:	bf04      	itt	eq
   d79c2:	2100      	moveq	r1, #0
   d79c4:	4770      	bxeq	lr
   d79c6:	b530      	push	{r4, r5, lr}
   d79c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d79cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d79d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d79d4:	bf48      	it	mi
   d79d6:	4240      	negmi	r0, r0
   d79d8:	f04f 0100 	mov.w	r1, #0
   d79dc:	e73e      	b.n	d785c <__adddf3+0x138>
   d79de:	bf00      	nop

000d79e0 <__aeabi_f2d>:
   d79e0:	0042      	lsls	r2, r0, #1
   d79e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d79e6:	ea4f 0131 	mov.w	r1, r1, rrx
   d79ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d79ee:	bf1f      	itttt	ne
   d79f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d79f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d79f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d79fc:	4770      	bxne	lr
   d79fe:	f092 0f00 	teq	r2, #0
   d7a02:	bf14      	ite	ne
   d7a04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7a08:	4770      	bxeq	lr
   d7a0a:	b530      	push	{r4, r5, lr}
   d7a0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7a10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7a18:	e720      	b.n	d785c <__adddf3+0x138>
   d7a1a:	bf00      	nop

000d7a1c <__aeabi_ul2d>:
   d7a1c:	ea50 0201 	orrs.w	r2, r0, r1
   d7a20:	bf08      	it	eq
   d7a22:	4770      	bxeq	lr
   d7a24:	b530      	push	{r4, r5, lr}
   d7a26:	f04f 0500 	mov.w	r5, #0
   d7a2a:	e00a      	b.n	d7a42 <__aeabi_l2d+0x16>

000d7a2c <__aeabi_l2d>:
   d7a2c:	ea50 0201 	orrs.w	r2, r0, r1
   d7a30:	bf08      	it	eq
   d7a32:	4770      	bxeq	lr
   d7a34:	b530      	push	{r4, r5, lr}
   d7a36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7a3a:	d502      	bpl.n	d7a42 <__aeabi_l2d+0x16>
   d7a3c:	4240      	negs	r0, r0
   d7a3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7a46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7a4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7a4e:	f43f aedc 	beq.w	d780a <__adddf3+0xe6>
   d7a52:	f04f 0203 	mov.w	r2, #3
   d7a56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a5a:	bf18      	it	ne
   d7a5c:	3203      	addne	r2, #3
   d7a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a62:	bf18      	it	ne
   d7a64:	3203      	addne	r2, #3
   d7a66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7a6a:	f1c2 0320 	rsb	r3, r2, #32
   d7a6e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7a72:	fa20 f002 	lsr.w	r0, r0, r2
   d7a76:	fa01 fe03 	lsl.w	lr, r1, r3
   d7a7a:	ea40 000e 	orr.w	r0, r0, lr
   d7a7e:	fa21 f102 	lsr.w	r1, r1, r2
   d7a82:	4414      	add	r4, r2
   d7a84:	e6c1      	b.n	d780a <__adddf3+0xe6>
   d7a86:	bf00      	nop

000d7a88 <__aeabi_dmul>:
   d7a88:	b570      	push	{r4, r5, r6, lr}
   d7a8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a96:	bf1d      	ittte	ne
   d7a98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a9c:	ea94 0f0c 	teqne	r4, ip
   d7aa0:	ea95 0f0c 	teqne	r5, ip
   d7aa4:	f000 f8de 	bleq	d7c64 <__aeabi_dmul+0x1dc>
   d7aa8:	442c      	add	r4, r5
   d7aaa:	ea81 0603 	eor.w	r6, r1, r3
   d7aae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7ab2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7ab6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7aba:	bf18      	it	ne
   d7abc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ac8:	d038      	beq.n	d7b3c <__aeabi_dmul+0xb4>
   d7aca:	fba0 ce02 	umull	ip, lr, r0, r2
   d7ace:	f04f 0500 	mov.w	r5, #0
   d7ad2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7ad6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7ada:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7ade:	f04f 0600 	mov.w	r6, #0
   d7ae2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7ae6:	f09c 0f00 	teq	ip, #0
   d7aea:	bf18      	it	ne
   d7aec:	f04e 0e01 	orrne.w	lr, lr, #1
   d7af0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7af4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7af8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7afc:	d204      	bcs.n	d7b08 <__aeabi_dmul+0x80>
   d7afe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7b02:	416d      	adcs	r5, r5
   d7b04:	eb46 0606 	adc.w	r6, r6, r6
   d7b08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7b0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7b10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7b14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7b18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7b1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7b20:	bf88      	it	hi
   d7b22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7b26:	d81e      	bhi.n	d7b66 <__aeabi_dmul+0xde>
   d7b28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7b2c:	bf08      	it	eq
   d7b2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7b32:	f150 0000 	adcs.w	r0, r0, #0
   d7b36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b3a:	bd70      	pop	{r4, r5, r6, pc}
   d7b3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7b40:	ea46 0101 	orr.w	r1, r6, r1
   d7b44:	ea40 0002 	orr.w	r0, r0, r2
   d7b48:	ea81 0103 	eor.w	r1, r1, r3
   d7b4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7b50:	bfc2      	ittt	gt
   d7b52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b5a:	bd70      	popgt	{r4, r5, r6, pc}
   d7b5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b60:	f04f 0e00 	mov.w	lr, #0
   d7b64:	3c01      	subs	r4, #1
   d7b66:	f300 80ab 	bgt.w	d7cc0 <__aeabi_dmul+0x238>
   d7b6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7b6e:	bfde      	ittt	le
   d7b70:	2000      	movle	r0, #0
   d7b72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7b76:	bd70      	pople	{r4, r5, r6, pc}
   d7b78:	f1c4 0400 	rsb	r4, r4, #0
   d7b7c:	3c20      	subs	r4, #32
   d7b7e:	da35      	bge.n	d7bec <__aeabi_dmul+0x164>
   d7b80:	340c      	adds	r4, #12
   d7b82:	dc1b      	bgt.n	d7bbc <__aeabi_dmul+0x134>
   d7b84:	f104 0414 	add.w	r4, r4, #20
   d7b88:	f1c4 0520 	rsb	r5, r4, #32
   d7b8c:	fa00 f305 	lsl.w	r3, r0, r5
   d7b90:	fa20 f004 	lsr.w	r0, r0, r4
   d7b94:	fa01 f205 	lsl.w	r2, r1, r5
   d7b98:	ea40 0002 	orr.w	r0, r0, r2
   d7b9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7ba0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7ba4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7ba8:	fa21 f604 	lsr.w	r6, r1, r4
   d7bac:	eb42 0106 	adc.w	r1, r2, r6
   d7bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7bb4:	bf08      	it	eq
   d7bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7bba:	bd70      	pop	{r4, r5, r6, pc}
   d7bbc:	f1c4 040c 	rsb	r4, r4, #12
   d7bc0:	f1c4 0520 	rsb	r5, r4, #32
   d7bc4:	fa00 f304 	lsl.w	r3, r0, r4
   d7bc8:	fa20 f005 	lsr.w	r0, r0, r5
   d7bcc:	fa01 f204 	lsl.w	r2, r1, r4
   d7bd0:	ea40 0002 	orr.w	r0, r0, r2
   d7bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7bdc:	f141 0100 	adc.w	r1, r1, #0
   d7be0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7be4:	bf08      	it	eq
   d7be6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7bea:	bd70      	pop	{r4, r5, r6, pc}
   d7bec:	f1c4 0520 	rsb	r5, r4, #32
   d7bf0:	fa00 f205 	lsl.w	r2, r0, r5
   d7bf4:	ea4e 0e02 	orr.w	lr, lr, r2
   d7bf8:	fa20 f304 	lsr.w	r3, r0, r4
   d7bfc:	fa01 f205 	lsl.w	r2, r1, r5
   d7c00:	ea43 0302 	orr.w	r3, r3, r2
   d7c04:	fa21 f004 	lsr.w	r0, r1, r4
   d7c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7c0c:	fa21 f204 	lsr.w	r2, r1, r4
   d7c10:	ea20 0002 	bic.w	r0, r0, r2
   d7c14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7c18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7c1c:	bf08      	it	eq
   d7c1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7c22:	bd70      	pop	{r4, r5, r6, pc}
   d7c24:	f094 0f00 	teq	r4, #0
   d7c28:	d10f      	bne.n	d7c4a <__aeabi_dmul+0x1c2>
   d7c2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7c2e:	0040      	lsls	r0, r0, #1
   d7c30:	eb41 0101 	adc.w	r1, r1, r1
   d7c34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c38:	bf08      	it	eq
   d7c3a:	3c01      	subeq	r4, #1
   d7c3c:	d0f7      	beq.n	d7c2e <__aeabi_dmul+0x1a6>
   d7c3e:	ea41 0106 	orr.w	r1, r1, r6
   d7c42:	f095 0f00 	teq	r5, #0
   d7c46:	bf18      	it	ne
   d7c48:	4770      	bxne	lr
   d7c4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7c4e:	0052      	lsls	r2, r2, #1
   d7c50:	eb43 0303 	adc.w	r3, r3, r3
   d7c54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7c58:	bf08      	it	eq
   d7c5a:	3d01      	subeq	r5, #1
   d7c5c:	d0f7      	beq.n	d7c4e <__aeabi_dmul+0x1c6>
   d7c5e:	ea43 0306 	orr.w	r3, r3, r6
   d7c62:	4770      	bx	lr
   d7c64:	ea94 0f0c 	teq	r4, ip
   d7c68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7c6c:	bf18      	it	ne
   d7c6e:	ea95 0f0c 	teqne	r5, ip
   d7c72:	d00c      	beq.n	d7c8e <__aeabi_dmul+0x206>
   d7c74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c78:	bf18      	it	ne
   d7c7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c7e:	d1d1      	bne.n	d7c24 <__aeabi_dmul+0x19c>
   d7c80:	ea81 0103 	eor.w	r1, r1, r3
   d7c84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7c88:	f04f 0000 	mov.w	r0, #0
   d7c8c:	bd70      	pop	{r4, r5, r6, pc}
   d7c8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c92:	bf06      	itte	eq
   d7c94:	4610      	moveq	r0, r2
   d7c96:	4619      	moveq	r1, r3
   d7c98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c9c:	d019      	beq.n	d7cd2 <__aeabi_dmul+0x24a>
   d7c9e:	ea94 0f0c 	teq	r4, ip
   d7ca2:	d102      	bne.n	d7caa <__aeabi_dmul+0x222>
   d7ca4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7ca8:	d113      	bne.n	d7cd2 <__aeabi_dmul+0x24a>
   d7caa:	ea95 0f0c 	teq	r5, ip
   d7cae:	d105      	bne.n	d7cbc <__aeabi_dmul+0x234>
   d7cb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7cb4:	bf1c      	itt	ne
   d7cb6:	4610      	movne	r0, r2
   d7cb8:	4619      	movne	r1, r3
   d7cba:	d10a      	bne.n	d7cd2 <__aeabi_dmul+0x24a>
   d7cbc:	ea81 0103 	eor.w	r1, r1, r3
   d7cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7cc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ccc:	f04f 0000 	mov.w	r0, #0
   d7cd0:	bd70      	pop	{r4, r5, r6, pc}
   d7cd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7cd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7cda:	bd70      	pop	{r4, r5, r6, pc}

000d7cdc <__aeabi_ddiv>:
   d7cdc:	b570      	push	{r4, r5, r6, lr}
   d7cde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7ce2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7ce6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cea:	bf1d      	ittte	ne
   d7cec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7cf0:	ea94 0f0c 	teqne	r4, ip
   d7cf4:	ea95 0f0c 	teqne	r5, ip
   d7cf8:	f000 f8a7 	bleq	d7e4a <__aeabi_ddiv+0x16e>
   d7cfc:	eba4 0405 	sub.w	r4, r4, r5
   d7d00:	ea81 0e03 	eor.w	lr, r1, r3
   d7d04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7d08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7d0c:	f000 8088 	beq.w	d7e20 <__aeabi_ddiv+0x144>
   d7d10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7d14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7d18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7d1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7d20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7d24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7d28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7d2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7d30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7d34:	429d      	cmp	r5, r3
   d7d36:	bf08      	it	eq
   d7d38:	4296      	cmpeq	r6, r2
   d7d3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7d3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7d42:	d202      	bcs.n	d7d4a <__aeabi_ddiv+0x6e>
   d7d44:	085b      	lsrs	r3, r3, #1
   d7d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d4a:	1ab6      	subs	r6, r6, r2
   d7d4c:	eb65 0503 	sbc.w	r5, r5, r3
   d7d50:	085b      	lsrs	r3, r3, #1
   d7d52:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7d5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7d5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d66:	bf22      	ittt	cs
   d7d68:	1ab6      	subcs	r6, r6, r2
   d7d6a:	4675      	movcs	r5, lr
   d7d6c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7d70:	085b      	lsrs	r3, r3, #1
   d7d72:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d76:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d7e:	bf22      	ittt	cs
   d7d80:	1ab6      	subcs	r6, r6, r2
   d7d82:	4675      	movcs	r5, lr
   d7d84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7d88:	085b      	lsrs	r3, r3, #1
   d7d8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d96:	bf22      	ittt	cs
   d7d98:	1ab6      	subcs	r6, r6, r2
   d7d9a:	4675      	movcs	r5, lr
   d7d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7da0:	085b      	lsrs	r3, r3, #1
   d7da2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7da6:	ebb6 0e02 	subs.w	lr, r6, r2
   d7daa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7dae:	bf22      	ittt	cs
   d7db0:	1ab6      	subcs	r6, r6, r2
   d7db2:	4675      	movcs	r5, lr
   d7db4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7db8:	ea55 0e06 	orrs.w	lr, r5, r6
   d7dbc:	d018      	beq.n	d7df0 <__aeabi_ddiv+0x114>
   d7dbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7dc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7dc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7dca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7dce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7dd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7dd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7dda:	d1c0      	bne.n	d7d5e <__aeabi_ddiv+0x82>
   d7ddc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7de0:	d10b      	bne.n	d7dfa <__aeabi_ddiv+0x11e>
   d7de2:	ea41 0100 	orr.w	r1, r1, r0
   d7de6:	f04f 0000 	mov.w	r0, #0
   d7dea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7dee:	e7b6      	b.n	d7d5e <__aeabi_ddiv+0x82>
   d7df0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7df4:	bf04      	itt	eq
   d7df6:	4301      	orreq	r1, r0
   d7df8:	2000      	moveq	r0, #0
   d7dfa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7dfe:	bf88      	it	hi
   d7e00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7e04:	f63f aeaf 	bhi.w	d7b66 <__aeabi_dmul+0xde>
   d7e08:	ebb5 0c03 	subs.w	ip, r5, r3
   d7e0c:	bf04      	itt	eq
   d7e0e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7e12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7e16:	f150 0000 	adcs.w	r0, r0, #0
   d7e1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7e1e:	bd70      	pop	{r4, r5, r6, pc}
   d7e20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7e24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7e28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7e2c:	bfc2      	ittt	gt
   d7e2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7e32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7e36:	bd70      	popgt	{r4, r5, r6, pc}
   d7e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e3c:	f04f 0e00 	mov.w	lr, #0
   d7e40:	3c01      	subs	r4, #1
   d7e42:	e690      	b.n	d7b66 <__aeabi_dmul+0xde>
   d7e44:	ea45 0e06 	orr.w	lr, r5, r6
   d7e48:	e68d      	b.n	d7b66 <__aeabi_dmul+0xde>
   d7e4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7e4e:	ea94 0f0c 	teq	r4, ip
   d7e52:	bf08      	it	eq
   d7e54:	ea95 0f0c 	teqeq	r5, ip
   d7e58:	f43f af3b 	beq.w	d7cd2 <__aeabi_dmul+0x24a>
   d7e5c:	ea94 0f0c 	teq	r4, ip
   d7e60:	d10a      	bne.n	d7e78 <__aeabi_ddiv+0x19c>
   d7e62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7e66:	f47f af34 	bne.w	d7cd2 <__aeabi_dmul+0x24a>
   d7e6a:	ea95 0f0c 	teq	r5, ip
   d7e6e:	f47f af25 	bne.w	d7cbc <__aeabi_dmul+0x234>
   d7e72:	4610      	mov	r0, r2
   d7e74:	4619      	mov	r1, r3
   d7e76:	e72c      	b.n	d7cd2 <__aeabi_dmul+0x24a>
   d7e78:	ea95 0f0c 	teq	r5, ip
   d7e7c:	d106      	bne.n	d7e8c <__aeabi_ddiv+0x1b0>
   d7e7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7e82:	f43f aefd 	beq.w	d7c80 <__aeabi_dmul+0x1f8>
   d7e86:	4610      	mov	r0, r2
   d7e88:	4619      	mov	r1, r3
   d7e8a:	e722      	b.n	d7cd2 <__aeabi_dmul+0x24a>
   d7e8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e90:	bf18      	it	ne
   d7e92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e96:	f47f aec5 	bne.w	d7c24 <__aeabi_dmul+0x19c>
   d7e9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7e9e:	f47f af0d 	bne.w	d7cbc <__aeabi_dmul+0x234>
   d7ea2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7ea6:	f47f aeeb 	bne.w	d7c80 <__aeabi_dmul+0x1f8>
   d7eaa:	e712      	b.n	d7cd2 <__aeabi_dmul+0x24a>

000d7eac <__gedf2>:
   d7eac:	f04f 3cff 	mov.w	ip, #4294967295
   d7eb0:	e006      	b.n	d7ec0 <__cmpdf2+0x4>
   d7eb2:	bf00      	nop

000d7eb4 <__ledf2>:
   d7eb4:	f04f 0c01 	mov.w	ip, #1
   d7eb8:	e002      	b.n	d7ec0 <__cmpdf2+0x4>
   d7eba:	bf00      	nop

000d7ebc <__cmpdf2>:
   d7ebc:	f04f 0c01 	mov.w	ip, #1
   d7ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ecc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7ed0:	bf18      	it	ne
   d7ed2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7ed6:	d01b      	beq.n	d7f10 <__cmpdf2+0x54>
   d7ed8:	b001      	add	sp, #4
   d7eda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7ede:	bf0c      	ite	eq
   d7ee0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7ee4:	ea91 0f03 	teqne	r1, r3
   d7ee8:	bf02      	ittt	eq
   d7eea:	ea90 0f02 	teqeq	r0, r2
   d7eee:	2000      	moveq	r0, #0
   d7ef0:	4770      	bxeq	lr
   d7ef2:	f110 0f00 	cmn.w	r0, #0
   d7ef6:	ea91 0f03 	teq	r1, r3
   d7efa:	bf58      	it	pl
   d7efc:	4299      	cmppl	r1, r3
   d7efe:	bf08      	it	eq
   d7f00:	4290      	cmpeq	r0, r2
   d7f02:	bf2c      	ite	cs
   d7f04:	17d8      	asrcs	r0, r3, #31
   d7f06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7f0a:	f040 0001 	orr.w	r0, r0, #1
   d7f0e:	4770      	bx	lr
   d7f10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7f14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7f18:	d102      	bne.n	d7f20 <__cmpdf2+0x64>
   d7f1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7f1e:	d107      	bne.n	d7f30 <__cmpdf2+0x74>
   d7f20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7f28:	d1d6      	bne.n	d7ed8 <__cmpdf2+0x1c>
   d7f2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7f2e:	d0d3      	beq.n	d7ed8 <__cmpdf2+0x1c>
   d7f30:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7f34:	4770      	bx	lr
   d7f36:	bf00      	nop

000d7f38 <__aeabi_cdrcmple>:
   d7f38:	4684      	mov	ip, r0
   d7f3a:	4610      	mov	r0, r2
   d7f3c:	4662      	mov	r2, ip
   d7f3e:	468c      	mov	ip, r1
   d7f40:	4619      	mov	r1, r3
   d7f42:	4663      	mov	r3, ip
   d7f44:	e000      	b.n	d7f48 <__aeabi_cdcmpeq>
   d7f46:	bf00      	nop

000d7f48 <__aeabi_cdcmpeq>:
   d7f48:	b501      	push	{r0, lr}
   d7f4a:	f7ff ffb7 	bl	d7ebc <__cmpdf2>
   d7f4e:	2800      	cmp	r0, #0
   d7f50:	bf48      	it	mi
   d7f52:	f110 0f00 	cmnmi.w	r0, #0
   d7f56:	bd01      	pop	{r0, pc}

000d7f58 <__aeabi_dcmpeq>:
   d7f58:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f5c:	f7ff fff4 	bl	d7f48 <__aeabi_cdcmpeq>
   d7f60:	bf0c      	ite	eq
   d7f62:	2001      	moveq	r0, #1
   d7f64:	2000      	movne	r0, #0
   d7f66:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f6a:	bf00      	nop

000d7f6c <__aeabi_dcmplt>:
   d7f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f70:	f7ff ffea 	bl	d7f48 <__aeabi_cdcmpeq>
   d7f74:	bf34      	ite	cc
   d7f76:	2001      	movcc	r0, #1
   d7f78:	2000      	movcs	r0, #0
   d7f7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f7e:	bf00      	nop

000d7f80 <__aeabi_dcmple>:
   d7f80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f84:	f7ff ffe0 	bl	d7f48 <__aeabi_cdcmpeq>
   d7f88:	bf94      	ite	ls
   d7f8a:	2001      	movls	r0, #1
   d7f8c:	2000      	movhi	r0, #0
   d7f8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f92:	bf00      	nop

000d7f94 <__aeabi_dcmpge>:
   d7f94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f98:	f7ff ffce 	bl	d7f38 <__aeabi_cdrcmple>
   d7f9c:	bf94      	ite	ls
   d7f9e:	2001      	movls	r0, #1
   d7fa0:	2000      	movhi	r0, #0
   d7fa2:	f85d fb08 	ldr.w	pc, [sp], #8
   d7fa6:	bf00      	nop

000d7fa8 <__aeabi_dcmpgt>:
   d7fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7fac:	f7ff ffc4 	bl	d7f38 <__aeabi_cdrcmple>
   d7fb0:	bf34      	ite	cc
   d7fb2:	2001      	movcc	r0, #1
   d7fb4:	2000      	movcs	r0, #0
   d7fb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d7fba:	bf00      	nop

000d7fbc <__aeabi_dcmpun>:
   d7fbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7fc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7fc4:	d102      	bne.n	d7fcc <__aeabi_dcmpun+0x10>
   d7fc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7fca:	d10a      	bne.n	d7fe2 <__aeabi_dcmpun+0x26>
   d7fcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7fd4:	d102      	bne.n	d7fdc <__aeabi_dcmpun+0x20>
   d7fd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7fda:	d102      	bne.n	d7fe2 <__aeabi_dcmpun+0x26>
   d7fdc:	f04f 0000 	mov.w	r0, #0
   d7fe0:	4770      	bx	lr
   d7fe2:	f04f 0001 	mov.w	r0, #1
   d7fe6:	4770      	bx	lr

000d7fe8 <__aeabi_d2iz>:
   d7fe8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7fec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7ff0:	d215      	bcs.n	d801e <__aeabi_d2iz+0x36>
   d7ff2:	d511      	bpl.n	d8018 <__aeabi_d2iz+0x30>
   d7ff4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7ff8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7ffc:	d912      	bls.n	d8024 <__aeabi_d2iz+0x3c>
   d7ffe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8006:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d800a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d800e:	fa23 f002 	lsr.w	r0, r3, r2
   d8012:	bf18      	it	ne
   d8014:	4240      	negne	r0, r0
   d8016:	4770      	bx	lr
   d8018:	f04f 0000 	mov.w	r0, #0
   d801c:	4770      	bx	lr
   d801e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8022:	d105      	bne.n	d8030 <__aeabi_d2iz+0x48>
   d8024:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8028:	bf08      	it	eq
   d802a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d802e:	4770      	bx	lr
   d8030:	f04f 0000 	mov.w	r0, #0
   d8034:	4770      	bx	lr
   d8036:	bf00      	nop

000d8038 <__aeabi_d2uiz>:
   d8038:	004a      	lsls	r2, r1, #1
   d803a:	d211      	bcs.n	d8060 <__aeabi_d2uiz+0x28>
   d803c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8040:	d211      	bcs.n	d8066 <__aeabi_d2uiz+0x2e>
   d8042:	d50d      	bpl.n	d8060 <__aeabi_d2uiz+0x28>
   d8044:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8048:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d804c:	d40e      	bmi.n	d806c <__aeabi_d2uiz+0x34>
   d804e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8056:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d805a:	fa23 f002 	lsr.w	r0, r3, r2
   d805e:	4770      	bx	lr
   d8060:	f04f 0000 	mov.w	r0, #0
   d8064:	4770      	bx	lr
   d8066:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d806a:	d102      	bne.n	d8072 <__aeabi_d2uiz+0x3a>
   d806c:	f04f 30ff 	mov.w	r0, #4294967295
   d8070:	4770      	bx	lr
   d8072:	f04f 0000 	mov.w	r0, #0
   d8076:	4770      	bx	lr

000d8078 <__aeabi_d2f>:
   d8078:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d807c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8080:	bf24      	itt	cs
   d8082:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8086:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d808a:	d90d      	bls.n	d80a8 <__aeabi_d2f+0x30>
   d808c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8090:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8094:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8098:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d809c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d80a0:	bf08      	it	eq
   d80a2:	f020 0001 	biceq.w	r0, r0, #1
   d80a6:	4770      	bx	lr
   d80a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d80ac:	d121      	bne.n	d80f2 <__aeabi_d2f+0x7a>
   d80ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d80b2:	bfbc      	itt	lt
   d80b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d80b8:	4770      	bxlt	lr
   d80ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80be:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d80c2:	f1c2 0218 	rsb	r2, r2, #24
   d80c6:	f1c2 0c20 	rsb	ip, r2, #32
   d80ca:	fa10 f30c 	lsls.w	r3, r0, ip
   d80ce:	fa20 f002 	lsr.w	r0, r0, r2
   d80d2:	bf18      	it	ne
   d80d4:	f040 0001 	orrne.w	r0, r0, #1
   d80d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d80dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d80e0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d80e4:	ea40 000c 	orr.w	r0, r0, ip
   d80e8:	fa23 f302 	lsr.w	r3, r3, r2
   d80ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d80f0:	e7cc      	b.n	d808c <__aeabi_d2f+0x14>
   d80f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d80f6:	d107      	bne.n	d8108 <__aeabi_d2f+0x90>
   d80f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d80fc:	bf1e      	ittt	ne
   d80fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8102:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8106:	4770      	bxne	lr
   d8108:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d810c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8110:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8114:	4770      	bx	lr
   d8116:	bf00      	nop

000d8118 <__aeabi_uldivmod>:
   d8118:	b953      	cbnz	r3, d8130 <__aeabi_uldivmod+0x18>
   d811a:	b94a      	cbnz	r2, d8130 <__aeabi_uldivmod+0x18>
   d811c:	2900      	cmp	r1, #0
   d811e:	bf08      	it	eq
   d8120:	2800      	cmpeq	r0, #0
   d8122:	bf1c      	itt	ne
   d8124:	f04f 31ff 	movne.w	r1, #4294967295
   d8128:	f04f 30ff 	movne.w	r0, #4294967295
   d812c:	f000 b97e 	b.w	d842c <__aeabi_idiv0>
   d8130:	f1ad 0c08 	sub.w	ip, sp, #8
   d8134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d8138:	f000 f806 	bl	d8148 <__udivmoddi4>
   d813c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8144:	b004      	add	sp, #16
   d8146:	4770      	bx	lr

000d8148 <__udivmoddi4>:
   d8148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d814c:	468c      	mov	ip, r1
   d814e:	460e      	mov	r6, r1
   d8150:	4604      	mov	r4, r0
   d8152:	9d08      	ldr	r5, [sp, #32]
   d8154:	2b00      	cmp	r3, #0
   d8156:	d150      	bne.n	d81fa <__udivmoddi4+0xb2>
   d8158:	428a      	cmp	r2, r1
   d815a:	4617      	mov	r7, r2
   d815c:	d96c      	bls.n	d8238 <__udivmoddi4+0xf0>
   d815e:	fab2 fe82 	clz	lr, r2
   d8162:	f1be 0f00 	cmp.w	lr, #0
   d8166:	d00b      	beq.n	d8180 <__udivmoddi4+0x38>
   d8168:	f1ce 0420 	rsb	r4, lr, #32
   d816c:	fa20 f404 	lsr.w	r4, r0, r4
   d8170:	fa01 f60e 	lsl.w	r6, r1, lr
   d8174:	ea44 0c06 	orr.w	ip, r4, r6
   d8178:	fa02 f70e 	lsl.w	r7, r2, lr
   d817c:	fa00 f40e 	lsl.w	r4, r0, lr
   d8180:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8184:	0c22      	lsrs	r2, r4, #16
   d8186:	fbbc f0f9 	udiv	r0, ip, r9
   d818a:	fa1f f887 	uxth.w	r8, r7
   d818e:	fb09 c610 	mls	r6, r9, r0, ip
   d8192:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8196:	fb00 f308 	mul.w	r3, r0, r8
   d819a:	42b3      	cmp	r3, r6
   d819c:	d909      	bls.n	d81b2 <__udivmoddi4+0x6a>
   d819e:	19f6      	adds	r6, r6, r7
   d81a0:	f100 32ff 	add.w	r2, r0, #4294967295
   d81a4:	f080 8122 	bcs.w	d83ec <__udivmoddi4+0x2a4>
   d81a8:	42b3      	cmp	r3, r6
   d81aa:	f240 811f 	bls.w	d83ec <__udivmoddi4+0x2a4>
   d81ae:	3802      	subs	r0, #2
   d81b0:	443e      	add	r6, r7
   d81b2:	1af6      	subs	r6, r6, r3
   d81b4:	b2a2      	uxth	r2, r4
   d81b6:	fbb6 f3f9 	udiv	r3, r6, r9
   d81ba:	fb09 6613 	mls	r6, r9, r3, r6
   d81be:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d81c2:	fb03 f808 	mul.w	r8, r3, r8
   d81c6:	45a0      	cmp	r8, r4
   d81c8:	d909      	bls.n	d81de <__udivmoddi4+0x96>
   d81ca:	19e4      	adds	r4, r4, r7
   d81cc:	f103 32ff 	add.w	r2, r3, #4294967295
   d81d0:	f080 810a 	bcs.w	d83e8 <__udivmoddi4+0x2a0>
   d81d4:	45a0      	cmp	r8, r4
   d81d6:	f240 8107 	bls.w	d83e8 <__udivmoddi4+0x2a0>
   d81da:	3b02      	subs	r3, #2
   d81dc:	443c      	add	r4, r7
   d81de:	ebc8 0404 	rsb	r4, r8, r4
   d81e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d81e6:	2100      	movs	r1, #0
   d81e8:	2d00      	cmp	r5, #0
   d81ea:	d062      	beq.n	d82b2 <__udivmoddi4+0x16a>
   d81ec:	fa24 f40e 	lsr.w	r4, r4, lr
   d81f0:	2300      	movs	r3, #0
   d81f2:	602c      	str	r4, [r5, #0]
   d81f4:	606b      	str	r3, [r5, #4]
   d81f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d81fa:	428b      	cmp	r3, r1
   d81fc:	d907      	bls.n	d820e <__udivmoddi4+0xc6>
   d81fe:	2d00      	cmp	r5, #0
   d8200:	d055      	beq.n	d82ae <__udivmoddi4+0x166>
   d8202:	2100      	movs	r1, #0
   d8204:	e885 0041 	stmia.w	r5, {r0, r6}
   d8208:	4608      	mov	r0, r1
   d820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d820e:	fab3 f183 	clz	r1, r3
   d8212:	2900      	cmp	r1, #0
   d8214:	f040 8090 	bne.w	d8338 <__udivmoddi4+0x1f0>
   d8218:	42b3      	cmp	r3, r6
   d821a:	d302      	bcc.n	d8222 <__udivmoddi4+0xda>
   d821c:	4282      	cmp	r2, r0
   d821e:	f200 80f8 	bhi.w	d8412 <__udivmoddi4+0x2ca>
   d8222:	1a84      	subs	r4, r0, r2
   d8224:	eb66 0603 	sbc.w	r6, r6, r3
   d8228:	2001      	movs	r0, #1
   d822a:	46b4      	mov	ip, r6
   d822c:	2d00      	cmp	r5, #0
   d822e:	d040      	beq.n	d82b2 <__udivmoddi4+0x16a>
   d8230:	e885 1010 	stmia.w	r5, {r4, ip}
   d8234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8238:	b912      	cbnz	r2, d8240 <__udivmoddi4+0xf8>
   d823a:	2701      	movs	r7, #1
   d823c:	fbb7 f7f2 	udiv	r7, r7, r2
   d8240:	fab7 fe87 	clz	lr, r7
   d8244:	f1be 0f00 	cmp.w	lr, #0
   d8248:	d135      	bne.n	d82b6 <__udivmoddi4+0x16e>
   d824a:	1bf3      	subs	r3, r6, r7
   d824c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8250:	fa1f fc87 	uxth.w	ip, r7
   d8254:	2101      	movs	r1, #1
   d8256:	fbb3 f0f8 	udiv	r0, r3, r8
   d825a:	0c22      	lsrs	r2, r4, #16
   d825c:	fb08 3610 	mls	r6, r8, r0, r3
   d8260:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8264:	fb0c f300 	mul.w	r3, ip, r0
   d8268:	42b3      	cmp	r3, r6
   d826a:	d907      	bls.n	d827c <__udivmoddi4+0x134>
   d826c:	19f6      	adds	r6, r6, r7
   d826e:	f100 32ff 	add.w	r2, r0, #4294967295
   d8272:	d202      	bcs.n	d827a <__udivmoddi4+0x132>
   d8274:	42b3      	cmp	r3, r6
   d8276:	f200 80ce 	bhi.w	d8416 <__udivmoddi4+0x2ce>
   d827a:	4610      	mov	r0, r2
   d827c:	1af6      	subs	r6, r6, r3
   d827e:	b2a2      	uxth	r2, r4
   d8280:	fbb6 f3f8 	udiv	r3, r6, r8
   d8284:	fb08 6613 	mls	r6, r8, r3, r6
   d8288:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d828c:	fb0c fc03 	mul.w	ip, ip, r3
   d8290:	45a4      	cmp	ip, r4
   d8292:	d907      	bls.n	d82a4 <__udivmoddi4+0x15c>
   d8294:	19e4      	adds	r4, r4, r7
   d8296:	f103 32ff 	add.w	r2, r3, #4294967295
   d829a:	d202      	bcs.n	d82a2 <__udivmoddi4+0x15a>
   d829c:	45a4      	cmp	ip, r4
   d829e:	f200 80b5 	bhi.w	d840c <__udivmoddi4+0x2c4>
   d82a2:	4613      	mov	r3, r2
   d82a4:	ebcc 0404 	rsb	r4, ip, r4
   d82a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d82ac:	e79c      	b.n	d81e8 <__udivmoddi4+0xa0>
   d82ae:	4629      	mov	r1, r5
   d82b0:	4628      	mov	r0, r5
   d82b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82b6:	f1ce 0120 	rsb	r1, lr, #32
   d82ba:	fa06 f30e 	lsl.w	r3, r6, lr
   d82be:	fa07 f70e 	lsl.w	r7, r7, lr
   d82c2:	fa20 f901 	lsr.w	r9, r0, r1
   d82c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d82ca:	40ce      	lsrs	r6, r1
   d82cc:	ea49 0903 	orr.w	r9, r9, r3
   d82d0:	fbb6 faf8 	udiv	sl, r6, r8
   d82d4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d82d8:	fb08 661a 	mls	r6, r8, sl, r6
   d82dc:	fa1f fc87 	uxth.w	ip, r7
   d82e0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d82e4:	fb0a f20c 	mul.w	r2, sl, ip
   d82e8:	429a      	cmp	r2, r3
   d82ea:	fa00 f40e 	lsl.w	r4, r0, lr
   d82ee:	d90a      	bls.n	d8306 <__udivmoddi4+0x1be>
   d82f0:	19db      	adds	r3, r3, r7
   d82f2:	f10a 31ff 	add.w	r1, sl, #4294967295
   d82f6:	f080 8087 	bcs.w	d8408 <__udivmoddi4+0x2c0>
   d82fa:	429a      	cmp	r2, r3
   d82fc:	f240 8084 	bls.w	d8408 <__udivmoddi4+0x2c0>
   d8300:	f1aa 0a02 	sub.w	sl, sl, #2
   d8304:	443b      	add	r3, r7
   d8306:	1a9b      	subs	r3, r3, r2
   d8308:	fa1f f989 	uxth.w	r9, r9
   d830c:	fbb3 f1f8 	udiv	r1, r3, r8
   d8310:	fb08 3311 	mls	r3, r8, r1, r3
   d8314:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d8318:	fb01 f60c 	mul.w	r6, r1, ip
   d831c:	429e      	cmp	r6, r3
   d831e:	d907      	bls.n	d8330 <__udivmoddi4+0x1e8>
   d8320:	19db      	adds	r3, r3, r7
   d8322:	f101 32ff 	add.w	r2, r1, #4294967295
   d8326:	d26b      	bcs.n	d8400 <__udivmoddi4+0x2b8>
   d8328:	429e      	cmp	r6, r3
   d832a:	d969      	bls.n	d8400 <__udivmoddi4+0x2b8>
   d832c:	3902      	subs	r1, #2
   d832e:	443b      	add	r3, r7
   d8330:	1b9b      	subs	r3, r3, r6
   d8332:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d8336:	e78e      	b.n	d8256 <__udivmoddi4+0x10e>
   d8338:	f1c1 0e20 	rsb	lr, r1, #32
   d833c:	fa22 f40e 	lsr.w	r4, r2, lr
   d8340:	408b      	lsls	r3, r1
   d8342:	4323      	orrs	r3, r4
   d8344:	fa20 f70e 	lsr.w	r7, r0, lr
   d8348:	fa06 f401 	lsl.w	r4, r6, r1
   d834c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d8350:	fa26 f60e 	lsr.w	r6, r6, lr
   d8354:	433c      	orrs	r4, r7
   d8356:	fbb6 f9fc 	udiv	r9, r6, ip
   d835a:	0c27      	lsrs	r7, r4, #16
   d835c:	fb0c 6619 	mls	r6, ip, r9, r6
   d8360:	fa1f f883 	uxth.w	r8, r3
   d8364:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8368:	fb09 f708 	mul.w	r7, r9, r8
   d836c:	42b7      	cmp	r7, r6
   d836e:	fa02 f201 	lsl.w	r2, r2, r1
   d8372:	fa00 fa01 	lsl.w	sl, r0, r1
   d8376:	d908      	bls.n	d838a <__udivmoddi4+0x242>
   d8378:	18f6      	adds	r6, r6, r3
   d837a:	f109 30ff 	add.w	r0, r9, #4294967295
   d837e:	d241      	bcs.n	d8404 <__udivmoddi4+0x2bc>
   d8380:	42b7      	cmp	r7, r6
   d8382:	d93f      	bls.n	d8404 <__udivmoddi4+0x2bc>
   d8384:	f1a9 0902 	sub.w	r9, r9, #2
   d8388:	441e      	add	r6, r3
   d838a:	1bf6      	subs	r6, r6, r7
   d838c:	b2a0      	uxth	r0, r4
   d838e:	fbb6 f4fc 	udiv	r4, r6, ip
   d8392:	fb0c 6614 	mls	r6, ip, r4, r6
   d8396:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d839a:	fb04 f808 	mul.w	r8, r4, r8
   d839e:	45b8      	cmp	r8, r7
   d83a0:	d907      	bls.n	d83b2 <__udivmoddi4+0x26a>
   d83a2:	18ff      	adds	r7, r7, r3
   d83a4:	f104 30ff 	add.w	r0, r4, #4294967295
   d83a8:	d228      	bcs.n	d83fc <__udivmoddi4+0x2b4>
   d83aa:	45b8      	cmp	r8, r7
   d83ac:	d926      	bls.n	d83fc <__udivmoddi4+0x2b4>
   d83ae:	3c02      	subs	r4, #2
   d83b0:	441f      	add	r7, r3
   d83b2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d83b6:	ebc8 0707 	rsb	r7, r8, r7
   d83ba:	fba0 8902 	umull	r8, r9, r0, r2
   d83be:	454f      	cmp	r7, r9
   d83c0:	4644      	mov	r4, r8
   d83c2:	464e      	mov	r6, r9
   d83c4:	d314      	bcc.n	d83f0 <__udivmoddi4+0x2a8>
   d83c6:	d029      	beq.n	d841c <__udivmoddi4+0x2d4>
   d83c8:	b365      	cbz	r5, d8424 <__udivmoddi4+0x2dc>
   d83ca:	ebba 0304 	subs.w	r3, sl, r4
   d83ce:	eb67 0706 	sbc.w	r7, r7, r6
   d83d2:	fa07 fe0e 	lsl.w	lr, r7, lr
   d83d6:	40cb      	lsrs	r3, r1
   d83d8:	40cf      	lsrs	r7, r1
   d83da:	ea4e 0303 	orr.w	r3, lr, r3
   d83de:	e885 0088 	stmia.w	r5, {r3, r7}
   d83e2:	2100      	movs	r1, #0
   d83e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d83e8:	4613      	mov	r3, r2
   d83ea:	e6f8      	b.n	d81de <__udivmoddi4+0x96>
   d83ec:	4610      	mov	r0, r2
   d83ee:	e6e0      	b.n	d81b2 <__udivmoddi4+0x6a>
   d83f0:	ebb8 0402 	subs.w	r4, r8, r2
   d83f4:	eb69 0603 	sbc.w	r6, r9, r3
   d83f8:	3801      	subs	r0, #1
   d83fa:	e7e5      	b.n	d83c8 <__udivmoddi4+0x280>
   d83fc:	4604      	mov	r4, r0
   d83fe:	e7d8      	b.n	d83b2 <__udivmoddi4+0x26a>
   d8400:	4611      	mov	r1, r2
   d8402:	e795      	b.n	d8330 <__udivmoddi4+0x1e8>
   d8404:	4681      	mov	r9, r0
   d8406:	e7c0      	b.n	d838a <__udivmoddi4+0x242>
   d8408:	468a      	mov	sl, r1
   d840a:	e77c      	b.n	d8306 <__udivmoddi4+0x1be>
   d840c:	3b02      	subs	r3, #2
   d840e:	443c      	add	r4, r7
   d8410:	e748      	b.n	d82a4 <__udivmoddi4+0x15c>
   d8412:	4608      	mov	r0, r1
   d8414:	e70a      	b.n	d822c <__udivmoddi4+0xe4>
   d8416:	3802      	subs	r0, #2
   d8418:	443e      	add	r6, r7
   d841a:	e72f      	b.n	d827c <__udivmoddi4+0x134>
   d841c:	45c2      	cmp	sl, r8
   d841e:	d3e7      	bcc.n	d83f0 <__udivmoddi4+0x2a8>
   d8420:	463e      	mov	r6, r7
   d8422:	e7d1      	b.n	d83c8 <__udivmoddi4+0x280>
   d8424:	4629      	mov	r1, r5
   d8426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d842a:	bf00      	nop

000d842c <__aeabi_idiv0>:
   d842c:	4770      	bx	lr
   d842e:	bf00      	nop

000d8430 <atoi>:
   d8430:	220a      	movs	r2, #10
   d8432:	2100      	movs	r1, #0
   d8434:	f000 ba40 	b.w	d88b8 <strtol>

000d8438 <__cxa_atexit>:
   d8438:	b510      	push	{r4, lr}
   d843a:	4c05      	ldr	r4, [pc, #20]	; (d8450 <__cxa_atexit+0x18>)
   d843c:	4613      	mov	r3, r2
   d843e:	b12c      	cbz	r4, d844c <__cxa_atexit+0x14>
   d8440:	460a      	mov	r2, r1
   d8442:	4601      	mov	r1, r0
   d8444:	2002      	movs	r0, #2
   d8446:	f3af 8000 	nop.w
   d844a:	bd10      	pop	{r4, pc}
   d844c:	4620      	mov	r0, r4
   d844e:	bd10      	pop	{r4, pc}
   d8450:	00000000 	.word	0x00000000

000d8454 <localtime>:
   d8454:	b538      	push	{r3, r4, r5, lr}
   d8456:	4b07      	ldr	r3, [pc, #28]	; (d8474 <localtime+0x20>)
   d8458:	681c      	ldr	r4, [r3, #0]
   d845a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d845c:	4605      	mov	r5, r0
   d845e:	b91b      	cbnz	r3, d8468 <localtime+0x14>
   d8460:	2024      	movs	r0, #36	; 0x24
   d8462:	f7fd f9a3 	bl	d57ac <malloc>
   d8466:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8468:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d846a:	4628      	mov	r0, r5
   d846c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8470:	f000 b802 	b.w	d8478 <localtime_r>
   d8474:	2003e1c0 	.word	0x2003e1c0

000d8478 <localtime_r>:
   d8478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d847c:	460c      	mov	r4, r1
   d847e:	4680      	mov	r8, r0
   d8480:	f000 fd20 	bl	d8ec4 <__gettzinfo>
   d8484:	4621      	mov	r1, r4
   d8486:	4607      	mov	r7, r0
   d8488:	4640      	mov	r0, r8
   d848a:	f000 fd1f 	bl	d8ecc <gmtime_r>
   d848e:	6946      	ldr	r6, [r0, #20]
   d8490:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8494:	07b3      	lsls	r3, r6, #30
   d8496:	4604      	mov	r4, r0
   d8498:	d105      	bne.n	d84a6 <localtime_r+0x2e>
   d849a:	2264      	movs	r2, #100	; 0x64
   d849c:	fb96 f3f2 	sdiv	r3, r6, r2
   d84a0:	fb02 6313 	mls	r3, r2, r3, r6
   d84a4:	b94b      	cbnz	r3, d84ba <localtime_r+0x42>
   d84a6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d84aa:	fb96 f3f5 	sdiv	r3, r6, r5
   d84ae:	fb05 6513 	mls	r5, r5, r3, r6
   d84b2:	fab5 f385 	clz	r3, r5
   d84b6:	095b      	lsrs	r3, r3, #5
   d84b8:	e000      	b.n	d84bc <localtime_r+0x44>
   d84ba:	2301      	movs	r3, #1
   d84bc:	4a5f      	ldr	r2, [pc, #380]	; (d863c <localtime_r+0x1c4>)
   d84be:	2530      	movs	r5, #48	; 0x30
   d84c0:	fb05 2503 	mla	r5, r5, r3, r2
   d84c4:	f000 fb32 	bl	d8b2c <__tz_lock>
   d84c8:	f000 fb32 	bl	d8b30 <_tzset_unlocked>
   d84cc:	4b5c      	ldr	r3, [pc, #368]	; (d8640 <localtime_r+0x1c8>)
   d84ce:	681b      	ldr	r3, [r3, #0]
   d84d0:	b1f3      	cbz	r3, d8510 <localtime_r+0x98>
   d84d2:	687b      	ldr	r3, [r7, #4]
   d84d4:	429e      	cmp	r6, r3
   d84d6:	d105      	bne.n	d84e4 <localtime_r+0x6c>
   d84d8:	6839      	ldr	r1, [r7, #0]
   d84da:	f8d8 3000 	ldr.w	r3, [r8]
   d84de:	69fa      	ldr	r2, [r7, #28]
   d84e0:	b941      	cbnz	r1, d84f4 <localtime_r+0x7c>
   d84e2:	e00a      	b.n	d84fa <localtime_r+0x82>
   d84e4:	4630      	mov	r0, r6
   d84e6:	f000 fa79 	bl	d89dc <__tzcalc_limits>
   d84ea:	2800      	cmp	r0, #0
   d84ec:	d1f4      	bne.n	d84d8 <localtime_r+0x60>
   d84ee:	f04f 33ff 	mov.w	r3, #4294967295
   d84f2:	e00d      	b.n	d8510 <localtime_r+0x98>
   d84f4:	4293      	cmp	r3, r2
   d84f6:	db08      	blt.n	d850a <localtime_r+0x92>
   d84f8:	e001      	b.n	d84fe <localtime_r+0x86>
   d84fa:	4293      	cmp	r3, r2
   d84fc:	da07      	bge.n	d850e <localtime_r+0x96>
   d84fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8500:	4293      	cmp	r3, r2
   d8502:	bfac      	ite	ge
   d8504:	2300      	movge	r3, #0
   d8506:	2301      	movlt	r3, #1
   d8508:	e002      	b.n	d8510 <localtime_r+0x98>
   d850a:	2300      	movs	r3, #0
   d850c:	e000      	b.n	d8510 <localtime_r+0x98>
   d850e:	2301      	movs	r3, #1
   d8510:	6223      	str	r3, [r4, #32]
   d8512:	6a23      	ldr	r3, [r4, #32]
   d8514:	2b01      	cmp	r3, #1
   d8516:	bf0c      	ite	eq
   d8518:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d851a:	6a39      	ldrne	r1, [r7, #32]
   d851c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8520:	203c      	movs	r0, #60	; 0x3c
   d8522:	fb91 f6f3 	sdiv	r6, r1, r3
   d8526:	fb03 1316 	mls	r3, r3, r6, r1
   d852a:	6861      	ldr	r1, [r4, #4]
   d852c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8530:	fb00 3012 	mls	r0, r0, r2, r3
   d8534:	6823      	ldr	r3, [r4, #0]
   d8536:	1a89      	subs	r1, r1, r2
   d8538:	68a2      	ldr	r2, [r4, #8]
   d853a:	6061      	str	r1, [r4, #4]
   d853c:	1a1b      	subs	r3, r3, r0
   d853e:	1b92      	subs	r2, r2, r6
   d8540:	2b3b      	cmp	r3, #59	; 0x3b
   d8542:	6023      	str	r3, [r4, #0]
   d8544:	60a2      	str	r2, [r4, #8]
   d8546:	dd03      	ble.n	d8550 <localtime_r+0xd8>
   d8548:	3101      	adds	r1, #1
   d854a:	6061      	str	r1, [r4, #4]
   d854c:	3b3c      	subs	r3, #60	; 0x3c
   d854e:	e004      	b.n	d855a <localtime_r+0xe2>
   d8550:	2b00      	cmp	r3, #0
   d8552:	da03      	bge.n	d855c <localtime_r+0xe4>
   d8554:	3901      	subs	r1, #1
   d8556:	6061      	str	r1, [r4, #4]
   d8558:	333c      	adds	r3, #60	; 0x3c
   d855a:	6023      	str	r3, [r4, #0]
   d855c:	6863      	ldr	r3, [r4, #4]
   d855e:	2b3b      	cmp	r3, #59	; 0x3b
   d8560:	dd03      	ble.n	d856a <localtime_r+0xf2>
   d8562:	3201      	adds	r2, #1
   d8564:	60a2      	str	r2, [r4, #8]
   d8566:	3b3c      	subs	r3, #60	; 0x3c
   d8568:	e004      	b.n	d8574 <localtime_r+0xfc>
   d856a:	2b00      	cmp	r3, #0
   d856c:	da03      	bge.n	d8576 <localtime_r+0xfe>
   d856e:	3a01      	subs	r2, #1
   d8570:	60a2      	str	r2, [r4, #8]
   d8572:	333c      	adds	r3, #60	; 0x3c
   d8574:	6063      	str	r3, [r4, #4]
   d8576:	68a3      	ldr	r3, [r4, #8]
   d8578:	2b17      	cmp	r3, #23
   d857a:	dd22      	ble.n	d85c2 <localtime_r+0x14a>
   d857c:	69e2      	ldr	r2, [r4, #28]
   d857e:	3201      	adds	r2, #1
   d8580:	61e2      	str	r2, [r4, #28]
   d8582:	69a2      	ldr	r2, [r4, #24]
   d8584:	3201      	adds	r2, #1
   d8586:	2a06      	cmp	r2, #6
   d8588:	bfc8      	it	gt
   d858a:	2200      	movgt	r2, #0
   d858c:	61a2      	str	r2, [r4, #24]
   d858e:	68e2      	ldr	r2, [r4, #12]
   d8590:	3b18      	subs	r3, #24
   d8592:	3201      	adds	r2, #1
   d8594:	60a3      	str	r3, [r4, #8]
   d8596:	6923      	ldr	r3, [r4, #16]
   d8598:	60e2      	str	r2, [r4, #12]
   d859a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d859e:	428a      	cmp	r2, r1
   d85a0:	dd46      	ble.n	d8630 <localtime_r+0x1b8>
   d85a2:	3301      	adds	r3, #1
   d85a4:	2b0c      	cmp	r3, #12
   d85a6:	bf0c      	ite	eq
   d85a8:	6963      	ldreq	r3, [r4, #20]
   d85aa:	6123      	strne	r3, [r4, #16]
   d85ac:	eba2 0201 	sub.w	r2, r2, r1
   d85b0:	60e2      	str	r2, [r4, #12]
   d85b2:	bf01      	itttt	eq
   d85b4:	3301      	addeq	r3, #1
   d85b6:	2200      	moveq	r2, #0
   d85b8:	6122      	streq	r2, [r4, #16]
   d85ba:	6163      	streq	r3, [r4, #20]
   d85bc:	bf08      	it	eq
   d85be:	61e2      	streq	r2, [r4, #28]
   d85c0:	e036      	b.n	d8630 <localtime_r+0x1b8>
   d85c2:	2b00      	cmp	r3, #0
   d85c4:	da34      	bge.n	d8630 <localtime_r+0x1b8>
   d85c6:	69e2      	ldr	r2, [r4, #28]
   d85c8:	3a01      	subs	r2, #1
   d85ca:	61e2      	str	r2, [r4, #28]
   d85cc:	69a2      	ldr	r2, [r4, #24]
   d85ce:	3a01      	subs	r2, #1
   d85d0:	bf48      	it	mi
   d85d2:	2206      	movmi	r2, #6
   d85d4:	61a2      	str	r2, [r4, #24]
   d85d6:	68e2      	ldr	r2, [r4, #12]
   d85d8:	3318      	adds	r3, #24
   d85da:	3a01      	subs	r2, #1
   d85dc:	60e2      	str	r2, [r4, #12]
   d85de:	60a3      	str	r3, [r4, #8]
   d85e0:	bb32      	cbnz	r2, d8630 <localtime_r+0x1b8>
   d85e2:	6923      	ldr	r3, [r4, #16]
   d85e4:	3b01      	subs	r3, #1
   d85e6:	d401      	bmi.n	d85ec <localtime_r+0x174>
   d85e8:	6123      	str	r3, [r4, #16]
   d85ea:	e01d      	b.n	d8628 <localtime_r+0x1b0>
   d85ec:	230b      	movs	r3, #11
   d85ee:	6123      	str	r3, [r4, #16]
   d85f0:	6963      	ldr	r3, [r4, #20]
   d85f2:	1e5a      	subs	r2, r3, #1
   d85f4:	f012 0f03 	tst.w	r2, #3
   d85f8:	6162      	str	r2, [r4, #20]
   d85fa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d85fe:	d105      	bne.n	d860c <localtime_r+0x194>
   d8600:	2164      	movs	r1, #100	; 0x64
   d8602:	fb93 f2f1 	sdiv	r2, r3, r1
   d8606:	fb01 3212 	mls	r2, r1, r2, r3
   d860a:	b94a      	cbnz	r2, d8620 <localtime_r+0x1a8>
   d860c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8610:	fb93 f2f1 	sdiv	r2, r3, r1
   d8614:	fb01 3312 	mls	r3, r1, r2, r3
   d8618:	fab3 f383 	clz	r3, r3
   d861c:	095b      	lsrs	r3, r3, #5
   d861e:	e000      	b.n	d8622 <localtime_r+0x1aa>
   d8620:	2301      	movs	r3, #1
   d8622:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8626:	61e3      	str	r3, [r4, #28]
   d8628:	6923      	ldr	r3, [r4, #16]
   d862a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d862e:	60e3      	str	r3, [r4, #12]
   d8630:	f000 fa7d 	bl	d8b2e <__tz_unlock>
   d8634:	4620      	mov	r0, r4
   d8636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d863a:	bf00      	nop
   d863c:	000d9704 	.word	0x000d9704
   d8640:	2003e7e4 	.word	0x2003e7e4

000d8644 <memcpy>:
   d8644:	b510      	push	{r4, lr}
   d8646:	1e43      	subs	r3, r0, #1
   d8648:	440a      	add	r2, r1
   d864a:	4291      	cmp	r1, r2
   d864c:	d004      	beq.n	d8658 <memcpy+0x14>
   d864e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8652:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8656:	e7f8      	b.n	d864a <memcpy+0x6>
   d8658:	bd10      	pop	{r4, pc}

000d865a <memmove>:
   d865a:	4288      	cmp	r0, r1
   d865c:	b510      	push	{r4, lr}
   d865e:	eb01 0302 	add.w	r3, r1, r2
   d8662:	d801      	bhi.n	d8668 <memmove+0xe>
   d8664:	1e42      	subs	r2, r0, #1
   d8666:	e00b      	b.n	d8680 <memmove+0x26>
   d8668:	4298      	cmp	r0, r3
   d866a:	d2fb      	bcs.n	d8664 <memmove+0xa>
   d866c:	1881      	adds	r1, r0, r2
   d866e:	1ad2      	subs	r2, r2, r3
   d8670:	42d3      	cmn	r3, r2
   d8672:	d004      	beq.n	d867e <memmove+0x24>
   d8674:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8678:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d867c:	e7f8      	b.n	d8670 <memmove+0x16>
   d867e:	bd10      	pop	{r4, pc}
   d8680:	4299      	cmp	r1, r3
   d8682:	d004      	beq.n	d868e <memmove+0x34>
   d8684:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8688:	f802 4f01 	strb.w	r4, [r2, #1]!
   d868c:	e7f8      	b.n	d8680 <memmove+0x26>
   d868e:	bd10      	pop	{r4, pc}

000d8690 <memset>:
   d8690:	4402      	add	r2, r0
   d8692:	4603      	mov	r3, r0
   d8694:	4293      	cmp	r3, r2
   d8696:	d002      	beq.n	d869e <memset+0xe>
   d8698:	f803 1b01 	strb.w	r1, [r3], #1
   d869c:	e7fa      	b.n	d8694 <memset+0x4>
   d869e:	4770      	bx	lr

000d86a0 <srand>:
   d86a0:	b538      	push	{r3, r4, r5, lr}
   d86a2:	4b12      	ldr	r3, [pc, #72]	; (d86ec <srand+0x4c>)
   d86a4:	681c      	ldr	r4, [r3, #0]
   d86a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86a8:	4605      	mov	r5, r0
   d86aa:	b9d3      	cbnz	r3, d86e2 <srand+0x42>
   d86ac:	2018      	movs	r0, #24
   d86ae:	f7fd f87d 	bl	d57ac <malloc>
   d86b2:	f243 330e 	movw	r3, #13070	; 0x330e
   d86b6:	63a0      	str	r0, [r4, #56]	; 0x38
   d86b8:	8003      	strh	r3, [r0, #0]
   d86ba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d86be:	8043      	strh	r3, [r0, #2]
   d86c0:	f241 2334 	movw	r3, #4660	; 0x1234
   d86c4:	8083      	strh	r3, [r0, #4]
   d86c6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d86ca:	80c3      	strh	r3, [r0, #6]
   d86cc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d86d0:	8103      	strh	r3, [r0, #8]
   d86d2:	2305      	movs	r3, #5
   d86d4:	8143      	strh	r3, [r0, #10]
   d86d6:	230b      	movs	r3, #11
   d86d8:	8183      	strh	r3, [r0, #12]
   d86da:	2201      	movs	r2, #1
   d86dc:	2300      	movs	r3, #0
   d86de:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d86e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86e4:	2200      	movs	r2, #0
   d86e6:	611d      	str	r5, [r3, #16]
   d86e8:	615a      	str	r2, [r3, #20]
   d86ea:	bd38      	pop	{r3, r4, r5, pc}
   d86ec:	2003e1c0 	.word	0x2003e1c0

000d86f0 <strcmp>:
   d86f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d86f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d86f8:	2a01      	cmp	r2, #1
   d86fa:	bf28      	it	cs
   d86fc:	429a      	cmpcs	r2, r3
   d86fe:	d0f7      	beq.n	d86f0 <strcmp>
   d8700:	1ad0      	subs	r0, r2, r3
   d8702:	4770      	bx	lr

000d8704 <strcpy>:
   d8704:	4603      	mov	r3, r0
   d8706:	f811 2b01 	ldrb.w	r2, [r1], #1
   d870a:	f803 2b01 	strb.w	r2, [r3], #1
   d870e:	2a00      	cmp	r2, #0
   d8710:	d1f9      	bne.n	d8706 <strcpy+0x2>
   d8712:	4770      	bx	lr

000d8714 <strdup>:
   d8714:	4b02      	ldr	r3, [pc, #8]	; (d8720 <strdup+0xc>)
   d8716:	4601      	mov	r1, r0
   d8718:	6818      	ldr	r0, [r3, #0]
   d871a:	f000 b803 	b.w	d8724 <_strdup_r>
   d871e:	bf00      	nop
   d8720:	2003e1c0 	.word	0x2003e1c0

000d8724 <_strdup_r>:
   d8724:	b570      	push	{r4, r5, r6, lr}
   d8726:	4606      	mov	r6, r0
   d8728:	4608      	mov	r0, r1
   d872a:	460c      	mov	r4, r1
   d872c:	f000 f80d 	bl	d874a <strlen>
   d8730:	1c45      	adds	r5, r0, #1
   d8732:	4629      	mov	r1, r5
   d8734:	4630      	mov	r0, r6
   d8736:	f7fd f869 	bl	d580c <_malloc_r>
   d873a:	4606      	mov	r6, r0
   d873c:	b118      	cbz	r0, d8746 <_strdup_r+0x22>
   d873e:	462a      	mov	r2, r5
   d8740:	4621      	mov	r1, r4
   d8742:	f7ff ff7f 	bl	d8644 <memcpy>
   d8746:	4630      	mov	r0, r6
   d8748:	bd70      	pop	{r4, r5, r6, pc}

000d874a <strlen>:
   d874a:	4603      	mov	r3, r0
   d874c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8750:	2a00      	cmp	r2, #0
   d8752:	d1fb      	bne.n	d874c <strlen+0x2>
   d8754:	1a18      	subs	r0, r3, r0
   d8756:	3801      	subs	r0, #1
   d8758:	4770      	bx	lr

000d875a <strncmp>:
   d875a:	b530      	push	{r4, r5, lr}
   d875c:	b182      	cbz	r2, d8780 <strncmp+0x26>
   d875e:	1e45      	subs	r5, r0, #1
   d8760:	3901      	subs	r1, #1
   d8762:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8766:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d876a:	42a3      	cmp	r3, r4
   d876c:	d106      	bne.n	d877c <strncmp+0x22>
   d876e:	43ec      	mvns	r4, r5
   d8770:	4414      	add	r4, r2
   d8772:	42e0      	cmn	r0, r4
   d8774:	d001      	beq.n	d877a <strncmp+0x20>
   d8776:	2b00      	cmp	r3, #0
   d8778:	d1f3      	bne.n	d8762 <strncmp+0x8>
   d877a:	461c      	mov	r4, r3
   d877c:	1b18      	subs	r0, r3, r4
   d877e:	bd30      	pop	{r4, r5, pc}
   d8780:	4610      	mov	r0, r2
   d8782:	bd30      	pop	{r4, r5, pc}

000d8784 <strncpy>:
   d8784:	b510      	push	{r4, lr}
   d8786:	4603      	mov	r3, r0
   d8788:	b142      	cbz	r2, d879c <strncpy+0x18>
   d878a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d878e:	f803 4b01 	strb.w	r4, [r3], #1
   d8792:	3a01      	subs	r2, #1
   d8794:	2c00      	cmp	r4, #0
   d8796:	d1f7      	bne.n	d8788 <strncpy+0x4>
   d8798:	441a      	add	r2, r3
   d879a:	e000      	b.n	d879e <strncpy+0x1a>
   d879c:	bd10      	pop	{r4, pc}
   d879e:	4293      	cmp	r3, r2
   d87a0:	d002      	beq.n	d87a8 <strncpy+0x24>
   d87a2:	f803 4b01 	strb.w	r4, [r3], #1
   d87a6:	e7fa      	b.n	d879e <strncpy+0x1a>
   d87a8:	bd10      	pop	{r4, pc}
	...

000d87ac <_strtol_r>:
   d87ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d87b0:	4680      	mov	r8, r0
   d87b2:	4840      	ldr	r0, [pc, #256]	; (d88b4 <_strtol_r+0x108>)
   d87b4:	f8d0 9000 	ldr.w	r9, [r0]
   d87b8:	460f      	mov	r7, r1
   d87ba:	463d      	mov	r5, r7
   d87bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d87c0:	eb09 0004 	add.w	r0, r9, r4
   d87c4:	7840      	ldrb	r0, [r0, #1]
   d87c6:	f000 0008 	and.w	r0, r0, #8
   d87ca:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d87ce:	b108      	cbz	r0, d87d4 <_strtol_r+0x28>
   d87d0:	462f      	mov	r7, r5
   d87d2:	e7f2      	b.n	d87ba <_strtol_r+0xe>
   d87d4:	2c2d      	cmp	r4, #45	; 0x2d
   d87d6:	d103      	bne.n	d87e0 <_strtol_r+0x34>
   d87d8:	1cbd      	adds	r5, r7, #2
   d87da:	787c      	ldrb	r4, [r7, #1]
   d87dc:	2601      	movs	r6, #1
   d87de:	e003      	b.n	d87e8 <_strtol_r+0x3c>
   d87e0:	2c2b      	cmp	r4, #43	; 0x2b
   d87e2:	bf04      	itt	eq
   d87e4:	787c      	ldrbeq	r4, [r7, #1]
   d87e6:	1cbd      	addeq	r5, r7, #2
   d87e8:	b113      	cbz	r3, d87f0 <_strtol_r+0x44>
   d87ea:	2b10      	cmp	r3, #16
   d87ec:	d10a      	bne.n	d8804 <_strtol_r+0x58>
   d87ee:	e05b      	b.n	d88a8 <_strtol_r+0xfc>
   d87f0:	2c30      	cmp	r4, #48	; 0x30
   d87f2:	d157      	bne.n	d88a4 <_strtol_r+0xf8>
   d87f4:	7828      	ldrb	r0, [r5, #0]
   d87f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d87fa:	2858      	cmp	r0, #88	; 0x58
   d87fc:	d14d      	bne.n	d889a <_strtol_r+0xee>
   d87fe:	786c      	ldrb	r4, [r5, #1]
   d8800:	2310      	movs	r3, #16
   d8802:	3502      	adds	r5, #2
   d8804:	2e00      	cmp	r6, #0
   d8806:	bf14      	ite	ne
   d8808:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d880c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8810:	2700      	movs	r7, #0
   d8812:	fbbc faf3 	udiv	sl, ip, r3
   d8816:	4638      	mov	r0, r7
   d8818:	fb03 cc1a 	mls	ip, r3, sl, ip
   d881c:	eb09 0e04 	add.w	lr, r9, r4
   d8820:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8824:	f01e 0f04 	tst.w	lr, #4
   d8828:	d001      	beq.n	d882e <_strtol_r+0x82>
   d882a:	3c30      	subs	r4, #48	; 0x30
   d882c:	e00b      	b.n	d8846 <_strtol_r+0x9a>
   d882e:	f01e 0e03 	ands.w	lr, lr, #3
   d8832:	d01b      	beq.n	d886c <_strtol_r+0xc0>
   d8834:	f1be 0f01 	cmp.w	lr, #1
   d8838:	bf0c      	ite	eq
   d883a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d883e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8842:	ebce 0404 	rsb	r4, lr, r4
   d8846:	42a3      	cmp	r3, r4
   d8848:	dd10      	ble.n	d886c <_strtol_r+0xc0>
   d884a:	f1b7 3fff 	cmp.w	r7, #4294967295
   d884e:	d00a      	beq.n	d8866 <_strtol_r+0xba>
   d8850:	4550      	cmp	r0, sl
   d8852:	d806      	bhi.n	d8862 <_strtol_r+0xb6>
   d8854:	d101      	bne.n	d885a <_strtol_r+0xae>
   d8856:	4564      	cmp	r4, ip
   d8858:	dc03      	bgt.n	d8862 <_strtol_r+0xb6>
   d885a:	fb03 4000 	mla	r0, r3, r0, r4
   d885e:	2701      	movs	r7, #1
   d8860:	e001      	b.n	d8866 <_strtol_r+0xba>
   d8862:	f04f 37ff 	mov.w	r7, #4294967295
   d8866:	f815 4b01 	ldrb.w	r4, [r5], #1
   d886a:	e7d7      	b.n	d881c <_strtol_r+0x70>
   d886c:	1c7b      	adds	r3, r7, #1
   d886e:	d10c      	bne.n	d888a <_strtol_r+0xde>
   d8870:	2e00      	cmp	r6, #0
   d8872:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8876:	bf14      	ite	ne
   d8878:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d887c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8880:	f8c8 3000 	str.w	r3, [r8]
   d8884:	b92a      	cbnz	r2, d8892 <_strtol_r+0xe6>
   d8886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d888a:	b106      	cbz	r6, d888e <_strtol_r+0xe2>
   d888c:	4240      	negs	r0, r0
   d888e:	b172      	cbz	r2, d88ae <_strtol_r+0x102>
   d8890:	b107      	cbz	r7, d8894 <_strtol_r+0xe8>
   d8892:	1e69      	subs	r1, r5, #1
   d8894:	6011      	str	r1, [r2, #0]
   d8896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d889a:	2430      	movs	r4, #48	; 0x30
   d889c:	2b00      	cmp	r3, #0
   d889e:	d1b1      	bne.n	d8804 <_strtol_r+0x58>
   d88a0:	2308      	movs	r3, #8
   d88a2:	e7af      	b.n	d8804 <_strtol_r+0x58>
   d88a4:	230a      	movs	r3, #10
   d88a6:	e7ad      	b.n	d8804 <_strtol_r+0x58>
   d88a8:	2c30      	cmp	r4, #48	; 0x30
   d88aa:	d0a3      	beq.n	d87f4 <_strtol_r+0x48>
   d88ac:	e7aa      	b.n	d8804 <_strtol_r+0x58>
   d88ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88b2:	bf00      	nop
   d88b4:	2003e15c 	.word	0x2003e15c

000d88b8 <strtol>:
   d88b8:	4613      	mov	r3, r2
   d88ba:	460a      	mov	r2, r1
   d88bc:	4601      	mov	r1, r0
   d88be:	4802      	ldr	r0, [pc, #8]	; (d88c8 <strtol+0x10>)
   d88c0:	6800      	ldr	r0, [r0, #0]
   d88c2:	f7ff bf73 	b.w	d87ac <_strtol_r>
   d88c6:	bf00      	nop
   d88c8:	2003e1c0 	.word	0x2003e1c0

000d88cc <_strtoul_r>:
   d88cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d88d0:	4680      	mov	r8, r0
   d88d2:	483c      	ldr	r0, [pc, #240]	; (d89c4 <_strtoul_r+0xf8>)
   d88d4:	f8d0 9000 	ldr.w	r9, [r0]
   d88d8:	460e      	mov	r6, r1
   d88da:	4635      	mov	r5, r6
   d88dc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d88e0:	eb09 0004 	add.w	r0, r9, r4
   d88e4:	7840      	ldrb	r0, [r0, #1]
   d88e6:	f000 0008 	and.w	r0, r0, #8
   d88ea:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d88ee:	b108      	cbz	r0, d88f4 <_strtoul_r+0x28>
   d88f0:	462e      	mov	r6, r5
   d88f2:	e7f2      	b.n	d88da <_strtoul_r+0xe>
   d88f4:	2c2d      	cmp	r4, #45	; 0x2d
   d88f6:	d103      	bne.n	d8900 <_strtoul_r+0x34>
   d88f8:	1cb5      	adds	r5, r6, #2
   d88fa:	7874      	ldrb	r4, [r6, #1]
   d88fc:	2701      	movs	r7, #1
   d88fe:	e003      	b.n	d8908 <_strtoul_r+0x3c>
   d8900:	2c2b      	cmp	r4, #43	; 0x2b
   d8902:	bf04      	itt	eq
   d8904:	7874      	ldrbeq	r4, [r6, #1]
   d8906:	1cb5      	addeq	r5, r6, #2
   d8908:	b113      	cbz	r3, d8910 <_strtoul_r+0x44>
   d890a:	2b10      	cmp	r3, #16
   d890c:	d10a      	bne.n	d8924 <_strtoul_r+0x58>
   d890e:	e053      	b.n	d89b8 <_strtoul_r+0xec>
   d8910:	2c30      	cmp	r4, #48	; 0x30
   d8912:	d14f      	bne.n	d89b4 <_strtoul_r+0xe8>
   d8914:	7828      	ldrb	r0, [r5, #0]
   d8916:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d891a:	2858      	cmp	r0, #88	; 0x58
   d891c:	d145      	bne.n	d89aa <_strtoul_r+0xde>
   d891e:	786c      	ldrb	r4, [r5, #1]
   d8920:	2310      	movs	r3, #16
   d8922:	3502      	adds	r5, #2
   d8924:	f04f 3cff 	mov.w	ip, #4294967295
   d8928:	2600      	movs	r6, #0
   d892a:	fbbc fcf3 	udiv	ip, ip, r3
   d892e:	fb03 fa0c 	mul.w	sl, r3, ip
   d8932:	ea6f 0a0a 	mvn.w	sl, sl
   d8936:	4630      	mov	r0, r6
   d8938:	eb09 0e04 	add.w	lr, r9, r4
   d893c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8940:	f01e 0f04 	tst.w	lr, #4
   d8944:	d001      	beq.n	d894a <_strtoul_r+0x7e>
   d8946:	3c30      	subs	r4, #48	; 0x30
   d8948:	e00b      	b.n	d8962 <_strtoul_r+0x96>
   d894a:	f01e 0e03 	ands.w	lr, lr, #3
   d894e:	d01a      	beq.n	d8986 <_strtoul_r+0xba>
   d8950:	f1be 0f01 	cmp.w	lr, #1
   d8954:	bf0c      	ite	eq
   d8956:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d895a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d895e:	ebce 0404 	rsb	r4, lr, r4
   d8962:	42a3      	cmp	r3, r4
   d8964:	dd0f      	ble.n	d8986 <_strtoul_r+0xba>
   d8966:	2e00      	cmp	r6, #0
   d8968:	db08      	blt.n	d897c <_strtoul_r+0xb0>
   d896a:	4560      	cmp	r0, ip
   d896c:	d806      	bhi.n	d897c <_strtoul_r+0xb0>
   d896e:	d101      	bne.n	d8974 <_strtoul_r+0xa8>
   d8970:	4554      	cmp	r4, sl
   d8972:	dc03      	bgt.n	d897c <_strtoul_r+0xb0>
   d8974:	fb03 4000 	mla	r0, r3, r0, r4
   d8978:	2601      	movs	r6, #1
   d897a:	e001      	b.n	d8980 <_strtoul_r+0xb4>
   d897c:	f04f 36ff 	mov.w	r6, #4294967295
   d8980:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8984:	e7d8      	b.n	d8938 <_strtoul_r+0x6c>
   d8986:	2e00      	cmp	r6, #0
   d8988:	da07      	bge.n	d899a <_strtoul_r+0xce>
   d898a:	2322      	movs	r3, #34	; 0x22
   d898c:	f8c8 3000 	str.w	r3, [r8]
   d8990:	f04f 30ff 	mov.w	r0, #4294967295
   d8994:	b92a      	cbnz	r2, d89a2 <_strtoul_r+0xd6>
   d8996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d899a:	b107      	cbz	r7, d899e <_strtoul_r+0xd2>
   d899c:	4240      	negs	r0, r0
   d899e:	b172      	cbz	r2, d89be <_strtoul_r+0xf2>
   d89a0:	b106      	cbz	r6, d89a4 <_strtoul_r+0xd8>
   d89a2:	1e69      	subs	r1, r5, #1
   d89a4:	6011      	str	r1, [r2, #0]
   d89a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d89aa:	2430      	movs	r4, #48	; 0x30
   d89ac:	2b00      	cmp	r3, #0
   d89ae:	d1b9      	bne.n	d8924 <_strtoul_r+0x58>
   d89b0:	2308      	movs	r3, #8
   d89b2:	e7b7      	b.n	d8924 <_strtoul_r+0x58>
   d89b4:	230a      	movs	r3, #10
   d89b6:	e7b5      	b.n	d8924 <_strtoul_r+0x58>
   d89b8:	2c30      	cmp	r4, #48	; 0x30
   d89ba:	d0ab      	beq.n	d8914 <_strtoul_r+0x48>
   d89bc:	e7b2      	b.n	d8924 <_strtoul_r+0x58>
   d89be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d89c2:	bf00      	nop
   d89c4:	2003e15c 	.word	0x2003e15c

000d89c8 <strtoul>:
   d89c8:	4613      	mov	r3, r2
   d89ca:	460a      	mov	r2, r1
   d89cc:	4601      	mov	r1, r0
   d89ce:	4802      	ldr	r0, [pc, #8]	; (d89d8 <strtoul+0x10>)
   d89d0:	6800      	ldr	r0, [r0, #0]
   d89d2:	f7ff bf7b 	b.w	d88cc <_strtoul_r>
   d89d6:	bf00      	nop
   d89d8:	2003e1c0 	.word	0x2003e1c0

000d89dc <__tzcalc_limits>:
   d89dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d89e0:	4604      	mov	r4, r0
   d89e2:	f000 fa6f 	bl	d8ec4 <__gettzinfo>
   d89e6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d89ea:	429c      	cmp	r4, r3
   d89ec:	f340 8096 	ble.w	d8b1c <__tzcalc_limits+0x140>
   d89f0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d89f4:	18e3      	adds	r3, r4, r3
   d89f6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d89fa:	109b      	asrs	r3, r3, #2
   d89fc:	f240 156d 	movw	r5, #365	; 0x16d
   d8a00:	fb05 3502 	mla	r5, r5, r2, r3
   d8a04:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8a08:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8a0c:	fb92 f3f3 	sdiv	r3, r2, r3
   d8a10:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8a14:	442b      	add	r3, r5
   d8a16:	18a5      	adds	r5, r4, r2
   d8a18:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8a1c:	fb95 f5f2 	sdiv	r5, r5, r2
   d8a20:	441d      	add	r5, r3
   d8a22:	2364      	movs	r3, #100	; 0x64
   d8a24:	fb94 f7f2 	sdiv	r7, r4, r2
   d8a28:	fb94 f6f3 	sdiv	r6, r4, r3
   d8a2c:	fb02 4717 	mls	r7, r2, r7, r4
   d8a30:	fb03 4616 	mls	r6, r3, r6, r4
   d8a34:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d8a38:	fab7 fe87 	clz	lr, r7
   d8a3c:	9301      	str	r3, [sp, #4]
   d8a3e:	f004 0303 	and.w	r3, r4, #3
   d8a42:	6044      	str	r4, [r0, #4]
   d8a44:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d8a48:	4601      	mov	r1, r0
   d8a4a:	9300      	str	r3, [sp, #0]
   d8a4c:	f04f 0c07 	mov.w	ip, #7
   d8a50:	7a0b      	ldrb	r3, [r1, #8]
   d8a52:	2b4a      	cmp	r3, #74	; 0x4a
   d8a54:	d10e      	bne.n	d8a74 <__tzcalc_limits+0x98>
   d8a56:	694b      	ldr	r3, [r1, #20]
   d8a58:	9a00      	ldr	r2, [sp, #0]
   d8a5a:	18ec      	adds	r4, r5, r3
   d8a5c:	b902      	cbnz	r2, d8a60 <__tzcalc_limits+0x84>
   d8a5e:	b906      	cbnz	r6, d8a62 <__tzcalc_limits+0x86>
   d8a60:	b927      	cbnz	r7, d8a6c <__tzcalc_limits+0x90>
   d8a62:	2b3b      	cmp	r3, #59	; 0x3b
   d8a64:	bfd4      	ite	le
   d8a66:	2300      	movle	r3, #0
   d8a68:	2301      	movgt	r3, #1
   d8a6a:	e000      	b.n	d8a6e <__tzcalc_limits+0x92>
   d8a6c:	2300      	movs	r3, #0
   d8a6e:	4423      	add	r3, r4
   d8a70:	3b01      	subs	r3, #1
   d8a72:	e03f      	b.n	d8af4 <__tzcalc_limits+0x118>
   d8a74:	2b44      	cmp	r3, #68	; 0x44
   d8a76:	d102      	bne.n	d8a7e <__tzcalc_limits+0xa2>
   d8a78:	694b      	ldr	r3, [r1, #20]
   d8a7a:	442b      	add	r3, r5
   d8a7c:	e03a      	b.n	d8af4 <__tzcalc_limits+0x118>
   d8a7e:	9b00      	ldr	r3, [sp, #0]
   d8a80:	b92b      	cbnz	r3, d8a8e <__tzcalc_limits+0xb2>
   d8a82:	2e00      	cmp	r6, #0
   d8a84:	bf0c      	ite	eq
   d8a86:	46f0      	moveq	r8, lr
   d8a88:	f04f 0801 	movne.w	r8, #1
   d8a8c:	e000      	b.n	d8a90 <__tzcalc_limits+0xb4>
   d8a8e:	46f0      	mov	r8, lr
   d8a90:	4b24      	ldr	r3, [pc, #144]	; (d8b24 <__tzcalc_limits+0x148>)
   d8a92:	68cc      	ldr	r4, [r1, #12]
   d8a94:	2230      	movs	r2, #48	; 0x30
   d8a96:	fb02 3808 	mla	r8, r2, r8, r3
   d8a9a:	f1a8 0a04 	sub.w	sl, r8, #4
   d8a9e:	46a9      	mov	r9, r5
   d8aa0:	2301      	movs	r3, #1
   d8aa2:	42a3      	cmp	r3, r4
   d8aa4:	da04      	bge.n	d8ab0 <__tzcalc_limits+0xd4>
   d8aa6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d8aaa:	3301      	adds	r3, #1
   d8aac:	44d9      	add	r9, fp
   d8aae:	e7f8      	b.n	d8aa2 <__tzcalc_limits+0xc6>
   d8ab0:	f109 0304 	add.w	r3, r9, #4
   d8ab4:	fb93 fbfc 	sdiv	fp, r3, ip
   d8ab8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8abc:	2c01      	cmp	r4, #1
   d8abe:	ebca 0a03 	rsb	sl, sl, r3
   d8ac2:	694b      	ldr	r3, [r1, #20]
   d8ac4:	bfb8      	it	lt
   d8ac6:	2401      	movlt	r4, #1
   d8ac8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8acc:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8ad0:	690b      	ldr	r3, [r1, #16]
   d8ad2:	f104 34ff 	add.w	r4, r4, #4294967295
   d8ad6:	f103 33ff 	add.w	r3, r3, #4294967295
   d8ada:	bf48      	it	mi
   d8adc:	f10a 0a07 	addmi.w	sl, sl, #7
   d8ae0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8ae4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d8ae8:	4453      	add	r3, sl
   d8aea:	42a3      	cmp	r3, r4
   d8aec:	db01      	blt.n	d8af2 <__tzcalc_limits+0x116>
   d8aee:	3b07      	subs	r3, #7
   d8af0:	e7fb      	b.n	d8aea <__tzcalc_limits+0x10e>
   d8af2:	444b      	add	r3, r9
   d8af4:	698c      	ldr	r4, [r1, #24]
   d8af6:	4a0c      	ldr	r2, [pc, #48]	; (d8b28 <__tzcalc_limits+0x14c>)
   d8af8:	fb02 4303 	mla	r3, r2, r3, r4
   d8afc:	6a0c      	ldr	r4, [r1, #32]
   d8afe:	4423      	add	r3, r4
   d8b00:	f841 3f1c 	str.w	r3, [r1, #28]!
   d8b04:	9b01      	ldr	r3, [sp, #4]
   d8b06:	4299      	cmp	r1, r3
   d8b08:	d1a2      	bne.n	d8a50 <__tzcalc_limits+0x74>
   d8b0a:	69c3      	ldr	r3, [r0, #28]
   d8b0c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d8b0e:	4293      	cmp	r3, r2
   d8b10:	bfac      	ite	ge
   d8b12:	2300      	movge	r3, #0
   d8b14:	2301      	movlt	r3, #1
   d8b16:	6003      	str	r3, [r0, #0]
   d8b18:	2001      	movs	r0, #1
   d8b1a:	e000      	b.n	d8b1e <__tzcalc_limits+0x142>
   d8b1c:	2000      	movs	r0, #0
   d8b1e:	b003      	add	sp, #12
   d8b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b24:	000d9704 	.word	0x000d9704
   d8b28:	00015180 	.word	0x00015180

000d8b2c <__tz_lock>:
   d8b2c:	4770      	bx	lr

000d8b2e <__tz_unlock>:
   d8b2e:	4770      	bx	lr

000d8b30 <_tzset_unlocked>:
   d8b30:	4b01      	ldr	r3, [pc, #4]	; (d8b38 <_tzset_unlocked+0x8>)
   d8b32:	6818      	ldr	r0, [r3, #0]
   d8b34:	f000 b802 	b.w	d8b3c <_tzset_unlocked_r>
   d8b38:	2003e1c0 	.word	0x2003e1c0

000d8b3c <_tzset_unlocked_r>:
   d8b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b40:	b08d      	sub	sp, #52	; 0x34
   d8b42:	4607      	mov	r7, r0
   d8b44:	f000 f9be 	bl	d8ec4 <__gettzinfo>
   d8b48:	49b0      	ldr	r1, [pc, #704]	; (d8e0c <_tzset_unlocked_r+0x2d0>)
   d8b4a:	4eb1      	ldr	r6, [pc, #708]	; (d8e10 <_tzset_unlocked_r+0x2d4>)
   d8b4c:	4604      	mov	r4, r0
   d8b4e:	4638      	mov	r0, r7
   d8b50:	f000 f9b0 	bl	d8eb4 <_getenv_r>
   d8b54:	4605      	mov	r5, r0
   d8b56:	b960      	cbnz	r0, d8b72 <_tzset_unlocked_r+0x36>
   d8b58:	4bae      	ldr	r3, [pc, #696]	; (d8e14 <_tzset_unlocked_r+0x2d8>)
   d8b5a:	4aaf      	ldr	r2, [pc, #700]	; (d8e18 <_tzset_unlocked_r+0x2dc>)
   d8b5c:	6018      	str	r0, [r3, #0]
   d8b5e:	4baf      	ldr	r3, [pc, #700]	; (d8e1c <_tzset_unlocked_r+0x2e0>)
   d8b60:	6018      	str	r0, [r3, #0]
   d8b62:	4baf      	ldr	r3, [pc, #700]	; (d8e20 <_tzset_unlocked_r+0x2e4>)
   d8b64:	6830      	ldr	r0, [r6, #0]
   d8b66:	601a      	str	r2, [r3, #0]
   d8b68:	605a      	str	r2, [r3, #4]
   d8b6a:	f7fc fe27 	bl	d57bc <free>
   d8b6e:	6035      	str	r5, [r6, #0]
   d8b70:	e148      	b.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8b72:	6831      	ldr	r1, [r6, #0]
   d8b74:	b979      	cbnz	r1, d8b96 <_tzset_unlocked_r+0x5a>
   d8b76:	6830      	ldr	r0, [r6, #0]
   d8b78:	f7fc fe20 	bl	d57bc <free>
   d8b7c:	4628      	mov	r0, r5
   d8b7e:	f7ff fde4 	bl	d874a <strlen>
   d8b82:	1c41      	adds	r1, r0, #1
   d8b84:	4638      	mov	r0, r7
   d8b86:	f7fc fe41 	bl	d580c <_malloc_r>
   d8b8a:	6030      	str	r0, [r6, #0]
   d8b8c:	b148      	cbz	r0, d8ba2 <_tzset_unlocked_r+0x66>
   d8b8e:	4629      	mov	r1, r5
   d8b90:	f7ff fdb8 	bl	d8704 <strcpy>
   d8b94:	e005      	b.n	d8ba2 <_tzset_unlocked_r+0x66>
   d8b96:	f7ff fdab 	bl	d86f0 <strcmp>
   d8b9a:	2800      	cmp	r0, #0
   d8b9c:	f000 8132 	beq.w	d8e04 <_tzset_unlocked_r+0x2c8>
   d8ba0:	e7e9      	b.n	d8b76 <_tzset_unlocked_r+0x3a>
   d8ba2:	782b      	ldrb	r3, [r5, #0]
   d8ba4:	4a9f      	ldr	r2, [pc, #636]	; (d8e24 <_tzset_unlocked_r+0x2e8>)
   d8ba6:	49a0      	ldr	r1, [pc, #640]	; (d8e28 <_tzset_unlocked_r+0x2ec>)
   d8ba8:	2b3a      	cmp	r3, #58	; 0x3a
   d8baa:	bf08      	it	eq
   d8bac:	3501      	addeq	r5, #1
   d8bae:	ae0a      	add	r6, sp, #40	; 0x28
   d8bb0:	4633      	mov	r3, r6
   d8bb2:	4628      	mov	r0, r5
   d8bb4:	f7fc fe12 	bl	d57dc <siscanf>
   d8bb8:	2800      	cmp	r0, #0
   d8bba:	f340 8123 	ble.w	d8e04 <_tzset_unlocked_r+0x2c8>
   d8bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8bc0:	18ef      	adds	r7, r5, r3
   d8bc2:	5ceb      	ldrb	r3, [r5, r3]
   d8bc4:	2b2d      	cmp	r3, #45	; 0x2d
   d8bc6:	d103      	bne.n	d8bd0 <_tzset_unlocked_r+0x94>
   d8bc8:	3701      	adds	r7, #1
   d8bca:	f04f 35ff 	mov.w	r5, #4294967295
   d8bce:	e003      	b.n	d8bd8 <_tzset_unlocked_r+0x9c>
   d8bd0:	2b2b      	cmp	r3, #43	; 0x2b
   d8bd2:	bf08      	it	eq
   d8bd4:	3701      	addeq	r7, #1
   d8bd6:	2501      	movs	r5, #1
   d8bd8:	f10d 0a20 	add.w	sl, sp, #32
   d8bdc:	f10d 0b1e 	add.w	fp, sp, #30
   d8be0:	f04f 0800 	mov.w	r8, #0
   d8be4:	9603      	str	r6, [sp, #12]
   d8be6:	f8cd a008 	str.w	sl, [sp, #8]
   d8bea:	9601      	str	r6, [sp, #4]
   d8bec:	f8cd b000 	str.w	fp, [sp]
   d8bf0:	4633      	mov	r3, r6
   d8bf2:	aa07      	add	r2, sp, #28
   d8bf4:	498d      	ldr	r1, [pc, #564]	; (d8e2c <_tzset_unlocked_r+0x2f0>)
   d8bf6:	f8ad 801e 	strh.w	r8, [sp, #30]
   d8bfa:	4638      	mov	r0, r7
   d8bfc:	f8ad 8020 	strh.w	r8, [sp, #32]
   d8c00:	f7fc fdec 	bl	d57dc <siscanf>
   d8c04:	4540      	cmp	r0, r8
   d8c06:	f340 80fd 	ble.w	d8e04 <_tzset_unlocked_r+0x2c8>
   d8c0a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8c0e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8c12:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8e38 <_tzset_unlocked_r+0x2fc>
   d8c16:	213c      	movs	r1, #60	; 0x3c
   d8c18:	fb01 3302 	mla	r3, r1, r2, r3
   d8c1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8c20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8c24:	fb01 3302 	mla	r3, r1, r2, r3
   d8c28:	435d      	muls	r5, r3
   d8c2a:	6225      	str	r5, [r4, #32]
   d8c2c:	4d7c      	ldr	r5, [pc, #496]	; (d8e20 <_tzset_unlocked_r+0x2e4>)
   d8c2e:	4b7d      	ldr	r3, [pc, #500]	; (d8e24 <_tzset_unlocked_r+0x2e8>)
   d8c30:	602b      	str	r3, [r5, #0]
   d8c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8c34:	497c      	ldr	r1, [pc, #496]	; (d8e28 <_tzset_unlocked_r+0x2ec>)
   d8c36:	441f      	add	r7, r3
   d8c38:	464a      	mov	r2, r9
   d8c3a:	4633      	mov	r3, r6
   d8c3c:	4638      	mov	r0, r7
   d8c3e:	f7fc fdcd 	bl	d57dc <siscanf>
   d8c42:	4540      	cmp	r0, r8
   d8c44:	dc08      	bgt.n	d8c58 <_tzset_unlocked_r+0x11c>
   d8c46:	682b      	ldr	r3, [r5, #0]
   d8c48:	606b      	str	r3, [r5, #4]
   d8c4a:	4b72      	ldr	r3, [pc, #456]	; (d8e14 <_tzset_unlocked_r+0x2d8>)
   d8c4c:	6a22      	ldr	r2, [r4, #32]
   d8c4e:	601a      	str	r2, [r3, #0]
   d8c50:	4b72      	ldr	r3, [pc, #456]	; (d8e1c <_tzset_unlocked_r+0x2e0>)
   d8c52:	f8c3 8000 	str.w	r8, [r3]
   d8c56:	e0d5      	b.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8c5a:	f8c5 9004 	str.w	r9, [r5, #4]
   d8c5e:	18fd      	adds	r5, r7, r3
   d8c60:	5cfb      	ldrb	r3, [r7, r3]
   d8c62:	2b2d      	cmp	r3, #45	; 0x2d
   d8c64:	d103      	bne.n	d8c6e <_tzset_unlocked_r+0x132>
   d8c66:	3501      	adds	r5, #1
   d8c68:	f04f 37ff 	mov.w	r7, #4294967295
   d8c6c:	e003      	b.n	d8c76 <_tzset_unlocked_r+0x13a>
   d8c6e:	2b2b      	cmp	r3, #43	; 0x2b
   d8c70:	bf08      	it	eq
   d8c72:	3501      	addeq	r5, #1
   d8c74:	2701      	movs	r7, #1
   d8c76:	2300      	movs	r3, #0
   d8c78:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8c7c:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8c80:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8c84:	930a      	str	r3, [sp, #40]	; 0x28
   d8c86:	9603      	str	r6, [sp, #12]
   d8c88:	f8cd a008 	str.w	sl, [sp, #8]
   d8c8c:	9601      	str	r6, [sp, #4]
   d8c8e:	f8cd b000 	str.w	fp, [sp]
   d8c92:	4633      	mov	r3, r6
   d8c94:	aa07      	add	r2, sp, #28
   d8c96:	4965      	ldr	r1, [pc, #404]	; (d8e2c <_tzset_unlocked_r+0x2f0>)
   d8c98:	4628      	mov	r0, r5
   d8c9a:	f7fc fd9f 	bl	d57dc <siscanf>
   d8c9e:	2800      	cmp	r0, #0
   d8ca0:	dc04      	bgt.n	d8cac <_tzset_unlocked_r+0x170>
   d8ca2:	6a23      	ldr	r3, [r4, #32]
   d8ca4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d8ca8:	63e3      	str	r3, [r4, #60]	; 0x3c
   d8caa:	e00e      	b.n	d8cca <_tzset_unlocked_r+0x18e>
   d8cac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8cb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8cb4:	213c      	movs	r1, #60	; 0x3c
   d8cb6:	fb01 3302 	mla	r3, r1, r2, r3
   d8cba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8cbe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8cc2:	fb01 3302 	mla	r3, r1, r2, r3
   d8cc6:	435f      	muls	r7, r3
   d8cc8:	63e7      	str	r7, [r4, #60]	; 0x3c
   d8cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ccc:	4627      	mov	r7, r4
   d8cce:	441d      	add	r5, r3
   d8cd0:	f04f 0900 	mov.w	r9, #0
   d8cd4:	782b      	ldrb	r3, [r5, #0]
   d8cd6:	2b2c      	cmp	r3, #44	; 0x2c
   d8cd8:	bf08      	it	eq
   d8cda:	3501      	addeq	r5, #1
   d8cdc:	f895 8000 	ldrb.w	r8, [r5]
   d8ce0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8ce4:	d126      	bne.n	d8d34 <_tzset_unlocked_r+0x1f8>
   d8ce6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d8cea:	9302      	str	r3, [sp, #8]
   d8cec:	ab09      	add	r3, sp, #36	; 0x24
   d8cee:	9300      	str	r3, [sp, #0]
   d8cf0:	9603      	str	r6, [sp, #12]
   d8cf2:	9601      	str	r6, [sp, #4]
   d8cf4:	4633      	mov	r3, r6
   d8cf6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8cfa:	494d      	ldr	r1, [pc, #308]	; (d8e30 <_tzset_unlocked_r+0x2f4>)
   d8cfc:	4628      	mov	r0, r5
   d8cfe:	f7fc fd6d 	bl	d57dc <siscanf>
   d8d02:	2803      	cmp	r0, #3
   d8d04:	d17e      	bne.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8d06:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8d0a:	1e4b      	subs	r3, r1, #1
   d8d0c:	2b0b      	cmp	r3, #11
   d8d0e:	d879      	bhi.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8d10:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8d14:	1e53      	subs	r3, r2, #1
   d8d16:	2b04      	cmp	r3, #4
   d8d18:	d874      	bhi.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8d1a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8d1e:	2b06      	cmp	r3, #6
   d8d20:	d870      	bhi.n	d8e04 <_tzset_unlocked_r+0x2c8>
   d8d22:	f887 8008 	strb.w	r8, [r7, #8]
   d8d26:	60f9      	str	r1, [r7, #12]
   d8d28:	613a      	str	r2, [r7, #16]
   d8d2a:	617b      	str	r3, [r7, #20]
   d8d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8d2e:	eb05 0803 	add.w	r8, r5, r3
   d8d32:	e02a      	b.n	d8d8a <_tzset_unlocked_r+0x24e>
   d8d34:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8d38:	bf06      	itte	eq
   d8d3a:	3501      	addeq	r5, #1
   d8d3c:	4643      	moveq	r3, r8
   d8d3e:	2344      	movne	r3, #68	; 0x44
   d8d40:	220a      	movs	r2, #10
   d8d42:	a90b      	add	r1, sp, #44	; 0x2c
   d8d44:	4628      	mov	r0, r5
   d8d46:	9305      	str	r3, [sp, #20]
   d8d48:	f7ff fe3e 	bl	d89c8 <strtoul>
   d8d4c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8d50:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8d54:	4545      	cmp	r5, r8
   d8d56:	9b05      	ldr	r3, [sp, #20]
   d8d58:	d114      	bne.n	d8d84 <_tzset_unlocked_r+0x248>
   d8d5a:	234d      	movs	r3, #77	; 0x4d
   d8d5c:	f1b9 0f00 	cmp.w	r9, #0
   d8d60:	d107      	bne.n	d8d72 <_tzset_unlocked_r+0x236>
   d8d62:	7223      	strb	r3, [r4, #8]
   d8d64:	2303      	movs	r3, #3
   d8d66:	60e3      	str	r3, [r4, #12]
   d8d68:	2302      	movs	r3, #2
   d8d6a:	6123      	str	r3, [r4, #16]
   d8d6c:	f8c4 9014 	str.w	r9, [r4, #20]
   d8d70:	e00b      	b.n	d8d8a <_tzset_unlocked_r+0x24e>
   d8d72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8d76:	230b      	movs	r3, #11
   d8d78:	62a3      	str	r3, [r4, #40]	; 0x28
   d8d7a:	2301      	movs	r3, #1
   d8d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8d7e:	2300      	movs	r3, #0
   d8d80:	6323      	str	r3, [r4, #48]	; 0x30
   d8d82:	e002      	b.n	d8d8a <_tzset_unlocked_r+0x24e>
   d8d84:	b280      	uxth	r0, r0
   d8d86:	723b      	strb	r3, [r7, #8]
   d8d88:	6178      	str	r0, [r7, #20]
   d8d8a:	2302      	movs	r3, #2
   d8d8c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8d90:	2300      	movs	r3, #0
   d8d92:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8d96:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8d9a:	930a      	str	r3, [sp, #40]	; 0x28
   d8d9c:	f898 3000 	ldrb.w	r3, [r8]
   d8da0:	2b2f      	cmp	r3, #47	; 0x2f
   d8da2:	d10b      	bne.n	d8dbc <_tzset_unlocked_r+0x280>
   d8da4:	9603      	str	r6, [sp, #12]
   d8da6:	f8cd a008 	str.w	sl, [sp, #8]
   d8daa:	9601      	str	r6, [sp, #4]
   d8dac:	f8cd b000 	str.w	fp, [sp]
   d8db0:	4633      	mov	r3, r6
   d8db2:	aa07      	add	r2, sp, #28
   d8db4:	491f      	ldr	r1, [pc, #124]	; (d8e34 <_tzset_unlocked_r+0x2f8>)
   d8db6:	4640      	mov	r0, r8
   d8db8:	f7fc fd10 	bl	d57dc <siscanf>
   d8dbc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8dc0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8dc4:	213c      	movs	r1, #60	; 0x3c
   d8dc6:	fb01 3302 	mla	r3, r1, r2, r3
   d8dca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8dce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8dd2:	fb01 3302 	mla	r3, r1, r2, r3
   d8dd6:	61bb      	str	r3, [r7, #24]
   d8dd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d8dda:	f109 0901 	add.w	r9, r9, #1
   d8dde:	f1b9 0f02 	cmp.w	r9, #2
   d8de2:	4445      	add	r5, r8
   d8de4:	f107 071c 	add.w	r7, r7, #28
   d8de8:	f47f af74 	bne.w	d8cd4 <_tzset_unlocked_r+0x198>
   d8dec:	6860      	ldr	r0, [r4, #4]
   d8dee:	f7ff fdf5 	bl	d89dc <__tzcalc_limits>
   d8df2:	4b08      	ldr	r3, [pc, #32]	; (d8e14 <_tzset_unlocked_r+0x2d8>)
   d8df4:	6a22      	ldr	r2, [r4, #32]
   d8df6:	601a      	str	r2, [r3, #0]
   d8df8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8dfa:	1a9b      	subs	r3, r3, r2
   d8dfc:	4a07      	ldr	r2, [pc, #28]	; (d8e1c <_tzset_unlocked_r+0x2e0>)
   d8dfe:	bf18      	it	ne
   d8e00:	2301      	movne	r3, #1
   d8e02:	6013      	str	r3, [r2, #0]
   d8e04:	b00d      	add	sp, #52	; 0x34
   d8e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e0a:	bf00      	nop
   d8e0c:	000d9764 	.word	0x000d9764
   d8e10:	2003e7e0 	.word	0x2003e7e0
   d8e14:	2003e7e8 	.word	0x2003e7e8
   d8e18:	000d9568 	.word	0x000d9568
   d8e1c:	2003e7e4 	.word	0x2003e7e4
   d8e20:	2003e1c4 	.word	0x2003e1c4
   d8e24:	2003e7d3 	.word	0x2003e7d3
   d8e28:	000d9767 	.word	0x000d9767
   d8e2c:	000d978a 	.word	0x000d978a
   d8e30:	000d9776 	.word	0x000d9776
   d8e34:	000d9789 	.word	0x000d9789
   d8e38:	2003e7c8 	.word	0x2003e7c8

000d8e3c <_findenv_r>:
   d8e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e40:	4607      	mov	r7, r0
   d8e42:	468b      	mov	fp, r1
   d8e44:	4690      	mov	r8, r2
   d8e46:	f000 f8d9 	bl	d8ffc <__env_lock>
   d8e4a:	4b19      	ldr	r3, [pc, #100]	; (d8eb0 <_findenv_r+0x74>)
   d8e4c:	681d      	ldr	r5, [r3, #0]
   d8e4e:	469a      	mov	sl, r3
   d8e50:	b13d      	cbz	r5, d8e62 <_findenv_r+0x26>
   d8e52:	465c      	mov	r4, fp
   d8e54:	4623      	mov	r3, r4
   d8e56:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e5a:	b142      	cbz	r2, d8e6e <_findenv_r+0x32>
   d8e5c:	2a3d      	cmp	r2, #61	; 0x3d
   d8e5e:	461c      	mov	r4, r3
   d8e60:	d1f8      	bne.n	d8e54 <_findenv_r+0x18>
   d8e62:	4638      	mov	r0, r7
   d8e64:	f000 f8cb 	bl	d8ffe <__env_unlock>
   d8e68:	2000      	movs	r0, #0
   d8e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8e6e:	ebcb 0404 	rsb	r4, fp, r4
   d8e72:	46a9      	mov	r9, r5
   d8e74:	f859 0b04 	ldr.w	r0, [r9], #4
   d8e78:	2800      	cmp	r0, #0
   d8e7a:	d0f2      	beq.n	d8e62 <_findenv_r+0x26>
   d8e7c:	4622      	mov	r2, r4
   d8e7e:	4659      	mov	r1, fp
   d8e80:	f7ff fc6b 	bl	d875a <strncmp>
   d8e84:	b988      	cbnz	r0, d8eaa <_findenv_r+0x6e>
   d8e86:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8e8a:	191e      	adds	r6, r3, r4
   d8e8c:	5d1b      	ldrb	r3, [r3, r4]
   d8e8e:	2b3d      	cmp	r3, #61	; 0x3d
   d8e90:	d10b      	bne.n	d8eaa <_findenv_r+0x6e>
   d8e92:	f8da 3000 	ldr.w	r3, [sl]
   d8e96:	1aed      	subs	r5, r5, r3
   d8e98:	10ad      	asrs	r5, r5, #2
   d8e9a:	4638      	mov	r0, r7
   d8e9c:	f8c8 5000 	str.w	r5, [r8]
   d8ea0:	f000 f8ad 	bl	d8ffe <__env_unlock>
   d8ea4:	1c70      	adds	r0, r6, #1
   d8ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8eaa:	464d      	mov	r5, r9
   d8eac:	e7e1      	b.n	d8e72 <_findenv_r+0x36>
   d8eae:	bf00      	nop
   d8eb0:	2003e20c 	.word	0x2003e20c

000d8eb4 <_getenv_r>:
   d8eb4:	b507      	push	{r0, r1, r2, lr}
   d8eb6:	aa01      	add	r2, sp, #4
   d8eb8:	f7ff ffc0 	bl	d8e3c <_findenv_r>
   d8ebc:	b003      	add	sp, #12
   d8ebe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8ec4 <__gettzinfo>:
   d8ec4:	4800      	ldr	r0, [pc, #0]	; (d8ec8 <__gettzinfo+0x4>)
   d8ec6:	4770      	bx	lr
   d8ec8:	2003e1cc 	.word	0x2003e1cc

000d8ecc <gmtime_r>:
   d8ecc:	6802      	ldr	r2, [r0, #0]
   d8ece:	4b47      	ldr	r3, [pc, #284]	; (d8fec <gmtime_r+0x120>)
   d8ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ed2:	fb92 f4f3 	sdiv	r4, r2, r3
   d8ed6:	fb03 2214 	mls	r2, r3, r4, r2
   d8eda:	2a00      	cmp	r2, #0
   d8edc:	bfbc      	itt	lt
   d8ede:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8ee2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8ee6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8eea:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8eee:	fb92 f3f0 	sdiv	r3, r2, r0
   d8ef2:	fb00 2213 	mls	r2, r0, r3, r2
   d8ef6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8efa:	bfac      	ite	ge
   d8efc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8f00:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8f04:	608b      	str	r3, [r1, #8]
   d8f06:	fb92 f3f0 	sdiv	r3, r2, r0
   d8f0a:	fb00 2213 	mls	r2, r0, r3, r2
   d8f0e:	604b      	str	r3, [r1, #4]
   d8f10:	600a      	str	r2, [r1, #0]
   d8f12:	2307      	movs	r3, #7
   d8f14:	1ce2      	adds	r2, r4, #3
   d8f16:	fb92 f3f3 	sdiv	r3, r2, r3
   d8f1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8f1e:	1ad3      	subs	r3, r2, r3
   d8f20:	618b      	str	r3, [r1, #24]
   d8f22:	4b33      	ldr	r3, [pc, #204]	; (d8ff0 <gmtime_r+0x124>)
   d8f24:	4d33      	ldr	r5, [pc, #204]	; (d8ff4 <gmtime_r+0x128>)
   d8f26:	fb94 f5f5 	sdiv	r5, r4, r5
   d8f2a:	fb03 4405 	mla	r4, r3, r5, r4
   d8f2e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8f32:	fbb4 f2f2 	udiv	r2, r4, r2
   d8f36:	4422      	add	r2, r4
   d8f38:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8f3c:	fbb4 f3f7 	udiv	r3, r4, r7
   d8f40:	1ad2      	subs	r2, r2, r3
   d8f42:	482d      	ldr	r0, [pc, #180]	; (d8ff8 <gmtime_r+0x12c>)
   d8f44:	fbb4 f0f0 	udiv	r0, r4, r0
   d8f48:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8f4c:	1a13      	subs	r3, r2, r0
   d8f4e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8f52:	4434      	add	r4, r6
   d8f54:	f240 126d 	movw	r2, #365	; 0x16d
   d8f58:	fbb3 f0f2 	udiv	r0, r3, r2
   d8f5c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8f60:	1ae3      	subs	r3, r4, r3
   d8f62:	fb02 3310 	mls	r3, r2, r0, r3
   d8f66:	2499      	movs	r4, #153	; 0x99
   d8f68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8f6c:	3202      	adds	r2, #2
   d8f6e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8f72:	2a0a      	cmp	r2, #10
   d8f74:	fb04 f402 	mul.w	r4, r4, r2
   d8f78:	f104 0602 	add.w	r6, r4, #2
   d8f7c:	f04f 0405 	mov.w	r4, #5
   d8f80:	fbb6 f4f4 	udiv	r4, r6, r4
   d8f84:	bf34      	ite	cc
   d8f86:	2602      	movcc	r6, #2
   d8f88:	f06f 0609 	mvncs.w	r6, #9
   d8f8c:	4416      	add	r6, r2
   d8f8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8f92:	fb02 0505 	mla	r5, r2, r5, r0
   d8f96:	1c5f      	adds	r7, r3, #1
   d8f98:	2e01      	cmp	r6, #1
   d8f9a:	bf98      	it	ls
   d8f9c:	3501      	addls	r5, #1
   d8f9e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8fa2:	eba7 0704 	sub.w	r7, r7, r4
   d8fa6:	d302      	bcc.n	d8fae <gmtime_r+0xe2>
   d8fa8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8fac:	e014      	b.n	d8fd8 <gmtime_r+0x10c>
   d8fae:	0782      	lsls	r2, r0, #30
   d8fb0:	d105      	bne.n	d8fbe <gmtime_r+0xf2>
   d8fb2:	2464      	movs	r4, #100	; 0x64
   d8fb4:	fbb0 f2f4 	udiv	r2, r0, r4
   d8fb8:	fb04 0212 	mls	r2, r4, r2, r0
   d8fbc:	b94a      	cbnz	r2, d8fd2 <gmtime_r+0x106>
   d8fbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8fc2:	fbb0 f4f2 	udiv	r4, r0, r2
   d8fc6:	fb02 0014 	mls	r0, r2, r4, r0
   d8fca:	fab0 f280 	clz	r2, r0
   d8fce:	0952      	lsrs	r2, r2, #5
   d8fd0:	e000      	b.n	d8fd4 <gmtime_r+0x108>
   d8fd2:	2201      	movs	r2, #1
   d8fd4:	333b      	adds	r3, #59	; 0x3b
   d8fd6:	441a      	add	r2, r3
   d8fd8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8fdc:	2300      	movs	r3, #0
   d8fde:	61ca      	str	r2, [r1, #28]
   d8fe0:	614d      	str	r5, [r1, #20]
   d8fe2:	610e      	str	r6, [r1, #16]
   d8fe4:	60cf      	str	r7, [r1, #12]
   d8fe6:	620b      	str	r3, [r1, #32]
   d8fe8:	4608      	mov	r0, r1
   d8fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8fec:	00015180 	.word	0x00015180
   d8ff0:	fffdc54f 	.word	0xfffdc54f
   d8ff4:	00023ab1 	.word	0x00023ab1
   d8ff8:	00023ab0 	.word	0x00023ab0

000d8ffc <__env_lock>:
   d8ffc:	4770      	bx	lr

000d8ffe <__env_unlock>:
   d8ffe:	4770      	bx	lr

000d9000 <dynalib_user>:
   d9000:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9010:	0000 0000                                   ....

000d9014 <_ZTV16UltrasonicSensor>:
	...
   d901c:	40bd 000d 40dd 000d                         .@...@..

000d9024 <_ZTV6Sensor>:
	...
   d902c:	4251 000d 4d91 000d 4269 000d 426f 000d     QB...M..iB..oB..

000d903c <_ZTVN10StatsTools10StatsArrayIfEE>:
	...
   d9044:	4275 000d 429b 000d                         uB...B..

000d904c <_ZTV22AnalogUltrasonicSensor>:
	...
   d9054:	42a9 000d 4d91 000d 4277 000d 426f 000d     .B...M..wB..oB..

000d9064 <._401>:
   d9064:	6d63 6d00 7861 6f62 6974 0078 7453 7261     cm.maxbotix.Star
   d9074:	6574 2064 6547 2074 6e65 7274 0079 6144     ted Get entry.Da
   d9084:	6174 6920 2073 6261 756f 2074 6f74 6220     ta is about to b
   d9094:	2065 6f67 7474 6e65 4400 7461 2061 6168     e gotten.Data ha
   d90a4:	2073 6562 6e65 6720 746f 6574 006e 6f63     s been gotten.co
   d90b4:	766e 3d20 0020 6e61 2056 203d 6d00 2056     nv = .anV = .mV 
   d90c4:	203d 7400 6d65 2070 2043 203d 7400 6d65     = .temp C = .tem
   d90d4:	2070 2066 203d 4100 616e 6f6c 2067 6e49     p f = .Analog In
   d90e4:	3a20 0020 6e41 6c61 676f 4920 206e 7661      : .Analog In av
   d90f4:	6467 203a 5300 7265 6169 206c 754f 7074     gd: .Serial Outp
   d9104:	7475 3a20 0020 6576 7463 726f 3a3a 4d5f     ut : .vector::_M
   d9114:	725f 6e61 6567 635f 6568 6b63 203a 5f5f     _range_check: __
   d9124:	206e 7728 6968 6863 6920 2073 7a25 2975     n (which is %zu)
   d9134:	3e20 203d 6874 7369 3e2d 6973 657a 2928      >= this->size()
   d9144:	2820 6877 6369 2068 7369 2520 757a 0029      (which is %zu).
   d9154:	6164 6174 3d20 0020 6144 6174 4120 6776     data = .Data Avg
   d9164:	203a 5400 6972 6d6d 6e69 0067 6944 6e64     : .Trimming.Didn
   d9174:	2074 7274 6d69 316d 7b00 2220 6c77 2231     t trimm1.{ "wl1"
   d9184:	203a 3025 352e 2c66 2220 6c77 2232 203a     : %0.5f, "wl2": 
   d9194:	3025 352e 2c66 2220 6c77 2233 203a 3025     %0.5f, "wl3": %0
   d91a4:	322e 2c66 2220 6574 706d 3a22 2520 2e30     .2f, "temp": %0.
   d91b4:	6632 202c 6222 3a22 2520 2e30 6632 007d     2f, "b": %0.2f}.
   d91c4:	6863 7261 6967 676e 4600 7561 746c 4d00     charging.Fault.M
   d91d4:	6961 746e 6961 636e 2065 6f4d 6564 7320     aintaince Mode s
   d91e4:	6174 7472 6465 6620 726f 2520 0073 6c61     tarted for %s.al
   d91f4:	7265 7374 4200 726f 6e6f 322d 0000 0000     erts.Boron-2....

000d9204 <_ZTVN5spark13EthernetClassE>:
	...
   d920c:	5b2d 000d 5b23 000d 5b19 000d 5b0f 000d     -[..#[...[...[..
   d921c:	5b03 000d 5af7 000d 5aeb 000d 5ae3 000d     .[...Z...Z...Z..
   d922c:	5ad9 000d 5acf 000d 7009 000d               .Z...Z...p..

000d9238 <_ZTV8SPIClass>:
	...
   d9240:	5b4d 000d 5b4f 000d 616e 006e 766f 0066     M[..O[..nan.ovf.
   d9250:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
   d9260:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   d9270:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   d9280:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   d9290:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   d92a0:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   d92b0:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   d92c0:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   d92d0:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
   d92e0:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d92f0:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d9300:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9310:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d9320:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d9330:	6100 6c6c 2500 302b 6433 253a 3230 0075     .all.%+03d:%02u.
   d9340:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   d9350:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000d935c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9364:	640d 000d 6413 000d 6457 000d 6421 000d     .d...d..Wd..!d..
   d9374:	640f 000d                                   .d..

000d9378 <_ZTV9IPAddress>:
	...
   d9380:	69a5 000d 6995 000d 6997 000d               .i...i...i..

000d938c <_ZTV9USBSerial>:
	...
   d9394:	6a7d 000d 6acd 000d 6adb 000d 5da5 000d     }j...j...j...]..
   d93a4:	6ab9 000d 6a7f 000d 6a95 000d 6ac7 000d     .j...j...j...j..
   d93b4:	6aab 000d 6a79 000d                         .j..yj..

000d93bc <_ZTVN5spark13CellularClassE>:
	...
   d93c4:	6be7 000d 6bdd 000d 6bd3 000d 6b89 000d     .k...k...k...k..
   d93d4:	6bc7 000d 6bbb 000d 6baf 000d 6ba7 000d     .k...k...k...k..
   d93e4:	6b9d 000d 6b93 000d 7009 000d               .k...k...p..

000d93f0 <_ZTV11USARTSerial>:
	...
   d93f8:	6c21 000d 6c71 000d 6c7f 000d 5da5 000d     !l..ql...l...]..
   d9408:	6c35 000d 6c57 000d 6c43 000d 6c6b 000d     5l..Wl..Cl..kl..
   d9418:	6c23 000d 6c27 000d                         #l..'l..

000d9420 <_ZTV7TwoWire>:
	...
   d9428:	6d59 000d 6da3 000d 6d7b 000d 6d5b 000d     Ym...m..{m..[m..
   d9438:	6d83 000d 6d8b 000d 6d93 000d 6d9b 000d     .m...m...m...m..

000d9448 <_ZTVN5spark9MeshClassE>:
	...
   d9450:	6e9d 000d 6e93 000d 6e89 000d 6e7f 000d     .n...n...n...n..
   d9460:	6e73 000d 6e67 000d 6e5b 000d 6e53 000d     sn..gn..[n..Sn..
   d9470:	6e49 000d 6e3f 000d 7009 000d               In..?n...p..

000d947c <_ZTVN5spark12NetworkClassE>:
	...
   d9484:	6fa1 000d 6fab 000d 6fb5 000d 6fbf 000d     .o...o...o...o..
   d9494:	6fc9 000d 6fd5 000d 6fe1 000d 6fed 000d     .o...o...o...o..
   d94a4:	6ff5 000d 6fff 000d 7009 000d 6f6e 2074     .o...o...p..not 
   d94b4:	6e65 756f 6867 7320 6170 6563 6620 726f     enough space for
   d94c4:	6620 726f 616d 2074 7865 6170 736e 6f69      format expansio
   d94d4:	206e 5028 656c 7361 2065 7573 6d62 7469     n (Please submit
   d94e4:	6620 6c75 206c 7562 2067 6572 6f70 7472      full bug report
   d94f4:	6120 2074 7468 7074 2f3a 672f 6363 672e      at http://gcc.g
   d9504:	756e 6f2e 6772 622f 6775 2e73 7468 6c6d     nu.org/bugs.html
   d9514:	3a29 200a 2020 0020 2b2d 5878 3130 3332     ):.    .-+xX0123
   d9524:	3534 3736 3938 6261 6463 6665 3130 3332     456789abcdef0123
   d9534:	3534 3736 3938 4241 4443 4645 2d00 782b     456789ABCDEF.-+x
   d9544:	3058 3231 3433 3635 3837 6139 6362 6564     X0123456789abcde
   d9554:	4166 4342 4544 0046 302d 3231 3433 3635     fABCDEF.-0123456
   d9564:	3837 0039 4d47 0054 5348 0054 4b41 5453     789.GMT.HST.AKST
   d9574:	5000 5453 4d00 5453 4300 5453 4500 5453     .PST.MST.CST.EST
   d9584:	4100 5453 4e00 5453 4300 5445 4900 5453     .AST.NST.CET.IST
   d9594:	4500 5445 4a00 5453 0000                         .EET.JST.

000d959d <_ctype_>:
   d959d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d95ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d95bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d95cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d95dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d95ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d95fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d960d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d961d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d96a0 <__sf_fake_stdin>:
	...

000d96c0 <__sf_fake_stdout>:
	...

000d96e0 <__sf_fake_stderr>:
	...
   d9700:	0043 0000                                   C...

000d9704 <__month_lengths>:
   d9704:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9714:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9724:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9734:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9744:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9754:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9764:	5a54 2500 3031 5e5b 2d30 2c39 2d2b 255d     TZ.%10[^0-9,+-]%
   d9774:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   d9784:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   d9794:	3a6e 6825 2575 006e                         n:%hu%n.

000d979c <link_const_variable_data_end>:
   d979c:	000d424d 	.word	0x000d424d
   d97a0:	000d51a5 	.word	0x000d51a5
   d97a4:	000d5b39 	.word	0x000d5b39
   d97a8:	000d5c05 	.word	0x000d5c05
   d97ac:	000d5d95 	.word	0x000d5d95
   d97b0:	000d60c5 	.word	0x000d60c5
   d97b4:	000d61e1 	.word	0x000d61e1
   d97b8:	000d6239 	.word	0x000d6239
   d97bc:	000d6bf1 	.word	0x000d6bf1
   d97c0:	000d6f51 	.word	0x000d6f51
   d97c4:	000d70d5 	.word	0x000d70d5
   d97c8:	000d71b9 	.word	0x000d71b9
   d97cc:	000d73e9 	.word	0x000d73e9
   d97d0:	000d746d 	.word	0x000d746d
   d97d4:	000d75d1 	.word	0x000d75d1
   d97d8:	000d7695 	.word	0x000d7695

000d97dc <link_constructors_end>:
   d97dc:	00000000 	.word	0x00000000
